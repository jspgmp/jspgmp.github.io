<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github 사용하기</title>
    <url>/2021/07/27/2021-07-23-github-manual/</url>
    <content><![CDATA[<p>이번 내용은 깃허브 사용과 블로그 준비에 관한 내용입니다. </p>
<p>저는 이번에 깃허브라는것을 처음 사용해봤는데요, git-bash를 이용해서 하는게 일반 블로그보다 까다롭게 느껴지지만 익숙해지기 위해서 계속 사용하려고 해요~</p>
<span id="more"></span>

<h1 id="사용-준비하기"><a href="#사용-준비하기" class="headerlink" title="사용 준비하기"></a>사용 준비하기</h1><ol>
<li>가입 및 설치하기<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Github.com 에 가입</span><br><span class="line">git-scm.com 에서 다운로드 및 설치</span><br><span class="line">git help -a 와 git config로 각종 명령어 확인</span><br></pre></td></tr></table></figure></li>
<li>git bash 초기 세팅<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;닉네임&quot;</span><br><span class="line">git config --global user.email &quot;abc@abc.com&quot;</span><br><span class="line">git config --global core.editor &quot;vim&quot;</span><br><span class="line">git config --global core.pager &quot;cat&quot;</span><br><span class="line">git config --global init.defaultbranch &quot;main&quot;</span><br></pre></td></tr></table></figure></li>
<li>cmd 기본 명령어(git bash에서 사용)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help 로 각종 명령어 확인 가능</span><br><span class="line">touch 파일명.확장자 = 파일 생성</span><br><span class="line">ls = 현재 폴더에 있는 파일 확인</span><br><span class="line">mv 파일명.확장자 폴더명 = 파일 옮기기</span><br><span class="line">cd 디렉토리 변경</span><br><span class="line">- cd ../ = 상위 폴더로 변경</span><br><span class="line">- cd = 최상위 폴더로 변경</span><br><span class="line">- cd 주소 = 주소 폴더로 변경</span><br><span class="line">rm 파일명.확장자 = 파일 지우기</span><br><span class="line">* = asterisk</span><br><span class="line">예) rm **.md = md 파일 다 지우기</span><br></pre></td></tr></table></figure></li>
<li>vim 기본 명령어<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi 파일명.확장자 사용하여 진입</span><br><span class="line">Normal mode: 텍스트 편집 시 또는 ESC를 눌렀을 때</span><br><span class="line">Input mode: Normal mode에서 a, i, o등을 눌렀을 때, 텍스트 입력 가능</span><br><span class="line">Command mode: 저장 또는 나가기 등을 선택, 쉬프트+:으로 진입</span><br><span class="line"> - :w 저장, :wq 저장 후 종료</span><br><span class="line"> - :q! 저장하지 않고 강제종료</span><br></pre></td></tr></table></figure></li>
<li>git 연결하기 (Local과 remote 연결)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github에서 원하는 repo 생성 후 code 란에서 url을 복사한다.</span><br><span class="line">git-bash를 이용해 원하는 디렉토리에 위치 후 </span><br><span class="line">git clone url 을 입력하여 연결시킨다.</span><br></pre></td></tr></table></figure>



<h1 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h1><p>편하자고 아무데나 수정한 파일을 갖다붙이면 버전관리가 참으로 힘들겠습니다. </p>
<p>버전관리 공간은 크게 </p>
<p>Local - Remote 두곳으로 나뉘어집니다. </p>
<p>Local 에서 Branch를 갈라 수정하고 git에 올리고 그에대한 설명인 commit을 완료하고나면</p>
<p>온라인 Github로 Push 하는 것입니다. </p>
<ol>
<li>Branch  생성 및 전환</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">다른사람에게 코드 리뷰를 요청할 계획이라면 이 단계를 거쳐야 합니다.</span><br><span class="line">git-bash에서 </span><br><span class="line">git branch 로 현재 branch를 확인해주신 뒤에</span><br><span class="line">git branch &lt;새로운 branch이름&gt; 으로 하나더 만들어주시고</span><br><span class="line">git checkout &lt;새로운 branch이름&gt; 해주시면</span><br><span class="line">branch 가 바뀌게 됩니다.</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>수정 내용 적용하기</li>
</ol>
<p>변경한 사항은 <strong>BLOB</strong></p>
<p>변경사항에 대한 정보는 <strong>TREE</strong></p>
<p>스냅샷을 찍는순간 생성되는것 <strong>COMMIT</strong></p>
<p>이라고 하는데 제가 이해하기로는 <strong>COMMIT</strong>은 수정사항에 대한 설명같아요!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">올리기</span><br><span class="line">1. Working directory: 작성한 코드를 저장</span><br><span class="line">&lt;파일 열기 및 수정은 vi 파일명.확장자 통해서 가능!!&gt;</span><br><span class="line"> ↓+git add 파일명.확장자 (또는 새로운 버전으로 교체)</span><br><span class="line"> </span><br><span class="line">2. Staging area: 작성 또는 변경상태가 저장</span><br><span class="line"> ↓+git commit (수정에 대한 설명)</span><br><span class="line"> </span><br><span class="line">3. Local repo: 변경한 건에 대한 commit을 달아 저장된 상태</span><br><span class="line"> ↓+git push </span><br><span class="line"> </span><br><span class="line">4. Remote repo: github로 업로드된 상태</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>repo 가져오기</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin main + git merge FETCH_HEAD</span><br><span class="line">또는 git pull origin main</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Branch 에서 변경한 내용 코드리뷰 요청하기</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo 에서 상대방 초대</span><br><span class="line">pull request 하기</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>Branch 내용 main 에 합치기<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout main = main으로 변경</span><br><span class="line">git merge secondary = secondary 브랜치를 main으로 합병</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>첫 HTML 조우</title>
    <url>/2021/07/27/2021-07-23-htmlfirst/</url>
    <content><![CDATA[<h1 id="HTML-CSS-처음-접하기"><a href="#HTML-CSS-처음-접하기" class="headerlink" title="HTML CSS 처음 접하기"></a>HTML CSS 처음 접하기</h1><p>현재 블로그 꼴이 조금 흉측하지만 다듬어나갈 예정입니다~</p>
<p>글 목록도 좀 만들고요~</p>
<span id="more"></span>

<p>HTML과 CSS에 대한 첫 내용은 샘플을 통해 정리를 해봤습니다~</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GitHub:Where the world builds software<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./main.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-left&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://heropcode.github.io/GitHub-Responsive/img/logo.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;GitHub Logo&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span>                </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span>&gt;</span>Why GitHub?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/team&quot;</span>&gt;</span>Team<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/enterprise&quot;</span>&gt;</span>Enterprise<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span>&gt;</span>Explore<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/marketplce&quot;</span>&gt;</span>Marketplace<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span>&gt;</span>Pricing<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;input-menu&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search GitHub&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- lavel 로 고치면 sign in sign up 버튼이 줄바꿈됌! --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-signin&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-signup&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/signin&quot;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#040d21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1248px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">56px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-menu-left</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-decoration-line</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-menu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-menu-signin</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">68px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration-line</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-menu-signup</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration-line</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>자바스크립트 배열에 쓰이는 함수</title>
    <url>/2021/07/30/2021-07-30_Javascript_function/</url>
    <content><![CDATA[<h2 id="배열에-쓰이는-함수"><a href="#배열에-쓰이는-함수" class="headerlink" title="배열에 쓰이는 함수"></a>배열에 쓰이는 함수</h2><p>강의 2주차가 거의 끝이 났습니다. </p>
<p>지금 진도로는 HTML, CSS, JS 기초 단계를 공부했으며, C언어도 살짝 공부하였습니다. </p>
<p>먼저 자바스크립트 함수부터 정리를 해볼까 합니다. </p>
<span id="more"></span>

<p>21.07.26 내용</p>
<ol>
<li><strong>forEach 과 화살표 함수</strong></li>
</ol>
<p>forEach는 배열에 포함된 각각의 인자에 대해서 가해줄 먼가를 정의하는 것입니다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="params">number</span>=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(number);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>array 배열의 인자에 대해서 각각 number 함수를 대입하라는데</p>
<p>=&gt; 는 함수를 뜻하며 이렇게 표현합니다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">number =&gt; &#123;<span class="built_in">console</span>.log(number)&#125;; </span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;<span class="built_in">console</span>.log(number);&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>map 함수</strong></li>
</ol>
<p> forEach와 map 의 차이는 리턴하냐 마냐입니다. </p>
<p>가. forEach를 사용한 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squared =[];</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  spquare.push(n*n); </span><br><span class="line"></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(squared);</span><br></pre></td></tr></table></figure>



<p>나. map을 사용한 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squared = array.map(<span class="function"><span class="params">n</span>=&gt;</span>n*n); <span class="comment">//n을 받아와서 n x n을 반환한다!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(squared);</span><br></pre></td></tr></table></figure>

<p>map 대신에 그냥 forEach를 써도 될것같지만, forEach를 사용하면 undefined 로 나옵니다. </p>
<p>map은 리턴값을 저장하지만 forEach는 저장하지 않아요. </p>
<p>forEach 와 map 둘 다 배열[]에서만 사용 가능합니다. </p>
<ol start="3">
<li><strong>기타</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [ &#123;<span class="attr">id</span> : <span class="number">1</span>, <span class="attr">text</span> : <span class="string">&#x27;빨래&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,  </span><br><span class="line">                &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;숙제&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,  </span><br><span class="line">                &#123;<span class="attr">id</span> : <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;개밥주기&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;];</span><br><span class="line">array라는 배열에서 : 전후로 있는것을 속성, :앞에것을 key, :뒤에것을 Value라고 합니다. </span><br></pre></td></tr></table></figure>
<p>가. indexOf</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> find = array.indexOf(<span class="number">1</span>); <span class="comment">//1의 위치(인덱스)를 찾기</span></span><br></pre></td></tr></table></figure>
<p>나. findIndex</p>
<p> 특정 key 값을 갖고있는 배열의 <strong>위치</strong>를 찾자마자 반환하고 종료됩니다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> find = array.indexOf(<span class="function"><span class="params">a</span>=&gt;</span>a.key === <span class="number">1</span>)   </span><br></pre></td></tr></table></figure>

<p>다. filter </p>
<p>특정 key 값을 갖고있는 <strong>배열</strong>을 전부 새로 담아서 반환합니다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> find = array.filter(<span class="function"><span class="params">a</span>=&gt;</span>a.key === <span class="number">1</span>)   </span><br><span class="line">[ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;빨래&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;개밥주기&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125; ]</span><br></pre></td></tr></table></figure>

<p>라. splice, shift, pop, unshift(n) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push: 값을 배열에 집어넣습니다.</span><br><span class="line">splice: 찾은값으로부터 뒤로 n개 삭제 후 기존 배열을 수정합니다. </span><br><span class="line">slice: 찾은값을 삭제하고 기존 배열 수정하지 않습니다. </span><br><span class="line">shift: 맨앞에있는원소를 하나씩 밖으로 꺼냄, 기존 배열을 수정합니다. </span><br><span class="line">pop: 맨뒤에있는 원소를 하나씩 밖으로 뺌, 기존 배열을 수정합니다. </span><br><span class="line">unshift(n) : 맨앞에 n원소를 추가합니다.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JAVASCRIPT</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>자바스크립트 10보다 큰 숫자 구하기</title>
    <url>/2021/08/06/2021-08-06-count-more-than-ten/</url>
    <content><![CDATA[<p>10보다 큰 숫자 갯수 구하기</p>
<span id="more"></span>

<h1> 조건</h1>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = countBiggerThanTen([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBiggerThanTen</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counts = <span class="number">0</span> ;</span><br><span class="line">    numbers.forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            counts += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>삼항연산자를 쓴다면!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBiggerThenTen</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span></span><br><span class="line">    numbers.forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">		cnt += n&gt;<span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//삼항연산자, 조건문이 참이면 1 더하고 아니면 0 더함</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>reduce 사용한다면?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBiggerThenTen</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = numbers.reduce(<span class="function">(<span class="params">accumulator, value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accumulator += value &gt; <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVASCRIPT</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>자바스크립트 가격 한도 최대 비싼 아이템 추천!</title>
    <url>/2021/08/06/2021-08-06-Javascript_getItem/</url>
    <content><![CDATA[<p>드디어 포스트다운 포스트를 써볼까 합니다.</p>
<p>가격을 입력하면 상품 리스트에서 살수있는 가장 비싼 상품의 종류와 이름을 알려주는 스크립트입니다.</p>
<span id="more"></span>

<h1>상품 데이터</h1>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;밀크초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;다크초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;카라멜초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;아이스크림&#x27;</span>, <span class="attr">price</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;컵라면&#x27;</span>, <span class="attr">price</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;볼펜&#x27;</span>, <span class="attr">price</span>: <span class="number">2500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;연필&#x27;</span>, <span class="attr">price</span>: <span class="number">2500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;아메리카노&#x27;</span>, <span class="attr">price</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;과자&#x27;</span>, <span class="attr">price</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;탄산수&#x27;</span>, <span class="attr">price</span>: <span class="number">1200</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;떡볶이&#x27;</span>, <span class="attr">price</span>: <span class="number">3500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;노트&#x27;</span>, <span class="attr">price</span>: <span class="number">1500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;껌&#x27;</span>, <span class="attr">price</span>: <span class="number">500</span> &#125;</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure>



<h2>값 구하기</h2>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> line = prompt(<span class="string">&#x27;최대 금액을 입력해주세요.&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> amount = <span class="built_in">parseInt</span>(line);</span><br><span class="line"><span class="keyword">const</span> item = getItemByAmount(data, amount);</span><br><span class="line"><span class="keyword">const</span> msg = item ? <span class="string">`<span class="subst">$&#123;amount&#125;</span>원으로 살 수 있는 가장 비싼 상품은 [<span class="subst">$&#123;item.name&#125;</span>]이고, 가격은 <span class="subst">$&#123;item.price&#125;</span>원입니다.`</span> : <span class="string">&#x27;살 수 있는 상품이 없습니다.&#x27;</span>;</span><br><span class="line">alert(msg);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getItemByAmount</span>(<span class="params">data, amount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(amount) == <span class="literal">false</span>) &#123; <span class="comment">//isNsN으로 입력값이 숫자인지 판별</span></span><br><span class="line">        <span class="keyword">const</span> buyable = data.filter(<span class="function"><span class="params">a</span>=&gt;</span> a.price &lt;= amount); <span class="comment">//가격이 입력값 이하인것만 추리기</span></span><br><span class="line">        <span class="keyword">const</span> sorted = buyable.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123; <span class="comment">//추린 리스트를 가격 오름차순으로 정리하기</span></span><br><span class="line">        <span class="keyword">return</span>  a.price - b.price ;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> samePrice = sorted.filter(<span class="function"><span class="params">a</span>=&gt;</span>a.price == sorted[sorted.length-<span class="number">1</span>].price); </span><br><span class="line">        <span class="keyword">if</span> (samePrice.length &gt; <span class="number">1</span>) &#123; <span class="comment">//같은가격의 상품이 두개이상 있을때 전부 여기 집어넣는다.</span></span><br><span class="line">        <span class="keyword">const</span> tempNames = []; <span class="comment">//임시로 사용할 변수를 놓고</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> samePrice) &#123;/samePrice리스트에서 모든 name만 뽑아 tempNames로 집어넣는다.</span><br><span class="line">            tempNames.push(samePrice[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> finalList =&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">price</span>:<span class="string">&#x27;&#x27;</span>&#125;;<span class="comment">//이름을 전부 합친 것과 가격을 담을 배열 준비</span></span><br><span class="line">        finalList.name = tempNames; <span class="comment">//final List 에 name에 준비한 이름을 전부 넣는다.</span></span><br><span class="line">        finalList.price = sorted[sorted.length-<span class="number">1</span>].price; <span class="comment">//finalList에 가격을 하나만 넣는다.</span></span><br><span class="line">        <span class="keyword">return</span> finalList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sorted[sorted.length-<span class="number">1</span>];</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;    </span><br><span class="line">        alert(<span class="string">&#x27;숫자만 입력하세요&#x27;</span>);</span><br><span class="line">        <span class="built_in">window</span>.alert = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">window</span>.location.reload();<span class="comment">//여기를 지나고 최소금액 이하를 입력하면 다시 창이 열리지 않음</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>가독성이 매우 떨어지네요!</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>C언어 입문 1</title>
    <url>/2021/08/06/2021-08-06-C-basic/</url>
    <content><![CDATA[<p>C언어는 배우고있긴 한데 이해하는데 상당히 기력을 소하더라구요. </p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C언어 다룰때 출력타입 지정 필수</span><br><span class="line">%d: <span class="number">10</span>진수(정수형)</span><br><span class="line">%f: 실수형</span><br><span class="line">%e: 지수형</span><br><span class="line">%o: <span class="number">8</span>진수</span><br><span class="line">%x: <span class="number">16</span>진수</span><br><span class="line">%u: 부호없는 <span class="number">10</span>진수</span><br><span class="line">%g: 실수형 자동출력</span><br><span class="line">%p: 포인터의 주소</span><br><span class="line">%c: 하나의 문자로 출력</span><br><span class="line">%s: 문자열</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span>* pi; <span class="comment">//Pointer Integer</span></span><br><span class="line">	pi = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">// int 사이즈를 메모리에 할당한 다음에 </span></span><br><span class="line">	<span class="comment">//int*으로 (int*)으로 형변환을 하여 반환(위치), pi변수가 해당 위치를 기억할 수 있도록 한다.</span></span><br><span class="line">	<span class="keyword">if</span> (pi == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;동적 메모리 할당에 실패하였습니다.&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//본 프로그램 종료의 의미</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//할당받은 메모리 사용</span></span><br><span class="line">	*pi = <span class="number">100</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *pi); </span><br><span class="line">	<span class="comment">//동적메모리 사용이 끝나면 메모리를 시스템에 반환하여 안정성 효율성 제고</span></span><br><span class="line">	<span class="built_in">free</span>(pi);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span>* pc = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	pc = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">//char 100개만큼의 공간 할당(100개문자)</span></span><br><span class="line">	<span class="comment">//100개만큼의 공간은 배열과도 비슷하다.</span></span><br><span class="line">	<span class="keyword">if</span> (pc == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;동적 메모리 할당에 실패했습니다.\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		*(pc + i) = <span class="string">&#x27;a&#x27;</span> + i; <span class="comment">//a는 ascii코드에서 97번째에 해당 a+1 은 ascii코드로 98이어서 b가됌</span></span><br><span class="line">	&#125; <span class="comment">//이 안에서 마지막 i는 26이 된다.</span></span><br><span class="line">	*(pc + i) = <span class="number">0</span>; <span class="comment">//null은 아스키코드에서 0을 의미</span></span><br><span class="line">	<span class="comment">//문자열 배열에서 마지막 메모리 영역에 null값 넣어 종료를 인식</span></span><br><span class="line">	<span class="comment">//여기까지 하나의 문자열 생성</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pc);<span class="comment">//문자열의 자료형식은 %s이다.</span></span><br><span class="line">	<span class="built_in">free</span>(pc);<span class="comment">//할당 해제</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="comment">//typpedef 쓸 경우의 예제 Student라고 호출이 가능</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, sum = <span class="number">0</span>;	</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//fp에서 지정한 파일로부터 하나의 정수형 변수를 읽어들임</span></span><br><span class="line">	Student* students = (Student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student) * n);</span><br><span class="line">	<span class="comment">//students라는 포인터는 n개의 Student 형식을 가진 동적메모리 공간을 할당</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s %d&quot;</span>, &amp;((students + i)-&gt;name), &amp;((students + i)-&gt;score));</span><br><span class="line">		<span class="comment">//fp를 이용해서 students 배열의 i번째 인덱스에 접근해서 하나의 문자열과 하나의 정수형을</span></span><br><span class="line">		<span class="comment">//입력받는다, name값과 score 값에 값을 할당받는다.</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;이름: %s, 성적: %d&quot;</span>,  (students + i)-&gt;name, (students + i)-&gt;score ) ;</span><br><span class="line">		<span class="comment">//입력받은값을 문자형과 정수형대로 출력해준다.</span></span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">전처리기 <span class="meta">#<span class="meta-keyword">include</span>, 만든파일은 #<span class="meta-keyword">include</span> “파일명”</span></span><br><span class="line">상수 <span class="meta">#<span class="meta-keyword">define</span> PI 3.14 매크로 #<span class="meta-keyword">define</span> (x) (x*x), 입력타입 #<span class="meta-keyword">define</span> ll longlong / ld long double</span></span><br><span class="line">같은 헤더파일을 여러 개 불러왔다면 <span class="meta">#<span class="meta-keyword">ifndef</span> 아래에 같은이름으로 <span class="meta-keyword">define</span> #<span class="meta-keyword">endif</span></span></span><br><span class="line">파일을 여러개로 분할해서 깔끔하게 작성할것</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NOWARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//연결리스트 구조체 다음 노드를 가르킨다</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node* head;<span class="comment">//node는 항상 포인트변수로 동적할당을 이용해서 필요한만큼만 메모리를 쓴다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//Node 구조체 사이즈만큼의 메모리 할당을 head에게</span></span><br><span class="line">	Node* node1 = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//node1에 Node사이즈의 메모리 할당</span></span><br><span class="line">	node1-&gt;data = <span class="number">1</span>;</span><br><span class="line">	Node* node2 = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	node2-&gt;data = <span class="number">2</span>;</span><br><span class="line">	head-&gt;next = node1; <span class="comment">// head에서 node1으로 연결</span></span><br><span class="line">	node1-&gt;next = node2;</span><br><span class="line">	node2-&gt;next = <span class="literal">NULL</span>;<span class="comment">//항상 끝Node는 next값으로 NULL을 가지고 더이상 연결된게 없다고 알림</span></span><br><span class="line">	Node* cur = head-&gt;next;<span class="comment">//head에게 next를 가르키도록 만듦</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cur-&gt;data);</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">위는 다음과 동일</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFront</span><span class="params">(Node* root, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">	Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">// 새 node를 생성해서 메모리 할당하고</span></span><br><span class="line">	node-&gt;data = data; <span class="comment">//새 node의 data로는 입력받은 data를 지정하고</span></span><br><span class="line">	node-&gt;next = root-&gt;next; <span class="comment">//새 node의 다음값으로는 원래 root의 다음값을 연결하고</span></span><br><span class="line">	root-&gt;next = node; <span class="comment">//원래 root의 다음값을 새 node로 연결한다.</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeFront</span><span class="params">(Node* root)</span></span>; &#123;</span><br><span class="line">	Node* front = root-&gt;next;<span class="comment">//현재 front와 root와의 관계 설정. root의 다음값은 front</span></span><br><span class="line">	root-&gt;next = front-&gt;next;<span class="comment">//root의 다음값을 front가 아닌 front의 next로 설정(건너뜀)</span></span><br><span class="line">	<span class="built_in">free</span>(front);<span class="comment">//front 메모리 해제</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeAll</span><span class="params">(Node* root)</span> </span>&#123; <span class="comment">//모든 연결리스트를 메모리 해제하는방법</span></span><br><span class="line">	Node* cur = head-&gt;next; <span class="comment">//현재 포인트(cur)를 맨앞 head의 next에 놓고</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">//현재 포인트값이 NULL이 아닐동안</span></span><br><span class="line">		Node* next = cur-&gt;next; <span class="comment">//Node 포인트를 cur의 next값으로 조준하고</span></span><br><span class="line">		<span class="built_in">free</span>(cur); <span class="comment">//현재 cur를 메모리 해제한다음에</span></span><br><span class="line">		cur = next; <span class="comment">//지정해놨던 next값을 cur현재포인터로 다시잡는다.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAll</span><span class="params">(Node* root)</span> </span>&#123; <span class="comment">//root노드부터 전부 표시하기</span></span><br><span class="line">	Node* cur = head-&gt;next; <span class="comment">//현재 포인터를 head 다음 노드로 설정하고</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">//마지막까지</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cur-&gt;data); <span class="comment">//현재 노드의 데이터를 출력하고 </span></span><br><span class="line">		cur = cur-&gt;next; <span class="comment">//포인터를 다음으로 옮긴다.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>자료구조 와 알고리즘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.	스택 – 한쪽으로 들어가서 한쪽으로 나오는 자료구조</span><br><span class="line">메모리공간이 비효율적일 수 있음</span><br><span class="line">연결리스트를 이용해서 스택 이용가능</span><br><span class="line">2.	중위표기법 : 여러 수식을 표기하는 표기방법(7*5+3)</span><br><span class="line">3.	후위표기법 : 컴퓨터가 표기하는 방법 (7 5 * 3 +)</span><br><span class="line">4.	큐: 뒤쪽으로 들어가서 앞쪽으로 나오는 자료구조</span><br><span class="line">스케줄링, 탐색 알고리즘에서 사용, </span><br><span class="line">배열, 연결리스트 둘다 사용 가능, 난이도 낮음, </span><br><span class="line">5.	선택정렬과 삽입정렬</span><br><span class="line">선택정렬: 가장 작은것을 앞으로 보내는 정렬기법이며, 작은것 선택에 N번, 앞으로 보내는데에 N번의 연산으로 O(N^2)시간복잡도를 갖는다.</span><br><span class="line">(선택해서 앞으로보내기)</span><br><span class="line">삽입정렬: 각 숫자를 적절한 위치에 삽입하며, 들어갈 위치 선택에N번 선택하는 횟수로 N번으로 O(N^2)의 시간복잡도를 갖는다. </span><br><span class="line">(인덱스 펼쳐놓고 삽입하기)</span><br><span class="line">6.	퀵정렬 : 피벗을 기준으로 큰 값과 작은값을 서로 교체, 교체하는데 N번 엇갈린경우 교체 이후에 원소가 반으로 나뉘므로 전체 원소를 나누는데 평균 logn번이 소요되어 NlogN의 시간복잡도, 완전 이진트리와 흡사. 컴퓨터 공학에서 선호하는 형태</span><br><span class="line">편향 분할이 발생하면 복잡도가 N^2으로 높아질 수 있으므로 C언어로 구현하지 않고 C++의 알고리즘 라이브러리를 이용한다.(NlogN)보장</span><br><span class="line">(기준점놓고 계속해서 좌우로 정리하기)</span><br><span class="line">7.	계수정렬(Counting sort): 크기를 기준으로 데이터를 센다. N의 시간복잡도. </span><br><span class="line">배열을 만들어 대상과 같은 인덱스를 놓고 하나씩 추가하는데, 배열의 인덱스가 넘어가는 크기는 정렬하지 못한다. 많은 메모리를 요구하지만 빠르게 동작한다. </span><br><span class="line">8.	기수정렬 : 자릿수를 기준으로 차례대로 데이터를 정렬, 가장 큰 자릿수를 D라고 했을때 O(DN)시간복잡도를 갖는다. 0~9인덱스를 갖고 10의단위마다 인덱스에 갯수를 추가해서 1의단위 먼저 정렬하고, 10 100자리 순으로 정렬한다. 계수정렬보다 느리나 숫자가 매우 큰것도 가능</span><br><span class="line">9.	이진트리: 루트노드에서 가지를 뻗어 리프노드로 이어진다.</span><br><span class="line">길이: 거쳐야하는 가지수, 깊이: 단</span><br><span class="line">전위 순회 순서(위에서부터 아래로 갔다가 오른쪽으로)</span><br><span class="line">중위 순회 순서(맨 왼쪽에서부터 오른쪽으로)</span><br><span class="line">후위 순회 순서(밑에서부터 중간까지, 맨위는 마지막)</span><br><span class="line">10.	우선순위 큐: 우선순위를 가진 데이터를 저장하는 큐, 우선순위가 높은게 먼저나온다. 작업 스케줄링, 정렬, 네트워크 관리 등 사용.  최대 힙을 이용해 구현하며, 완전이진트리를 이용. 최대 힙: 부모노드가 자식노드보다 값이 큰 완전 이진트리 의미. = 루트가 가장 큰 값, 우선순위 삽입/삭제는logN복잡도, 정렬은 NlogN복잡</span><br><span class="line">11.	순차sequential탐색: 특정원소를 찾기위해 순차적으로 하나씩 찾기. 찾을 문자열을 찾으면 그 인덱스값을 반환한다. N복잡도. </span><br><span class="line">이진탐색: 정리되어있는 배열 내부의 값을 특정 지점부터 찾아나가며 좁혀가는 방식. O(logN)복잡도를 갖는다. </span><br><span class="line">12.	그래프의 개념과 구현</span><br><span class="line">인접행렬방식: 2차원 배열 사용</span><br><span class="line">root에서 child 1로가는건 3, child 2로가는건 7일때</span><br><span class="line">0   3   7 </span><br><span class="line">3   0  무한</span><br><span class="line">7  무한 0</span><br><span class="line"> Child 1 에서 child 2로 가는건 없으니 무한 자기자신은 0</span><br><span class="line">V^2의 공간 요구, 공간효율성 낮음, O(1)의 시간 필요</span><br><span class="line">인접리스트 방식 : 리스트 사용</span><br><span class="line">간선의 정보만 저장하여 O(E) 공간 요구, 공간효율성 높음, 연결 확인에 0(V)시간 요구</span><br><span class="line">13.	깊이 우선 탐색: 깊은것을 우선 탐색, 전체 노드를 맹목적으로 탐색하고자 할떄 사용, 스택 자료구조에 기초. 빠르게 모든 경우의 수를 탐색하고자 할때 쉽게 사용 O(N)시간 소요</span><br><span class="line">14.	너비 우선 탐색: 깊이우선과 마찬가지로 전체 노드 탐색, 큐자료구조 기초. </span><br><span class="line">고급 그래프 탐색 알고리즘에 활용. O(N)소요, 전수탐색알고리즘</span><br><span class="line">15.	이진 탐색 트리: 검색할때마다 대상이 반절씩 줄어들어 O(logN)시간복잡도</span><br><span class="line">설계시 완전 이진트리가 될수있도록 설계</span><br><span class="line">16.	AVL트리: 균형이 갖춰진 이진트리, O(logN)시간복잡도, 간단한 구현과정으로 완전 이진트리 유지. 왼쪽자식보다 오른쪽 자식높이(균형인자)와 2이상 차이날때 문제. 높이값을 변수로 가짐. 균형잡기는 노드가 삽일될 때마다 수행되며, 삽입시간복잡도는 O(logN)이다. 각트리의 균형잡기는 O(1)의 시간 복잡도를 만족해야한다.</span><br><span class="line">17.	해시 : 데이터를 최대한 빠른 속도로 관리하도록 도와주며, 메모리를 많이 소모하지만 빠르다. </span><br><span class="line">여러 데이터가 한곳에 저장되면 충돌할 수 있는데 충돌 해결:</span><br><span class="line">선형 조사법(데이터가 차있으면 다음 인덱스에 저장)</span><br><span class="line">, 이차 조사법</span><br><span class="line">충돌 발생시, 멀찍이 떨어뜨려 저장, 데이터 편중 방지</span><br><span class="line">해시 테이블 버켓에 여러 항목을 저장하는 체이닝</span><br><span class="line">해시 삽입 삭제는 O(1)의 시간 복잡도</span><br><span class="line">18.	프림알고리즘은 최소 스패닝 트리를 구하는 과정에서 O(ElogV)시간복잡도</span><br><span class="line">19.	다익스트라의 최단경로:</span><br><span class="line">자기자신의 거리는 0, 갈수있는 노드에 대해서는 거리를 기록, 갈수없는건 거리 무한 이라고 할 때 가장 이동거리가 짧은 노드를 트리에 포함한다. 그렇게 최대한 갈 수 있는 노드를 전부 포함시킨다. O(ElogV)복잡도</span><br><span class="line">20.	세그먼트 트리</span><br><span class="line">선형적으로 구간 합을 구한다면 O(N)데이터 모두 확인하여야하나.</span><br><span class="line">트리 구조로 구간 합을 구하면 O(logN)으로 구할 수 있다.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>파이썬 파이썬으로 메일보내기!</title>
    <url>/2021/08/06/2021-08-06-python_send_mail/</url>
    <content><![CDATA[<p> 파이썬을 이용해서 메일을 보내는 코드입니다.</p>
<span id="more"></span>

<ol>
<li>메일보내기<br>```Python<h1 id="Multipurpose-Internet-Mail-Extension-모듈-가져오기"><a href="#Multipurpose-Internet-Mail-Extension-모듈-가져오기" class="headerlink" title="Multipurpose Internet Mail Extension 모듈 가져오기"></a>Multipurpose Internet Mail Extension 모듈 가져오기</h1>from email.mime.text import MIMEText<br>from email.mime.multipart import MIMEMultipart</li>
</ol>
<p>#Simple Mail Transfer Protocel 라이브러리 가져오기<br>import smtplib</p>
<p>#정규표현식(regular expression) 모듈 가져오기<br>import re</p>
<p>#로그인에 사용될 변수 미리 지정<br>SMTP_SERVER = ‘smtp.gmail.com’<br>SMTP_PORT = 465<br>SMTP_USER = ‘<a href="mailto:&#109;&#x6d;&#x72;&#105;&#97;&#110;&#x6e;&#53;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#109;&#x6d;&#x72;&#105;&#97;&#110;&#x6e;&#53;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>‘<br>SMTP_PASSWORD = ‘비밀번호’</p>
<p>def send_mail(name, addr, subject, contents, attachment=None):<br>    #정규표현식을 사용해서 변수addr이 지정한 표현식 인지 확인<br>if not re.match(‘(^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$)’, addr):<br>                  # ^부분뒤로의 규칙이 맨 앞에 왔는지 판단, +는 여러 문자, @은 @,<br>                    .은 .으로 $으로 문자열이 종료됨을 나타내게 작성<br>        print(‘Wrong email’)<br>        return #여기서 리턴하면 아래 함수가 실행되지 않음</p>
<h1 id="이메일에-탑재할-msg리스트를-MIMEMultipart-‘alternative’-로-지정"><a href="#이메일에-탑재할-msg리스트를-MIMEMultipart-‘alternative’-로-지정" class="headerlink" title="이메일에 탑재할 msg리스트를 MIMEMultipart(‘alternative’)로 지정"></a>이메일에 탑재할 msg리스트를 MIMEMultipart(‘alternative’)로 지정</h1><p>msg = MIMEMultipart(‘alternative’)</p>
<h1 id="첨부파일이-있을경우-alternative-에서-mixed로-변경"><a href="#첨부파일이-있을경우-alternative-에서-mixed로-변경" class="headerlink" title="첨부파일이 있을경우 alternative 에서 mixed로 변경"></a>첨부파일이 있을경우 alternative 에서 mixed로 변경</h1><pre><code>if attachment:
    msg = MIMEMultipart(&#39;mixed&#39;)

msg[&#39;From&#39;] = SMTP_USER
msg[&#39;To&#39;] = addr
msg[&#39;Subject&#39;] = name + &#39;님, \n&#39; + subject + &#39;에 대해 알아보세요&#39;
text = MIMEText(contents, _charset = &#39;utf-8&#39;)#한글로 첨부파일 쓰면 깨진다.
msg.attach(text)
if attachment :
    from email.mime.base import MIMEBase #MIMEBase 는 파일 전송에 필요한 형태
    from email import encoders #SMTP에서 요구하는 파일 전송형태로 변환
    
    #MIMEBase 를 사용했을때 들어갈 수 있는 파일의 타입 
    application 과 octect-stream 은 일반 파일을 뜻함
    file_data = MIMEBase(&#39;application&#39;, &#39;octect-stream&#39;)

    #attachment를 rb(read binary)형태로 open하여 read하고 file_data안에set_payload한다. 
    file_data.set_payload(open(attachment, &#39;rb&#39;).read())
    encoders.encode_base64(file_data) #file_data를 base64 형태로 인코드
    import os
    filename = os.path.basename(attachment)
    
    #file_data 언급 전에header를 추가하는 함수를 사용해서 file_data에 대한 정보(메타데이터) 삽입
    file_data.add_header(&#39;Content-Disposition&#39;, &#39;attachment; filename=&quot;&#39; + filename + &#39;&quot;&#39;)
    
    msg.attach(file_data)

#어디에 접속해야할지 정보를 담은 클래스 변수
smtp = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
#로그인 변수
smtp.login(SMTP_USER, SMTP_PASSWORD)
#보내는이, 받는이, 메세지.as_string()함수 적용필요
smtp.sendmail(SMTP_USER, addr, msg.as_string())
#로그아웃
smtp.close()


send_mail(이름, 수신이메일, subject, contents, attachment)
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>파이썬 파이썬 기초 Openpyxl이용해서 엑셀파일 입출력하기</title>
    <url>/2021/08/06/2021-08-06-python_excel_io/</url>
    <content><![CDATA[<p>   파이썬을 이용해 크롤링한 자료를 엑셀로 저장하는 코드입니다.</p>
<span id="more"></span>

<ol>
<li><p>파이썬의 자료형</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">숫자형 = <span class="number">6</span></span><br><span class="line">문자형 = <span class="string">&quot;&quot;</span></span><br><span class="line">리스트 = [], 리스트 수정 가능~</span><br><span class="line">튜플 = (), 튜플은 수정 불가~</span><br><span class="line">딕셔너리 = &#123;&#125;</span><br><span class="line">참거짓 = <span class="literal">True</span>, <span class="literal">False</span></span><br></pre></td></tr></table></figure></li>
<li><p>엑셀파일 읽어오기</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook <span class="comment">#엑셀 저장 함수 불러오기</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#엑셀 데이터를 불러오기</span></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;total.xlsx&#x27;</span>) <span class="comment">#, read_only=True) 읽기모드로, 파일이 커도 읽기 가능</span></span><br><span class="line">data = wb.active \<span class="comment">#활성화된 탭을 사용한다!</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment">#A1셀 하나만 출력하기</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;A1&#x27;</span>].value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#2행 데이터 출력하기</span></span><br><span class="line">row = data[<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row :</span><br><span class="line">  <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#1~2행 데이터 출력하기</span></span><br><span class="line">rows = data[<span class="string">&#x27;1:2&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">  <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#A열 데이터 출력하기</span></span><br><span class="line">col = data[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> col :</span><br><span class="line">  <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#A~B행 데이터 출력하기</span></span><br><span class="line">cols = data[<span class="string">&#x27;A:B&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">  <span class="keyword">for</span> cell <span class="keyword">in</span> col:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br><span class="line"> </span><br><span class="line">\<span class="comment">#A1 부터 E31까지의 영역 출력하기</span></span><br><span class="line">area = data[<span class="string">&#x27;A1:E31&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> area:</span><br><span class="line">  <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br></pre></td></tr></table></figure></li>
<li><p>엑셀파일에 쓰기</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()<span class="comment">#괄호를 여닫아 클래스 변수 생성</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ws = wb.active #처음에 생성된 시트 활용</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ws = wb.create_sheet(&#x27;sheet_test2&#x27;)#시트 생성 후 시트 반환</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">ws.append([<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Score&#x27;</span>, <span class="string">&#x27;feel&#x27;</span>])<span class="comment"># 1열은 number, 2열은 name으로 넣는다.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  ws.append([i, <span class="built_in">str</span>(i) + <span class="string">&#x27; data&#x27;</span>, <span class="built_in">str</span>(i*<span class="number">10</span>) + <span class="string">&#x27; 점&#x27;</span>, <span class="string">&#x27;ㅎ&#x27;</span>])</span><br><span class="line">  <span class="comment">#1열에는 i를, 2열에는 i+ data, 3열에는 i*10점, 4열에는 ㅎ을 넣는다.</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">\<span class="comment">#특정 셀에 데이터 추가하려면</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ws[&#x27;A1&#x27;] = &#x27;문자입력&#x27;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ws[&#x27;B1&#x27;] = &#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;save_test.xlsx&#x27;</span>) <span class="comment">#save 내장함수 사용</span></span><br></pre></td></tr></table></figure></li>
<li><p>엑셀파일 큰 파일<br>```python<br>#load_workbook으로 엑셀 내용을 가져오게되면, 느리고 큰 파일은 가져오지 못할 수 있다.<br>from openpyxl import load_workbook</p>
</li>
</ol>
<p>wb = load_workbook(‘total.xlsx’, read_only=True)#읽기 전용으로 읽어온다.<br>data = wb.active#활성화탭을 받아서 data삼는다.</p>
<p>for row in data.iter_rows() : #전체 행을 받아 가로 순으로 데이터를 불러오려면 ()빼먹지않기<br>    #iter_rows() 는 read only 옵션으로 불러올때 같이 쓰는게 좋다.<br>    #iter_rows()의 인자값으로는 최소 최대 열과 행, values only : bool = … 이 있다.<br>    for cell in row :<br>        print(cell.value)</p>
<p>#행단위로 읽는것은 읽기전용으로 잘 되나<br>#열단위로 읽는것은 읽기전용으로 안된다.<br>#정리하자면 큰 파일을 읽을때는 읽기전용으로 읽어 가로순으로 불러들어야한다.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 메서드와 배열</title>
    <url>/2021/08/20/20210820-JAVA-%EA%B8%B0%EC%B4%88/</url>
    <content><![CDATA[<p> Java를 공부한 내용을 앞으로 블로그에 가능한 매일 업로드할 예정입니다. </p>
<p>워크시트라는것을 워드로 작성했었는데, 차라리 md로 작성하는것이 훨씬 나을것 같다고 생각이 됩니다.</p>
<span id="more"></span>

<h2> Java의 메서드</h2>

<p>메서드는 클래스 내부에 구현되는 함수, 멤버함수라고도 한다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; -&gt;Student의 속성들</span><br><span class="line"><span class="keyword">int</span> studentNumber; -&gt; 멤버변수</span><br><span class="line">String studentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>함수정의: 이름, 매개변수, 반환값, 함수몸체</p>
<p>매개변수는 자료형과 함께 써야한다. </p>
<p>반환값에 따라 함수의 자료형 결정, 반환값이 없으면 void가 들어간다. </p>
<p>스택: 함수가 호출되면 지역 변수들이 사용하는 메모리</p>
<p>​          (함수에서 사용하는 메모리 공간이며, 지역 변수들이 자리를 잡는다.)</p>
<p>인스턴스(instance): new 키워드를 이용해 객체(인스턴스) 생성, 동적 메모리(heap)에 할당된다. 사용이 끝난 동적 메모리는 자바에서 자동으로 수거한다. 이때 스택에 있는 객체 이름을 참조변수라고 하며 메모리의 주소를 참조값(레퍼런스 벨류)라고 한다.</p>
<h2>생성자</h2>

<p>생성자는 무엇인가?</p>
<p> =&gt; 클래스와 동일한 명칭으로 인스턴스를 생성하기 위한 것(Constructor)</p>
<p>생성자의 특징은 무엇인가?</p>
<p> =&gt; 모든 클래스는 생성자를 가지고 있다. </p>
<p> =&gt; 메소드와 비슷한 모양이나 메소드가 아니다.</p>
<p> =&gt; 클래스에 생성자를 만들지 않으면, 자동으로 만들어줘서 new 키워드로 호출할 수 있다. </p>
<p> =&gt; 오버로딩: 이름은 똑같고 매개변수만 다르게 정의할 수 있다.</p>
<p>생성자를 써야하는 이유는 무엇인가?</p>
<p> =&gt; 인스턴스를 생성하여 초기값을 부여해준다. </p>
 <h2>접근제어지시자</h2>

<p>종류: public, private, protected, none</p>
<p>private: 동 클래스 내부에서만 접근 가능, 외부, 상속클래스 접근불가</p>
<p>default: 같은 패키지 내부에서 (상속이라도 패키지 다르면 접근불가)</p>
<p>protected: 같은 패키지나 상속관계에서 접근 가능</p>
<p>public: 클래스 어디서나 접근 가능</p>
<h2>캡슐화</h2>

<p> 필요한 정보와 기능만 외부에 노출한다.</p>
<p> 대부분 멤버 변수와 메서드를 감추고 외부엔 통합 인터페이스만 제공하여 오류를 최소화 한다. </p>
<h2>배열</h2>

<h3>
    배열의 특징
</h3>

<p>배열은 동일한 자료형만 담을 수 있다. </p>
<p>물리적 위치와 논리적 위치가 동일하다.</p>
<p>ArrayList를 활용한다.</p>
<p>배열 크기는 바꿀 수 없다.</p>
<p>배열의 길이와 요소는 동일하지 않다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//주의: 배열 요소간의 곱을 구하는경우 빈 0 때문에 0이 나올수 있기 때문에</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1.1</span> ; count++</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2.1</span> ; count++</span><br><span class="line"><span class="comment">//이렇게 count변수를 활용하는 것이 좋다. </span></span><br></pre></td></tr></table></figure>



 <h3>배열 초기화(initializing)</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//배열에 1부터 10까지 집어넣는다면:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, num = <span class="number">1</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">	arr[i] = num ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//배열에 담긴 1부터 10까지를 모두 합한다면:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: arr) &#123;</span><br><span class="line">	total += num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위는 배열 내 모든 요소에 적용할 방법!</p>
<h3>
    얕은복사와 깊은복사
</h3>

<p>얕은복사는 데이터의 주소만 복사하고</p>
<p>깊은복사는 데이터를 전체 복사해온다. </p>
<h4>
    얕은복사
</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(library, <span class="number">0</span>, copyLibrary, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//library 로부터 copyLibrary로 5자리의 배열을 복사한다. </span></span><br></pre></td></tr></table></figure>

<h4>
    깊은복사
</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//배열을 일일히 초기화 해준다음에</span></span><br><span class="line">copyLibrary[<span class="number">0</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">1</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">2</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">3</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">4</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i&lt;library.length; i++) &#123;</span><br><span class="line">	copyLibrary[i].setAuthor(library[i].getAuthor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//library로부터 for문으로 하나씩 대입하여 copyLibrary에 복사해넣는다. </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA Static 변수와 메소드</title>
    <url>/2021/08/20/2021-08-20-JAVA-Static%EB%B3%80%EC%88%98%EC%99%80%20Singleton%ED%8C%A8%ED%84%B4/</url>
    <content><![CDATA[<p> 아직 기본 개념이 모호한데 진도를 계속 나가봅니다. </p>
<p>Static 이라는 것은 정적이라는 뜻을 갖고있는데, 고정되어있다 이런 느낌입니다.</p>
<p>다른 변수들이 생기고 사라지고 할 때, Static은 자리를 지키면서 프로그램이 종료될때까지 유지됩니다.</p>
<span id="more"></span>



<h2> Java 메모리</h2>

<p><img src="/img/image-20210820223543146.png" alt="image-20210820223543146"></p>
<p>아래서부터 </p>
<p>Code(Text) 에 작성한 코드가 들어간다. </p>
<p>Static에 전역변수가 들어간다. 어디서든지 접근할 수 있다. 프로그램 종료까지 없어지지 않는다. </p>
<p>Stack이라는것은 한쪽에서만 들락거릴수있는 메모리로, 컴파일 단계에서 이미 사이즈가 정해진다. 프로그램 운용 중 늘어날 수 없다. 함수가 들락거리면서 써졌다 지워졌다 한다. 맨 밑에는 main 함수가 있다고 한다. </p>
<p>Heap은 프로그램 운용시 사이즈가 변한다. 컴파일 단계에서 알기 힘든 것들 예를들면 사이즈가 큰 배열 등이 할당된다.</p>
<h2>Static 변수와 메서드의 활용</h2>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> class <span class="title">Company</span> <span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">-&gt; 다른 클래스에서 생성자 호출 못하게 선점한다</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Company instance = <span class="keyword">new</span> Company();</span><br><span class="line">-&gt;정적변수로 instance를 설정한다.</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Company <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( intance == <span class="keyword">null</span> ) &#123;</span><br><span class="line">instance == <span class="keyword">new</span> Company&#125;; <span class="keyword">return</span> instance</span><br><span class="line">-&gt;다른클래스에서 생성자를 getInstance로 호출할 수 있도록 설정한다. </span><br></pre></td></tr></table></figure>

<p>위와같이 세팅 후 Company 생성자를이용하여 다른 이름으로 인스턴스를 만들어도 똑같은 인스턴스 주소를 가리킨다. </p>
<h2> 예제: Singleton 패턴을 활용한 자동차공장</h2>

<p>1개만 존재하는 CarFactory 에서 createCar 메서드를 이용해 Car객체를 만드는데 Car객체가 만들어질때마다 그 변수의 carNum값이 10001부터 1씩 증가하도록 하라 </p>
<figure class="highlight java"><figcaption><span>: CarFactoryTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	CarFactory factory = CarFactory.getInstance();</span><br><span class="line">    	Car sonata1 = factory.createCar();</span><br><span class="line">    	Car sonata2 = factory.createCar();</span><br><span class="line">    	System.out.println(sonata1.getCarNum());</span><br><span class="line">	System.out.println(sonata2.getCarNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">풀이: 단 한개만 존재해야하는 객체가 필요한 경우 싱글톤 패턴을 사용한다. 이 문제의 경우 CarFactory가 하나만 존재하고 CarCar는 여러 개 존재할 수 있어야 한다. CarFactory는 모든 객체가 변수명만 다르게 공유할 수 있는 클래스 변수가 되고 Car 변수는 인스턴스 변수가 된다. </span><br><span class="line"></span><br><span class="line">CarFactoryTest.java 파일로부터 알 수 있는 정보는 </span><br><span class="line"></span><br><span class="line">1.  1개만 존재해야하는 CarFactory와, CarFactory를 getInstance함수로 불러온다는 것</span><br><span class="line"></span><br><span class="line">2.  createCar함수로 Car 객체를 생성한다</span><br><span class="line"></span><br><span class="line">3.  createCar함수는 CarFactory안에 있어야 한다. </span><br><span class="line"></span><br><span class="line">4.  객체.getCarNum 함수는 Car 객체의 번호를 리턴한다.</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><figcaption><span>: CarFactory.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CarFactory를 클래스 변수로 사용하기 위한 부분</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//instance라는 객체를 static에 생성하고 생성자를 private으로 막아서 다른곳에서 함수 호출을 못하게 막아놓는다. new를 쓰지 못하고 .getInstance를 사용해서 접근할 수밖에 없게 만든다. </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CarFactory instance = <span class="keyword">new</span> CarFactory();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">CarFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//getInstance()를 사용하면, CarFactory타입의 instance객체가 반환된다. </span></span><br><span class="line"><span class="comment">//즉, CarFactoryTest.java에서 factory는 instance의 다른 이름이다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> sCarFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance == <span class="keyword">new</span> CarFactory();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//함수 createCar를 정의하는 부분</span></span><br><span class="line"><span class="comment">//노출되지 않는 serialNum 을 별도 생성하여 새로운 Car 변수에 대입하도록 한다. </span></span><br><span class="line"><span class="comment">//serialNum 은 createCar변수만 참조할수 있어야하므로 private하여 createCar외에 요소가 serialNum을 바꿀 수 없도록 만든다. </span></span><br><span class="line"><span class="comment">//CarFactory프로그램 운용중 항시 있으며 번호를 줘야하므로 static</span></span><br><span class="line"><span class="comment">//그러나 본 코드에서 Static 이 붙지 않아도 실행이 가능하므로 주의한다. </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> serialNum = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">//Car클래스를 리턴하는 createCar 메소드 이므로 Car가 붙는다.</span></span><br><span class="line"><span class="comment">//이게 메소드인지 생성자인지 헷갈린다. 생성자는 클래스명이랑 같다고 했는데</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 새 Car클래스 생성자(serialNum 에 1을 먼저 더하고 대입한다.)를 이용해 Car 클래스 targetCar 를 생성한다. </span></span><br><span class="line">    	Car targetCar = <span class="keyword">new</span> Car(++ serialNum);</span><br><span class="line">    <span class="keyword">return</span> targetCar;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Car.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//다음이 없다면 Car a = new Car(3030);를 입력할 수 있어 carNum을 임의로 입력할 수 있게 된다. 하지만 있어도 생성이 되는 것이 문제, 그렇다면 이걸 왜 입력해야하는지? -&gt; 기본 생성자를 지정해줘야 선언과 동시에 초기화가 가능해진다.</span></span><br><span class="line"><span class="comment">// =&gt; 두 개의 생성자가 다른 매개변수를 갖고 선언되면 생성자 오버로딩</span></span><br><span class="line"><span class="comment">// =&gt; 초기화되지 않은 필드는 오류를 일으키는 원인</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//carNum 도 다른곳에서 볼필요없으므로 private</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> carNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Car생성자에 대한 정의이다. 생성자는 메소드와 비슷한 모양이나, 리턴 타입이 없고, 생성자 이름은 클래스 이름과 동일해야한다. 매개변수는 생략되어도 되고 생성자는 오버로딩이 가능하여 여러 개를 만들 수도 있다. </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> serialNum)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.carNum = serialNum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCarNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.carNum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 추상 클래스를 활용한 예제 (gamelevel)</title>
    <url>/2021/08/26/20210826-JAVA-abstract-example/</url>
    <content><![CDATA[<h2 id="추상-클래스를-활용-예제-gamelevel"><a href="#추상-클래스를-활용-예제-gamelevel" class="headerlink" title="추상 클래스를 활용 예제: gamelevel"></a>추상 클래스를 활용 예제: gamelevel</h2><p>추상 클래스와 템플릿 메서드</p>
<p>Player가 있다. Player는 GameLevel 속성을 갖는다. 각 GameLevel 마다 run, jum, turn 세 가지 기능이 업그레이드 된다. </p>
<p>초보자: 천천히 달린다. =&gt; run만 가능</p>
<p>중급자: 빠르게 달리고, 점프할 수 있다. =&gt;run jump가능</p>
<p>고급자: 아주 빠르게 달리고, 점프할 수 있다. =&gt; run jum turn 가능</p>
<p>play(int count) 하면  go 하여 run 하고 count 횟수만큼 jump하고 turn 한다. </p>
<figure class="highlight java"><figcaption><span>: PlayerTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review1_gamelevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Player lee = <span class="keyword">new</span> Player();</span><br><span class="line">        lee.play(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        AdvancedLevel advancedLevel = <span class="keyword">new</span> AdvancedLevel();</span><br><span class="line">        lee.upgradeLevel(advancedLevel);</span><br><span class="line">        lee.play(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        SuperLevel superLevel = <span class="keyword">new</span> SuperLevel();</span><br><span class="line">        lee.upgradeLevel(superLevel);</span><br><span class="line">        lee.play(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*인터페이스 배운 직후라 인터페이스 활용할 줄 알았으나 활용하지 않는것이었음.</span></span><br><span class="line"><span class="comment">실체가 있는 Player에 대해서 객체 생성 시 충분한 요소가 있도록 설계해야한다.</span></span><br><span class="line"><span class="comment">내가 설계했던것은 추상클래스가 난잡하게 퍼져있고, Player에 대한 실체가 없었다.</span></span><br><span class="line"><span class="comment">Player 요소중 Level 에 대한 구분을 한다면 Level 을 단순히 int 나 String으로 보지 말고</span></span><br><span class="line"><span class="comment">하나의 클래스로서 생각을 해야했다.*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">출력: </span><br><span class="line">****** Begginer 레벨입니다. ******</span><br><span class="line">Begginer 레벨이 천천히 달립니다.</span><br><span class="line">Begginer 레벨은 점프 할 수 없습니다.</span><br><span class="line">Begginer 레벨은 턴 할 수 없습니다.</span><br><span class="line">****** Advanced 레벨입니다. ******</span><br><span class="line">AdvancedLevel 레벨이 빠르게 달립니다.</span><br><span class="line">AdvancedLevel 레벨이 점프합니다.</span><br><span class="line">AdvanceLevel은 턴하지 못합니다.</span><br><span class="line">****** Super 레벨입니다. ******</span><br><span class="line">SuperLevel 이 엄청 빠르게 달립니다.</span><br><span class="line">SuperLevel 이 아주 높이 점프합니다.</span><br><span class="line">SuperLevel 이 아주 높이 점프합니다.</span><br><span class="line">SuperLevel 이 턴합니다.</span><br></pre></td></tr></table></figure>



<p>정답: </p>
<figure class="highlight java"><figcaption><span>: Player.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review1_gamelevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PlayerLevel level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        level = <span class="keyword">new</span> BegginerLevel();</span><br><span class="line">        level.showLevelMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlayerLevel <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgradeLevel</span><span class="params">(PlayerLevel level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">        level.showLevelMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        level.go(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: PlayerLevel.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review1_gamelevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerLevel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showLevelMessage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        run();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">            jump();</span><br><span class="line">        &#125;</span><br><span class="line">        turn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: BegginerLevel.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review1_gamelevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BegginerLevel</span> <span class="keyword">extends</span> <span class="title">PlayerLevel</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Begginer 레벨이 천천히 달립니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Begginer 레벨은 점프 할 수 없습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Begginer 레벨은 턴 할 수 없습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLevelMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;****** Begginer 레벨입니다. ******&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: AdvancedLevel.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review1_gamelevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedLevel</span> <span class="keyword">extends</span> <span class="title">PlayerLevel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AdvancedLevel 레벨이 빠르게 달립니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AdvancedLevel 레벨이 점프합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AdvanceLevel은 턴하지 못합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLevelMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;****** Advanced 레벨입니다. ******&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: SuperLevel.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review1_gamelevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperLevel</span> <span class="keyword">extends</span> <span class="title">PlayerLevel</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperLevel 이 엄청 빠르게 달립니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperLevel 이 아주 높이 점프합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperLevel 이 턴합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLevelMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;****** Super 레벨입니다. ******&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 추상클래스와 인터페이스 예제</title>
    <url>/2021/08/27/20210827-JAVA-absClassInterface-example/</url>
    <content><![CDATA[<p>추상클래스와 인터페이스 그리고 업/다운캐스팅 예제를 보면서 어떤 차이가 있고 활용 예가 어떻게 달라지는지 알아보기위해 같은 문제를 추상클래스 버전과 인터페이스 버전으로 만들어보았다. </p>
<h4 id="문제"><a href="#문제" class="headerlink" title="문제:"></a>문제:</h4><h4 id="고객이-있다-기본-실버등급이며-할인0프로-골드는-5프로-할인-vip는-10프로-할인이다-고객의-등급을-바꾸어-할인율이-달라지게-해야한다"><a href="#고객이-있다-기본-실버등급이며-할인0프로-골드는-5프로-할인-vip는-10프로-할인이다-고객의-등급을-바꾸어-할인율이-달라지게-해야한다" class="headerlink" title="고객이 있다. 기본 실버등급이며 할인0프로, 골드는 5프로 할인, vip는 10프로 할인이다. 고객의 등급을 바꾸어 할인율이 달라지게 해야한다."></a>고객이 있다. 기본 실버등급이며 할인0프로, 골드는 5프로 할인, vip는 10프로 할인이다. 고객의 등급을 바꾸어 할인율이 달라지게 해야한다.</h4><span id="more"></span>





<p>풀이: </p>
<figure class="highlight java"><figcaption><span>CustomerVer2Test.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//CustomerGrade를 추상 클래스로 작성한 내용이다. </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerVer2Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CustomerVer2 lee = <span class="keyword">new</span> CustomerVer2();</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        Gold goldgrade = <span class="keyword">new</span> Gold();</span><br><span class="line">        lee.changegrade(goldgrade);</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        VIP vipgrade = <span class="keyword">new</span> VIP();</span><br><span class="line">        lee.changegrade(vipgrade);</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        Silver silvergrade = <span class="keyword">new</span> Silver();</span><br><span class="line">        lee.changegrade(silvergrade);</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerVer2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerGrade grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomerGrade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerVer2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        grade = <span class="keyword">new</span> Silver();</span><br><span class="line">        System.out.println(<span class="string">&quot;초기 등급은 silver입니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changegrade</span><span class="params">(CustomerGrade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        grade.showGrade();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buyA</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line">        price = grade.buy(count);</span><br><span class="line">        System.out.printf(<span class="string">&quot;물건을 %d에 삽니다. \n&quot;</span>, price);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Silver</span> <span class="keyword">extends</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;등급을 Silver로 변경&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gold</span> <span class="keyword">extends</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> saleP = <span class="number">0.05</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        price -= price * saleP;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;등급을 Gold로 변경&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span> <span class="keyword">extends</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> saleP = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        price -= price * saleP;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;등급을 VIP로 변경&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>CustomerVer2TestInterface.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//같은 내용을 인터페이스로 작성한 내용이다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerVer2TestInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CustomerVer2 lee = <span class="keyword">new</span> CustomerVer2();</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        Gold goldgrade = <span class="keyword">new</span> Gold();</span><br><span class="line">        lee.changegrade(goldgrade);</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        VIP vipgrade = <span class="keyword">new</span> VIP();</span><br><span class="line">        lee.changegrade(vipgrade);</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        Silver silvergrade = <span class="keyword">new</span> Silver();</span><br><span class="line">        lee.changegrade(silvergrade);</span><br><span class="line">        lee.buyA(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerVer2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerGrade grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomerGrade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerVer2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        grade = <span class="keyword">new</span> Silver();</span><br><span class="line">        System.out.println(<span class="string">&quot;초기 등급은 silver입니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changegrade</span><span class="params">(CustomerGrade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        grade.showGrade();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buyA</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line">        price = grade.buy(count);</span><br><span class="line">        System.out.printf(<span class="string">&quot;물건을 %d에 삽니다. \n&quot;</span>, price);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Silver</span> <span class="keyword">implements</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;등급을 Silver로 변경&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gold</span> <span class="keyword">implements</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> saleP = <span class="number">0.05</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        price -= price * saleP;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;등급을 Gold로 변경&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span> <span class="keyword">implements</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> saleP = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        price -= price * saleP;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;등급을 VIP로 변경&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">출력: </span><br><span class="line">초기 등급은 silver입니다.</span><br><span class="line">물건을 3000에 삽니다. </span><br><span class="line">등급을 Gold로 변경</span><br><span class="line">물건을 2850에 삽니다. </span><br><span class="line">등급을 VIP로 변경</span><br><span class="line">물건을 2700에 삽니다. </span><br><span class="line">등급을 Silver로 변경</span><br><span class="line">물건을 3000에 삽니다. </span><br></pre></td></tr></table></figure>





<h4 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//추상클래스</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//인터페이스</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CustomerGrade</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showGrade</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//인터페이스 경우는 Silver, Gold, VIP 클래스에 public 이 붙어야 한다. </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 인터페이스 활용 예제</title>
    <url>/2021/08/26/20210826-JAVA-interface-example/</url>
    <content><![CDATA[<h2 id="인터페이스-활용-예제-Scheduler"><a href="#인터페이스-활용-예제-Scheduler" class="headerlink" title="인터페이스 활용 예제: Scheduler"></a>인터페이스 활용 예제: Scheduler</h2><p>고객센터에 전화상담을 상단원에게 전화가 오면 대기열에 저장되고 각 상담원에게 배분된다.</p>
<p>배분 정책은 다음 세가지:</p>
<pre><code>1. 상담원 순서대로
2. 통화 수가 적은 상담원부터
3. 고객 등급이 높은 고객부터 대기열에서 빼서 업무능력이 우수한 상담원에게
</code></pre>
<p><img src="/img/image-20210826220801595.png" alt="image-20210826220801595"></p>
<p>풀이: 여기 사진에 implements라고 써있으니 인터페이스를 활용해야하고, 정책은 클래스라는것을 알았지만, </p>
<p>상위와 하위 구조를 어떻게 구성할것인가에 대한 수련이 훨씬 많이 필요하다. 많은 예제가 있었으면 좋겠다.</p>
<p>정책은 그냥 텍스트로 출력하도록 하면 되는데 괜히 고객등급이나 대기열 queue 등 로직을 짜려해서 어려웠다.</p>
<p>인터페이스 Scheduler에는 getNextCall과 sendToAgent 이렇게 기능이 두개가 있다. </p>
<ul>
<li>getNextCall의 경우</li>
</ul>
<p>R과 L의 경우에 순서대로 가져온다고 텍스트 출력을 하고</p>
<p>P는 고객등급순으로 가져온다고 텍스트 출력을 하면된다.</p>
<p> = &gt; 디폴트 메서드로 설정해주고, P 경우만 재정의 한다.</p>
<ul>
<li>sendToAgent의 경우</li>
</ul>
<p>R L P 셋이 텍스트 출력이 다르다. (밑 참조)</p>
<p> = &gt; 전부 재정의 한다.</p>
<figure class="highlight java"><figcaption><span>: SchedulerTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review2_callcenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;전화 상담원 할당 방식을 선택하세요&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;R : 한명씩 차례대로&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;L : 대기가 적은 상담원 우선&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;P : 우선순위가 높은 고객우선 숙련도 높은 상담원&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ch = System.in.read();</span><br><span class="line">        Scheduler scheduler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( ch == <span class="string">&#x27;R&#x27;</span> || ch ==<span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">            scheduler = <span class="keyword">new</span> RoundRobin();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( ch == <span class="string">&#x27;L&#x27;</span> || ch ==<span class="string">&#x27;l&#x27;</span>) &#123;</span><br><span class="line">            scheduler = <span class="keyword">new</span> LeastJob();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( ch == <span class="string">&#x27;P&#x27;</span> || ch ==<span class="string">&#x27;p&#x27;</span>) &#123;</span><br><span class="line">            scheduler = <span class="keyword">new</span> PriorityAllocation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;지원되지 않는 기능입니다.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scheduler.getNextCall();</span><br><span class="line">        scheduler.sendCallToAgent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">출력:</span><br><span class="line">전화 상담원 할당 방식을 선택하세요</span><br><span class="line">R : 한명씩 차례대로</span><br><span class="line">L : 대기가 적은 상담원 우선</span><br><span class="line">P : 우선순위가 높은 고객우선 숙련도 높은 상담원</span><br><span class="line"> </span><br><span class="line">=&gt; R or r</span><br><span class="line">상담 전화를 한명씩 차례대로 대기열에서 가져옵니다.</span><br><span class="line">다음 순서의 상담원에게 배분합니다.</span><br><span class="line"></span><br><span class="line">=&gt; L or l</span><br><span class="line">상담 전화를 한명씩 차례대로 대기열에서 가져옵니다.</span><br><span class="line">대기가 적은상담원에게 배분합니다.</span><br><span class="line"></span><br><span class="line">=&gt; P or p</span><br><span class="line">상담전화를 고객 등급이 높은 순으로 대기열에서 갸져옵니다.</span><br><span class="line">업무능력이 우수한 상담원 순으로 배분합니다.</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><figcaption><span>: Scheduler</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review2_callcenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">getNextCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;상담 전화를 한명씩 차례대로 대기열에서 가져옵니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendCallToAgent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: RoundRobin.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review2_callcenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobin</span> <span class="keyword">implements</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCallToAgent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;다음 순서의 상담원에게 배분합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: LeastJob.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review2_callcenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeastJob</span> <span class="keyword">implements</span> <span class="title">Scheduler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCallToAgent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;대기가 적은상담원에게 배분합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: PriorityAllocation.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting_review2_callcenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityAllocation</span> <span class="keyword">implements</span> <span class="title">Scheduler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNextCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;상담전화를 고객 등급이 높은 순으로 대기열에서 갸져옵니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCallToAgent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;업무능력이 우수한 상담원 순으로 배분합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 강의노트 2</title>
    <url>/2021/08/27/20210827-JAVACLASSSTREAM/</url>
    <content><![CDATA[<p>클래스 업/다운캐스팅 왜쓰는가?</p>
<p>다형성을 쓰는 이유</p>
<p>다형성: polymorphism 폴리모프</p>
<p>오버라이딩 vs 오버로딩</p>
<p>다형성의 예시</p>
<p>인터페이스 항상 public</p>
<p>인터페이스는 왜 쓰는가? - 디커필링과 다형성을위해</p>
<p>디커플링을 최소화하는이유</p>
<p>결합도를 낮추는 이유</p>
<p>-&gt; 확장성을 높이기 위해서</p>
<p>추상클래스를 상속받은 명령어들</p>
<p>AbstractMap ?clonable treemap</p>
<p>추상 메서드나 </p>
<p>훅 메서드 abstractMap 클래스의 get()메서드</p>
<p>HashMap클래스의 get()메서드</p>
<p>Treemap 클래스의 get()메서드</p>
<p>추상메서드 인터페이스 차이</p>
<p>공통: 구현부가 있는 메서드와 업는 메서드 모두 가질 수 있음  </p>
<table>
<thead>
<tr>
<th>추상클래스</th>
<th>인터페이스</th>
</tr>
</thead>
<tbody><tr>
<td>생성자를 갖는다.</td>
<td>생성자를 가질 수 없음</td>
</tr>
<tr>
<td>다중상속 불가</td>
<td>다중 상속 가능</td>
</tr>
<tr>
<td>여러 접근제어자</td>
<td>항상 public</td>
</tr>
<tr>
<td>is a kind of</td>
<td>be able to</td>
</tr>
<tr>
<td>Chickenn is a kind of Bird</td>
<td>Chicken is able to fly</td>
</tr>
<tr>
<td>Owl is a kind of Bird</td>
<td>Owl is able to fly</td>
</tr>
</tbody></table>
<p>object클래스</p>
<p>@Override의 기능, 종류</p>
<p>collections &amp; collecti</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_Class</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 강의노트</title>
    <url>/2021/08/24/20210824-javaclasswon/</url>
    <content><![CDATA[<p>8월 24일 강의에서 놓친 내용들이다…내용을 채워넣자</p>
<p>jvm 메모리 이해</p>
<p>함수형 프로그램</p>
<p>코틀린?</p>
<p>metaspace</p>
<p>perm gen</p>
<p>static 메서드와 일반 메서드 호출의 차이</p>
<p>Static 메서드는 인스턴스 생성과 상관없이 호출할 수 있고 </p>
<p>일반 메서드는 인스턴스 초기화 후 호출할 수 있다. </p>
<p>멤버변수는 함수가 호출될 때 생성되고 함수가 끝나면 소멸한다. F  소멸하는건 지역변수</p>
<p>클래스 내부에서 사용하고 private이 아니면 참조변수로 다른 클래스에서 사용가능한 변수 유형은 static변수이다. f -&gt;인스턴스 변수</p>
<p>멤버 변수는 힙 영역에 생성된다. t</p>
<table>
<thead>
<tr>
<th align="center">변수명</th>
<th align="center">생성장소</th>
<th align="center">생성시기</th>
<th align="center">메모리</th>
</tr>
</thead>
<tbody><tr>
<td align="center">클래스 변수 <br /> (Static 변수)</td>
<td align="center">클래스 내부</td>
<td align="center">프로그램 실행시</td>
<td align="center">스택</td>
</tr>
<tr>
<td align="center">인스턴스 변수</td>
<td align="center">클래스 내부</td>
<td align="center">인스턴스 생성 시</td>
<td align="center">힙</td>
</tr>
<tr>
<td align="center">지역변수</td>
<td align="center">메소드 내부</td>
<td align="center">변수 선언 시</td>
<td align="center">힙</td>
</tr>
</tbody></table>
<p>equals()로 동일여부를 체크하면 주소값을 체크한다.</p>
<p>불변객체 가변객체</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_Class</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 연결리스트 구현 예</title>
    <url>/2021/09/01/20210901-KDT-Worksheet/</url>
    <content><![CDATA[<h3 id="구현-Java"><a href="#구현-Java" class="headerlink" title="구현(Java)"></a>구현(Java)</h3><p>배열 구현</p>
<p>연결리스트 구현6</p>
<p>Stack 구현</p>
<p>Queue 구현</p>
<p>제네릭 프로그래밍</p>
<ul>
<li><p>클래스에서 사용하는 변수의 자료형이 여러개 일 수 있고, 그 기능(메서드)은 동일한 경우 클래스의 자료형을 특정하지 않고 추후 해당 클래스를 사용할 때 지정할 수 있도록 선언</p>
</li>
<li><p>실제 사용되는 자료형의 변환은 컴파일러에 의해 검증-&gt;안정적 프로그래밍 방식</p>
</li>
<li><p>컬렉션 프레임워크에서 많이 사용</p>
</li>
<li><p>제네릭 타입을 사용하지 않는 경우의 예</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 유용한 클래스 / 자료구조</title>
    <url>/2021/08/30/20210830-KDT-Worksheet/</url>
    <content><![CDATA[<p>기간 : 2021.08.30~2021.09.02</p>
<p>범위 : 한번에 끝내는 Java/Spring 웹 개발 Part 2. Ch 04~</p>
<span id="more"></span>

<h2 id="유용한-클래스들"><a href="#유용한-클래스들" class="headerlink" title="유용한 클래스들"></a>유용한 클래스들</h2><h3 id="Object-클래스"><a href="#Object-클래스" class="headerlink" title="Object 클래스"></a>Object 클래스</h3><p>모든 클래스의 최상위 클래스</p>
<p>자동으로 import</p>
<p>많이 사용하는 기본 클래스들을 포함(String, Integer, Syste…)</p>
<p>클래스에 대한 정보가 없더라도 일단 쓸수는 있게 해준다.</p>
<p>모든 클래스는 Object클래스를 상속받는다.</p>
<p>Object클래스의 메서드 일부는 재정의 가능(Final 제외)</p>
<p>컴파일러가 extends Object 자동 추가</p>
<h3 id="toString-메서드"><a href="#toString-메서드" class="headerlink" title="toString()메서드"></a>toString()메서드</h3><p>객체의 정보를 String으로 변환</p>
<p>String 이나 Integer 클래스는 이미 재정의 되어있음</p>
<p>System.out.println(str1); = System.out.println(str1.toString());</p>
<h3 id="equals-오버라이딩"><a href="#equals-오버라이딩" class="headerlink" title="equals() 오버라이딩"></a>equals() 오버라이딩</h3><p>@Override</p>
<p>public boolean equals(Object obj) {</p>
<p>//매개변수가 Object이므로 정확하게 하기위해서 Student로 다운캐스팅한다.</p>
<p>​    if (obj instanceof Student) {</p>
<p>​        Sudent std = (Student)obj;</p>
<p>​        if (this.studentNum== std.studentNum)</p>
<p>​            return true;</p>
<p>​        else return false;</p>
<p>​    }</p>
<p>}</p>
<h3 id="clone-메서드"><a href="#clone-메서드" class="headerlink" title="clone()메서드"></a>clone()메서드</h3><p>객체의 원본 복제하는데 사용하는 메서드</p>
<p>클론 사용은 정보은닉, 객체보호의 관점에서 위배될 수 있으므로, 사용을 허락한다면 cloneable인터페이스 명시</p>
<p>String, StringBuilder, StringBuffer, text block</p>
<p>String클래스(final)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"> =&gt; 힙 인스턴스로 생성되어 힙 메모리 영역에 생성되어, 각자 다른 주소값을 가르킨다.</span><br><span class="line">String str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> =&gt; 상수 풀(constant pool)에 주소를 참조하여 같은 문자일경우 같은 주소를 갖는다.</span><br></pre></td></tr></table></figure>



<h3 id="StringBuilder-StringBuffer-활용"><a href="#StringBuilder-StringBuffer-활용" class="headerlink" title="StringBuilder, StringBuffer 활용"></a>StringBuilder, StringBuffer 활용</h3><p>char버퍼를 안에 갖고있는데, 멀티 쓰레드 환경에서 동기화</p>
<p>단일: 빌더, 멀티: 버퍼</p>
<p>String 바뀌더라도 같은 해시코드를 갖게 해준다.</p>
<h3 id="text-block"><a href="#text-block" class="headerlink" title="text block"></a>text block</h3><p>“””  “””</p>
<p>사용하여 문자 전체를 넣을 수 있다.(java13이상)</p>
<p>동적 로딩</p>
<p>reflection 프로그래밍: Class 클래스를 사용하여 클래스의 정보(생성자, 변수, 메서드) 등을 알 수 있고, 인스턴스를 생성하고, 메서드를 호출하는 방식의 프로그래밍</p>
<p>로컬 메모리에 객체가 없는 경우, 원격프로그래밍, 객체의 타입을 알 수없는 경우 사용한다.</p>
<p>java.lang.reflect 패키지에 있는 클래스를 활용하여 프로그래밍</p>
<p>자료형을 알고있다면 사용하지 않는다.</p>
<p>정적 바인딩 vs 동적 바인딩</p>
<table>
<thead>
<tr>
<th>정적 바인딩</th>
<th>동적 바인딩</th>
</tr>
</thead>
<tbody><tr>
<td>컴파일시 데이터 타입이 결정되는것</td>
<td>런타임시 데이터 타입이 결정되는것</td>
</tr>
<tr>
<td>-static/final/private method, variable</td>
<td>-instance method</td>
</tr>
<tr>
<td>-instance variable</td>
<td>-method overriding</td>
</tr>
<tr>
<td>-method overloading</td>
<td></td>
</tr>
<tr>
<td>컴파일 시간에 많은 정보가 결정되어 실행효율↑</td>
<td>런타임에 자유롭게 성격이 바뀌므로 적응성↑</td>
</tr>
</tbody></table>
<p>오버로딩: 다른 메서드가 이름만 같은것</p>
<p>오버라이딩: 상위클래스 메서드를 재정의하는것</p>
<h2 id="자바와-자료구조"><a href="#자바와-자료구조" class="headerlink" title="자바와 자료구조"></a>자바와 자료구조</h2><p> 선형 자료구조</p>
<p>배열: 크기 사전지정, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 물리적 논리적 위치가 같음</p>
<p>자료 수정은 느리나 조회는 빠르다.</p>
<p>연결리스트: 자료 추가시마다 메모리 할당, 자료는 링크로 연결, 물리적 논리적 위치 다를 수 있음, 자료 수정은 빠르나 조회는 느리다.</p>
<table>
<thead>
<tr>
<th>스택</th>
<th>큐</th>
</tr>
</thead>
<tbody><tr>
<td>Last in First out</td>
<td>First in First out</td>
</tr>
<tr>
<td>가장 나중에 입력 된 자료가 먼저 출력</td>
<td>먼저 입력된 자료가 먼저 출력</td>
</tr>
<tr>
<td>-push(): 객체를 저장</td>
<td>-add(): 저장</td>
</tr>
<tr>
<td>-pop(): 맨 위 객체 꺼내기</td>
<td>-offer(): 저장</td>
</tr>
<tr>
<td>-peek(): 맨 위 저장된 객체 반환</td>
<td>-peek(): 맨 앞 요소 읽기</td>
</tr>
<tr>
<td>-empty(): 비어있는지 확인</td>
<td>-element(): 맨 앞 요소 읽기 NPE<br /> Null Pointer Exception</td>
</tr>
<tr>
<td>-search(): 객체 위치 반환(1부터 시작)</td>
<td>-poll(): 맨 앞 객체 꺼내기</td>
</tr>
<tr>
<td></td>
<td>-remove(): 맨 앞 객체 꺼내기 NPE</td>
</tr>
</tbody></table>
<h3 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h3><p>자료형을 특정하지 않고 해당 클래스 사용시 지정할 수 있도록 선언</p>
<p>Public class misutgaru<T> {}</p>
<p>&lt;&gt;안에 자료형 표시</p>
<p>컴파일러가 해주는 부분: 자료형 비어있는 부분을 채운다.</p>
<p>정적 타이핑 언어 / 동적 타이핑 언어</p>
<p>동적은 안전하진 않은데 편리하다</p>
<p>T extends : 상속 및 구현관계를 이용해서 타입을 제한</p>
<p>public &lt;T extends 상위타입(클래스or인터페이스)&gt; 리턴타입 메소드(매개변수, …) {}</p>
<p>제네릭 타입: 한개의 로직으로 여러 타입을 사용할 수 있도록 해준다.</p>
<p>제네릭 메소드: 한개의 로직으로 여러 타입의 인자와 리턴 타입을 가질 수 있게 해준다.</p>
<p>hashmap vs hashtable??</p>
<p>비선형 자료구조</p>
<p>트리: 부모 노드와 자식 노드간의 연결로 이루어진 자료구조</p>
<p>힙(heap): Priority queue를 구현(우선 큐), 종류가 여러개</p>
<p>이진트리: 부모노드에 자식노드가 두 개 이하인 트리, </p>
<p>이진 검색 트리: 자료 중복 허용하지 않음, 왼쪽으로는 부모노드보다 작은값, 우측은 큰값을 가짐, 검색시간 log(n), inorder traversal 탐색 하면 정렬되어 출력됨</p>
<p>그래프: 정점과 간선들의 유한 집합</p>
<p>점점(vertex) : 여러 특성을 가지는 객체, 노드</p>
<p>간선(edge) : 객체들의 연결 관계(link),방향성이 있거나 없거나</p>
<p>그래프 구현: 인접 행렬,인접 리스트</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 내부클래스 / 함수형 프로그래밍</title>
    <url>/2021/09/02/20210902-KDT-Worksheet2/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="자바의-다양한-기능"><a href="#자바의-다양한-기능" class="headerlink" title="자바의 다양한 기능"></a>자바의 다양한 기능</h1><h2 id="01-익명-내부클래스-중첩클래스"><a href="#01-익명-내부클래스-중첩클래스" class="headerlink" title="01. 익명 내부클래스(중첩클래스)"></a>01. 익명 내부클래스(중첩클래스)</h2><ul>
<li>클래스 내부에 선언한 클래스 </li>
<li>다른 외부클래스에서 사용할 일이 거의 없는경우 내부에 사용한다.</li>
<li>종류: 인스턴스 내부 클래스, 정적 내부 클래스, 지역 내부 클래스, 익명내부클래스</li>
</ul>
<h3 id="인스턴스-내부-클래스"><a href="#인스턴스-내부-클래스" class="headerlink" title="인스턴스 내부 클래스"></a>인스턴스 내부 클래스</h3><ul>
<li>인스턴스 변수와 선언위치나 생성방법이 유사하다.</li>
<li>내부적으로 사용할 클래스(Private 권장)</li>
<li>외부 클래스가 생성된 후 생성되니, Static 변수는 내부에 둘 수 없다. </li>
<li>private가 아닌 내부 클래스는 다른 외부 클래스에서 생성할 수 있다. </li>
</ul>
<h3 id="정적-내부-클래스"><a href="#정적-내부-클래스" class="headerlink" title="정적 내부 클래스"></a>정적 내부 클래스</h3><ul>
<li>외부 클래스 생성과 무관하게 사용(Static)</li>
<li>정적 변수, 정적 메서드 사용 가능</li>
<li>외부 인스턴스 변수를 쓸수가 없다. </li>
<li>내부 클래스의 내부 메서드는 내부 인스턴스 변수를 쓸 수 없다. </li>
</ul>
<h3 id="지역-내부-클래스"><a href="#지역-내부-클래스" class="headerlink" title="지역 내부 클래스"></a>지역 내부 클래스</h3><ul>
<li>내부에서 정의하여 사용</li>
<li>메서드 호출이 끝나면 지역변수 유효 만료</li>
<li>메서드 호출 이후에도 사용해야하는 경우를 대비해 지역 내부 클래스 안의 메서드의 변수는 final선언<ul>
<li>내부클래스 안에서 바깥 변수를 사용하는경우 변수가 상수화되어 final 로 컴파일되어 Stack메모리에 로드되므로 내부클래스 안에서 변경할 수 없다. </li>
</ul>
</li>
</ul>
<h3 id="익명-내부-클래스"><a href="#익명-내부-클래스" class="headerlink" title="익명 내부 클래스"></a>익명 내부 클래스</h3><ul>
<li>내부에서만 쓰는 클래스의 경우 이름을 쓸 일이 없으므로 class이름을 싹 지워버리고 return 값도 앞으로 가져와놓는다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class A implements B &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure>

<p>↓</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> B () &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="02-함수형-프로그래밍"><a href="#02-함수형-프로그래밍" class="headerlink" title="02. 함수형 프로그래밍"></a>02. 함수형 프로그래밍</h2><ul>
<li>함수형 프로그래밍 방식 = 람다식</li>
<li>함수의 구현과 호출만으로 프로그래밍 수행</li>
<li>매개변수만 사용하여 순수함수를 구현하고 호출함으로써 외부 자료에 부수적인 영향을 주지 않도록 구현하는 방식으로 함수 외부에 있는 변수를 사용하지 않아 함수가 수행되더라도 외부에 영향이 없다. </li>
<li>외부에 영향을 주지 않아 여러 자료가 동시에 수행되는 병렬처리가 가능하다. </li>
<li>함수 기능이 자료로부터 독립적</li>
<li>동일한 자료에 대해 동일한 결과 </li>
<li>다양한 자료에 대해 같은 기능 수행</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>↓</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line">(x, y) -&gt; x+y;</span><br></pre></td></tr></table></figure>

<ul>
<li>피해야할경우 : 간결하게 한다고 했는데 오히려 가독성이 떨어지는경우</li>
</ul>
<h3 id="함수형-인터페이스"><a href="#함수형-인터페이스" class="headerlink" title="함수형 인터페이스"></a>함수형 인터페이스</h3><ul>
<li><p>람다식을 선언하기위한 인터페이스</p>
</li>
<li><p>익명 함수와 매개변수 만으로 구현되므로 인터페이스는 하나의 메서드만 선언</p>
</li>
<li><p>@FunctionalInterface 애노테이션(annotation)</p>
<p>함수형 인터페이스라는 의미이며, 내부에 여러개의 메서드를 선언하면 에러 발생</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyNumber</span>  </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">	<span class="comment">//int add(int x, int y); 하나 지워야됌</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>구현</p>
<ul>
<li><p>```java<br>public class TestMyNumber {</p>
<pre><code>public static void main(String[] args) &#123;
    MyNumber max = (x, y)-&gt;(x&gt;= y)? x:y; // 람다식을 인터페이스 자료형 max 변수에 대입
    System.out.println(max.getMax(10, 20));// 인터페이스 자료형 변수로 함수 호출
&#125;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 객체 지향 프로그래밍 vs 람다식</span><br><span class="line"></span><br><span class="line">- 객체지향을 사용하는경우</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class ObjectOriented &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = &quot;Hello&quot;;</span><br><span class="line">        String s2 = &quot;World&quot;;</span><br><span class="line">        StringConCatImpl concat1 = new StringConCatImpl();</span><br><span class="line">        concat1.makeStringObject(s1, s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface StringConcatObject &#123;</span><br><span class="line">    public void makeStringObject(String s1, String s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StringConCatImpl implements StringConcatObject &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void makeStringObject(String s1, String s2) &#123;</span><br><span class="line">        System.out.println(s1+&quot;, &quot;+s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>람다식을 사용하는 경우</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lamdaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        StringConcat concat2 = (s, v)-&gt; System.out.println(s+<span class="string">&quot;, &quot;</span>+v);</span><br><span class="line">        concat2.makeString(s1, s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StringConcat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String s1, String s2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>클래스를 만들 필요 없이 </li>
<li>클래스 객체를 선언, 초기화 할 필요 없이</li>
<li>인터페이스를 앞에 붙이고 바로 수식을 직접 나타낸다. </li>
</ul>
</li>
<li><p>인터페이스형 변수에 람다식 대입하기</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PrintString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showString</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintString lambdaStr = s-&gt;System.out.println(s);</span><br><span class="line">lambdaStr.showString(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>위에 사용된 PrintString 형 인터페이스 lambdaStr를 아래 매개변수로 전달</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">showMyString(lambdaStr);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMyString</span><span class="params">(PrintString p)</span> </span>&#123;</span><br><span class="line">    p.showString(<span class="string">&quot;hello lambda_2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>반환값으로 사용하기</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrintString <span class="title">returnString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;System.out.println(s+<span class="string">&quot;world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">PrintString reStr = returnString();</span><br><span class="line">reStr.showString(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>※ 인터페이스 개념을 잘 생각하면서 볼것</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 컬렉션 프레임워크</title>
    <url>/2021/09/02/20210902-KDT-Worksheet/</url>
    <content><![CDATA[<p>제너릭 메서드 활용</p>
<ul>
<li>두 점을 기준으로 사각형을 만들 때 너비를 구하는 메서드</li>
<li>두 점은 정수인 경우도 있고, 실수인 경우도 있으므로 제너릭 타입을 사용하여 구현한다.</li>
</ul>
<figure class="highlight java"><figcaption><span>: Point.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodRec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main에서 그냥 쓰기위해서 static</span></span><br><span class="line">    <span class="comment">//&lt;T, V&gt;는 멀티타입 제너릭 메서드라고 한다. 써야하는 매개변수가 두개라는뜻</span></span><br><span class="line">    <span class="comment">//반환형은 double</span></span><br><span class="line">    <span class="comment">//메서드 이름은 makeRec</span></span><br><span class="line">    <span class="comment">//매개변수는 Point&lt;T, V&gt; 클래스 객체 p1과 p2이다.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, V&gt; <span class="function"><span class="keyword">double</span> <span class="title">makeRec</span><span class="params">(Point&lt;T,V&gt; p1, Point&lt;T, V&gt; p2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//p1을 Object 영역에서 Number로 다운캐스팅 한뒤, getX()로 구한 x값을 doubleValue로 Double로 만든다.</span></span><br><span class="line">        <span class="keyword">double</span> left = ((Number)p1.getX()).doubleValue();</span><br><span class="line">        <span class="keyword">double</span> right = ((Number)p2.getX()).doubleValue();</span><br><span class="line">        <span class="keyword">double</span> top = ((Number)p1.getY()).doubleValue();</span><br><span class="line">        <span class="keyword">double</span> bottom = ((Number)p2.getY()).doubleValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> width = right-left;</span><br><span class="line">        <span class="keyword">double</span> height = bottom-top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> width*height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Point 정수값과 실수값 2개를 받는 p1의 좌표를 새롭게 지정한다. new Point뒤의 &lt;&gt;안은 생략 가능하다.(x,y 둘다 0으로 세팅)</span></span><br><span class="line">        Point&lt;Integer, Double&gt; p1 = <span class="keyword">new</span> Point&lt;Integer, Double&gt;(<span class="number">0</span>, <span class="number">0.0</span>);</span><br><span class="line">        <span class="comment">//p2의 값은 x10, y10으로 세팅한다. 이렇게 2개의 x값과, 2개의 y값이 정해졌다.</span></span><br><span class="line">        Point&lt;Integer, Double&gt; p2 = <span class="keyword">new</span> Point&lt;&gt;(<span class="number">10</span>, <span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//실수값인 rect 사각형 넓이는 클래스 안의 static이므로 클래스명 찍고 쓴다.</span></span><br><span class="line">        <span class="comment">//&lt;Integer, Double&gt;을 받는 메서드 makeRec에다가 p1값과 p2값을 넣는다.</span></span><br><span class="line">        <span class="keyword">double</span> rect = GenericMethodRec.&lt;Integer, Double&gt;makeRec(p1, p2);</span><br><span class="line">        System.out.println(rect);</span><br><span class="line">        <span class="comment">// ArrayList&lt;E&gt; array = new ArrayList&lt;&gt;(); 과 같은 형태이다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="컬렉션-프레임워크"><a href="#컬렉션-프레임워크" class="headerlink" title="컬렉션 프레임워크"></a>컬렉션 프레임워크</h2><ul>
<li>프로그램 구현에 필요한 자료구조(Data Structure)를 구현해 놓은 JDK 라이브러리</li>
<li>java.util 패키지에 구현되어 있음</li>
</ul>
<p><img src="/img/image-20210902153238659.png" alt="image-20210902153238659"></p>
<h2 id="Collection-인터페이스"><a href="#Collection-인터페이스" class="headerlink" title="Collection 인터페이스"></a>Collection 인터페이스</h2><ul>
<li>하나의 객체를 관리하기 위한 메서드가 선언된 인터페이스</li>
<li>하위에 List와 Set 인터페이스가 있음</li>
</ul>
<h3 id="List-인터페이스"><a href="#List-인터페이스" class="headerlink" title="List 인터페이스"></a>List 인터페이스</h3><ul>
<li>객체를 순서에 따라 저장하고 관리하는데 필요한 메서드가 선언된 인터페이스</li>
<li>자료구조 리스트 (배열, 연결리스트)의 구현을 위한 인터페이스</li>
<li>중복을 허용함</li>
<li>ArrayList, Vector, LinkedList, Stack, Queue 등…</li>
<li>index가 있어 특정 자료를 가져오기 좋다.</li>
</ul>
<h3 id="Set-인터페이스"><a href="#Set-인터페이스" class="headerlink" title="Set 인터페이스"></a>Set 인터페이스</h3><ul>
<li>순서와 관계없이 중복을 허용하지 않고 유일한 값을 관리하는데 필요한 메서드가 선언됨</li>
<li>저장된 순서와 출력되는 순서는 다를 수 있음</li>
<li>HashSet, TreeSet등…</li>
<li>index 없으므로 iterator 활용해야한다.</li>
</ul>
<h2 id="Map-인터페이스"><a href="#Map-인터페이스" class="headerlink" title="Map 인터페이스"></a>Map 인터페이스</h2><ul>
<li>쌍(pair)로 이루어진 객체를 관리하는데 사용하는 메서드들이 선언된 인터페이스</li>
<li>객체는 key-value의 쌍으로 이루어짐</li>
<li>key는 중복을 허용하지 않음</li>
<li>HashTable, HashMap, Properties, TreeMap 등이 Map 인터페이스를 구현 함</li>
</ul>
<hr>
<h2 id="하나씩-순회하는-Iterator"><a href="#하나씩-순회하는-Iterator" class="headerlink" title="하나씩 순회하는 Iterator"></a>하나씩 순회하는 Iterator</h2><ul>
<li><p>저장된 요소들을 하나씩 순회한다.</p>
</li>
<li><p>Set인터페이스가 사용한다.</p>
</li>
<li><p>순서가 있는 List 인터페이스는 iterator를 사용하지 않고 for문으로 get(i)메서드를 활용</p>
</li>
<li><p>안에있는 자료를 하나씩 꺼내오고 모두 다 꺼내오면 종료</p>
</li>
</ul>
<h5 id="boolean-hasNext"><a href="#boolean-hasNext" class="headerlink" title="boolean hasNext()"></a>boolean hasNext()</h5><ul>
<li>이후에 요소가 더 있는지 체크하는 메서드, 요소가 있으면 true반환</li>
<li>E next(): 다음 요소를 반환</li>
</ul>
<figure class="highlight java"><figcaption><span>: IteratorTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Member&gt; memberArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> number;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">            Member member = <span class="keyword">new</span> Member(i, <span class="string">&quot;아무이름&quot;</span>+i+<span class="string">&quot;호&quot;</span>);</span><br><span class="line">            memberArrayList.add(member);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Member&gt; itermember = memberArrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(itermember.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//itermember.next() 가 cursor를 다음으로 옮겨주는 역할을 한다. </span></span><br><span class="line">            System.out.println(itermember.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> memberId;        <span class="comment">//회원 아이디</span></span><br><span class="line">    <span class="keyword">private</span> String memberName;   <span class="comment">//회원 이름</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(<span class="keyword">int</span> memberId, String memberName)</span></span>&#123; <span class="comment">//생성자</span></span><br><span class="line">        <span class="keyword">this</span>.memberId = memberId;</span><br><span class="line">        <span class="keyword">this</span>.memberName = memberName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="중복은-거르는-HashSet-클래스"><a href="#중복은-거르는-HashSet-클래스" class="headerlink" title="중복은 거르는 HashSet 클래스"></a>중복은 거르는 HashSet 클래스</h3><ul>
<li>중복 여부를 체크하기 위해 인스턴스의 들어갈놈가 받는놈의 동일성 확인 필요</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; hashSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> String(<span class="string">&quot;김유신&quot;</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> String(<span class="string">&quot;이순신&quot;</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> String(<span class="string">&quot;홍연의&quot;</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> String(<span class="string">&quot;강감찬&quot;</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> String(<span class="string">&quot;강감찬&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(hashSet);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[김유신, 홍연의, 강감찬, 이순신]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>중복된 값은 나오지 않는다.</p>
</li>
<li><p>int의 경우 중복값을 거르는데 String은 어떻게? 해야하지?</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//MemberHashSet 클래스의 memberHashSet을 생성한다.</span></span><br><span class="line">        <span class="comment">//Member클래스형의 Hashset인 hashSet이 만들어진다.</span></span><br><span class="line">        MemberHashSet memberHashSet = <span class="keyword">new</span> MemberHashSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Member를 만든다.</span></span><br><span class="line">        Member memberLee = <span class="keyword">new</span> Member(<span class="number">1001</span>, <span class="string">&quot;이순신&quot;</span>);</span><br><span class="line">        Member memberKim = <span class="keyword">new</span> Member(<span class="number">1002</span>, <span class="string">&quot;김유신&quot;</span>);</span><br><span class="line">        Member memberKang = <span class="keyword">new</span> Member(<span class="number">1003</span>, <span class="string">&quot;강감찬&quot;</span>);</span><br><span class="line">        Member memberKang2 = <span class="keyword">new</span> Member(<span class="number">1004</span>, <span class="string">&quot;강감찬&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        memberHashSet.addMember(memberLee);</span><br><span class="line">        memberHashSet.addMember(memberKim);</span><br><span class="line">        memberHashSet.addMember(memberKang);</span><br><span class="line">        memberHashSet.addMember(memberKang2);</span><br><span class="line">        memberHashSet.showAllMember();</span><br><span class="line"></span><br><span class="line">        Member memberHong = <span class="keyword">new</span> Member(<span class="number">1003</span>, <span class="string">&quot;홍길동&quot;</span>);  <span class="comment">//1003 아이디 중복</span></span><br><span class="line">        memberHashSet.addMember(memberHong);</span><br><span class="line">        memberHashSet.showAllMember();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberHashSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Member&gt; hashSet;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberHashSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hashSet = <span class="keyword">new</span> HashSet&lt;Member&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">        hashSet.add(member);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberId)</span></span>&#123;</span><br><span class="line">        Iterator&lt;Member&gt; ir = hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(ir.hasNext())&#123;</span><br><span class="line">            Member member = ir.next();</span><br><span class="line">            <span class="keyword">int</span> tempId = member.getMemberId();</span><br><span class="line">            <span class="keyword">if</span>( tempId == memberId)&#123;</span><br><span class="line">                hashSet.remove(member);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(memberId + <span class="string">&quot;가 존재하지 않습니다&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAllMember</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Member member : hashSet)&#123;</span><br><span class="line">            System.out.println(member);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> memberId;        <span class="comment">//회원 아이디</span></span><br><span class="line">    <span class="keyword">private</span> String memberName;   <span class="comment">//회원 이름</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(<span class="keyword">int</span> memberId, String memberName)</span> </span>&#123; <span class="comment">//생성자</span></span><br><span class="line">        <span class="keyword">this</span>.memberId = memberId;</span><br><span class="line">        <span class="keyword">this</span>.memberName = memberName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMemberId</span><span class="params">()</span> </span>&#123; <span class="comment">//memberID 접근이 private이므로 걍 게터 써준다.</span></span><br><span class="line">        <span class="keyword">return</span> memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;   <span class="comment">//toString 메소드 오버로딩</span></span><br><span class="line">        <span class="keyword">return</span> memberName + <span class="string">&quot; 회원님의 아이디는 &quot;</span> + memberId + <span class="string">&quot;입니다&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Member) &#123;</span><br><span class="line">            Member member = (Member) obj;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.memberId == member.memberId || <span class="keyword">this</span>.memberName.equals(member.memberName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Set중-정렬을-위해-사용되는-TreeSet"><a href="#Set중-정렬을-위해-사용되는-TreeSet" class="headerlink" title="Set중 정렬을 위해 사용되는 TreeSet"></a>Set중 정렬을 위해 사용되는 TreeSet</h3><ul>
<li>객체 정렬에 사용</li>
<li>중복을 허용하지 않으면서 오름차 내림차 정렬가능</li>
<li>내부적으로 이진검색트리로 구현</li>
<li>이진검색트리에 저장하려면 각 객체를 비교해야함</li>
<li>비교되상이 되는 객체에 Comparable or Comparator인터페이스를 구현해야 TreeSet 추가됨</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">		treeSet.add(<span class="string">&quot;홍길동&quot;</span>);</span><br><span class="line">		treeSet.add(<span class="string">&quot;강감찬&quot;</span>);</span><br><span class="line">		treeSet.add(<span class="string">&quot;이순신&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(String str : treeSet) &#123;</span><br><span class="line">			System.out.println(str);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">강감찬</span><br><span class="line">이순신</span><br><span class="line">홍길동</span><br></pre></td></tr></table></figure>



<h3 id="짝을-이루는-map"><a href="#짝을-이루는-map" class="headerlink" title="짝을 이루는 map"></a>짝을 이루는 map</h3><figure class="highlight java"><figcaption><span>: MemberHashmapTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberHashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MemberHashMap memberHashMap = <span class="keyword">new</span> MemberHashMap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Member memberLee = <span class="keyword">new</span> Member(<span class="number">1001</span>, <span class="string">&quot;이순신&quot;</span>);</span><br><span class="line">        Member memberKim = <span class="keyword">new</span> Member(<span class="number">1002</span>, <span class="string">&quot;김유신&quot;</span>);</span><br><span class="line">        Member memberKang = <span class="keyword">new</span> Member(<span class="number">1003</span>, <span class="string">&quot;강감찬&quot;</span>);</span><br><span class="line">        Member memberHong = <span class="keyword">new</span> Member(<span class="number">1004</span>, <span class="string">&quot;홍길동&quot;</span>);</span><br><span class="line"></span><br><span class="line">        memberHashMap.addMember(memberLee);</span><br><span class="line">        memberHashMap.addMember(memberKim);</span><br><span class="line">        memberHashMap.addMember(memberKang);</span><br><span class="line">        memberHashMap.addMember(memberHong);</span><br><span class="line"></span><br><span class="line">        memberHashMap.showAllMember();</span><br><span class="line"></span><br><span class="line">        memberHashMap.removeMember(<span class="number">1004</span>);</span><br><span class="line">        memberHashMap.showAllMember();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: MemberHashMap.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberHashMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">//hashMap 선언</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Member&gt; hashMap;</span><br><span class="line">	<span class="comment">//생성자. hashMap 에 Integer와 Member클래스를 자료형으로 받는 HashMap을 만든다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberHashMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        hashMap = <span class="keyword">new</span> HashMap&lt;Integer, Member&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//Member클래스를 추가할경우 hashMap에 Member의 Id와 member 객체이름을 넣는다. </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        hashMap.put(member.getMemberId(), member);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//memberId가지고 삭제를 할 경우 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberId)</span></span>&#123;</span><br><span class="line">		<span class="comment">//hashMap에 memberId가 있는지 확인해서 있으면</span></span><br><span class="line">        <span class="keyword">if</span>(hashMap.containsKey(memberId))&#123;</span><br><span class="line">            <span class="comment">//hashMap에서 memberId를 지운다.</span></span><br><span class="line">            hashMap.remove(memberId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(memberId + <span class="string">&quot;가 존재하지 않습니다&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAllMember</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//정수 자료형의 자료형인 Iterator를 만드는데 hashMap의 Key로 구성(iterator)한다.</span></span><br><span class="line">        Iterator&lt;Integer&gt; ir = hashMap.keySet().iterator();</span><br><span class="line">        <span class="comment">//Iterator ir이 다음 자료값이 있는동안</span></span><br><span class="line">        <span class="keyword">while</span> (ir.hasNext())&#123;</span><br><span class="line">            <span class="comment">//key에다가 ir자료를 ㄴ</span></span><br><span class="line">            <span class="keyword">int</span> key = ir.next();</span><br><span class="line">            <span class="comment">//member 객체에 hashMap에서 다음순서 ir를 넣고 </span></span><br><span class="line">            Member member = hashMap.get(key);</span><br><span class="line">            System.out.println(member);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Member.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Member</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> memberId;        <span class="comment">//회원 아이디</span></span><br><span class="line">    <span class="keyword">private</span> String memberName;   <span class="comment">//회원 이름</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(<span class="keyword">int</span> memberId, String memberName)</span> </span>&#123; <span class="comment">//생성자</span></span><br><span class="line">        <span class="keyword">this</span>.memberId = memberId;</span><br><span class="line">        <span class="keyword">this</span>.memberName = memberName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMemberId</span><span class="params">()</span> </span>&#123; <span class="comment">//memberID 접근이 private이므로 걍 게터 써준다.</span></span><br><span class="line">        <span class="keyword">return</span> memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;   <span class="comment">//toString 메소드 오버로딩</span></span><br><span class="line">        <span class="keyword">return</span> memberName + <span class="string">&quot; 회원님의 아이디는 &quot;</span> + memberId + <span class="string">&quot;입니다&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Member) &#123;</span><br><span class="line">            Member member = (Member) obj;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.memberId == member.memberId || <span class="keyword">this</span>.memberName.equals(member.memberName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return (this.memberId - member.memberId);   //오름차순</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.memberId - member.memberId) *  (-<span class="number">1</span>);   <span class="comment">//내림 차순</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







































]]></content>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 스트림</title>
    <url>/2021/09/06/20210906-KDT-WORKSHEET/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="스트림"><a href="#스트림" class="headerlink" title="스트림"></a>스트림</h2><ul>
<li><strong>배열과 컬렉션을 대상</strong> 限, 자료의 대상과 관계없이 동일한 연산을 수행한다.</li>
<li>한번 생성하고 사용한 스트림은 재사용 불가(연산 수행시 스트림 소모)</li>
<li>연산 결과는 새로운 메모리 공간에 저장(기존자료 변경하지 않음)</li>
<li>구분 : 최종연산이 호출되어야 중간연산 수행 및 결과 도출<ul>
<li>중간연산 (지연연산)<ul>
<li>여러 개의 연산 적용 가능</li>
<li>연산중에 결과를 알 수 없다. (지연연산)</li>
</ul>
</li>
<li>최종연산<ul>
<li>마지막 한 번만 적용</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="스트림-생성-및-사용"><a href="#스트림-생성-및-사용" class="headerlink" title="스트림 생성 및 사용"></a>스트림 생성 및 사용</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : arr )  &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">==</span><br><span class="line">Arrays.stream(arr).forEach(n-&gt;System.out.println(n))</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sumVal = Arrays.stream(arr).sum();</span><br><span class="line">        <span class="keyword">long</span> count = Arrays.stream(arr).count();</span><br><span class="line"></span><br><span class="line">        System.out.println(sumVal);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>마치 선물세트같은 느낌이다.</li>
</ul>
<p>예: IntStream 등등</p>
<h4 id="중간연산과-최종연산"><a href="#중간연산과-최종연산" class="headerlink" title="중간연산과 최종연산"></a>중간연산과 최종연산</h4><ul>
<li>중간연산: filter(), map(), sorted() 등<ul>
<li>조건에 맞는 요소를 추출(filter)하거나 반환(map)한다.</li>
</ul>
</li>
<li>**예: **</li>
<li><strong>문자열 리스트에서 문자열의 길이가 5 이상인 요소만 출력하기</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sList.stream().filter(s-&gt;s.length() &gt;= <span class="number">5</span>).forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>filter()는 중간연산이고, forEach()는 최종연산이다</li>
</ul>
</li>
<li><strong>고객 클래스 배열에서 고객 이름만 가져오기</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">customerList.stream().map(c-&gt;c.getName()).forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>map()중간연산, forEach()최종연산</li>
</ul>
</li>
<li>중간연산과 최종연산에 대한 구현은 람다식 활용</li>
<li>최종연산: forEach(), count(), sum()등</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; sList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        sList.add(<span class="string">&quot;Tomas&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;Edward&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;Jack&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>sList를 정렬하고 출력하기</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sList.stream().sorted().forEach(s-&gt; System.out.print(s + <span class="string">&quot;\t&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>sList의 단어 글자 수 출력</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sList.stream().map(s-&gt;s.length()).forEach(n-&gt; System.out.print(n + <span class="string">&quot;\t&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>sList 요소 중 글자 수가 5개 이상인것만 출력</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sList.stream().filter(s-&gt;s.length() &gt;=<span class="number">5</span> ).forEach(s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>





<h2 id="reduce-연산"><a href="#reduce-연산" class="headerlink" title="reduce()연산"></a>reduce()연산</h2><ul>
<li>정의된 연산이 아닌 프로그래머가 직접 구현한 연산 적용</li>
<li> 구조</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">reduce</span><span class="params">(T identify, BinaryOperator&lt;T&gt; accumulator)</span></span>;</span><br><span class="line">Arrays.stream(arr).reduce(<span class="number">0</span>, (a,b) -&gt; a+b );</span><br><span class="line">arr로 stream 호출하여 reduce 연산을 적용하는데, 자료를 다 소모 할 때까지a,b 인자를 받으면 더한값을 초기값 <span class="number">0</span>에 대입</span><br></pre></td></tr></table></figure>



<h3 id="스트림을-활용한-패키지-여행비용-계산하기"><a href="#스트림을-활용한-패키지-여행비용-계산하기" class="headerlink" title="스트림을 활용한 패키지 여행비용 계산하기"></a>스트림을 활용한 패키지 여행비용 계산하기</h3><p>여행사에 패키지 상품이 있습니다. </p>
<ul>
<li><p>여행비용 </p>
<ul>
<li>15세 이상 : 100만원</li>
<li>15세 미만 : 50만원</li>
</ul>
</li>
<li><p>고객 세 명이 패키지 여행을 떠난다고 했을 때 비용 계산과 고객 명단 검색 등에대한 연산을 스트림 활용 구현</p>
</li>
<li><p>고객 클래스를 만들고 ArrayList로 고객을 관리한다.</p>
</li>
<li><p>고객정보</p>
<ul>
<li>customerLee<ul>
<li>이름: 이순신</li>
<li>나이: 40</li>
<li>비용: 100</li>
</ul>
</li>
<li>customerKim<ul>
<li>이름: 김유신</li>
<li>나이: 20</li>
<li>비용: 50</li>
</ul>
</li>
<li>customerHong<ul>
<li>이름: 홍길동</li>
<li>나이: 13</li>
<li>비용: 50</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TourCustomerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TourCustomer customerLee = <span class="keyword">new</span> TourCustomer(<span class="string">&quot;이순신&quot;</span>, <span class="number">40</span>, <span class="number">100</span>);</span><br><span class="line">        TourCustomer customerKim = <span class="keyword">new</span> TourCustomer(<span class="string">&quot;김유신&quot;</span>, <span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">        TourCustomer customerHong = <span class="keyword">new</span> TourCustomer(<span class="string">&quot;홍길동&quot;</span>, <span class="number">13</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;TourCustomer&gt; customerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        customerList.add(customerLee);</span><br><span class="line">        customerList.add(customerKim);</span><br><span class="line">        customerList.add(customerHong);</span><br><span class="line"></span><br><span class="line">        customerList.stream().forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;고객 명단&quot;</span>);</span><br><span class="line">        customerList.stream().map(s-&gt;s.getName()).forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;여행 비용&quot;</span>);</span><br><span class="line">        System.out.println(customerList.stream().mapToInt(s-&gt;s.getCost()).sum());</span><br><span class="line">        System.out.println(<span class="string">&quot;20세 이상 고객 명단&quot;</span>);</span><br><span class="line">        customerList.stream().filter(c-&gt;c.getAge() &gt;= <span class="number">20</span>).map(c-&gt;c.getName()).sorted().forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TourCustomer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cost;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TourCustomer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TourCustomer</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.cost = cost;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cost;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCost</span><span class="params">(<span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cost = cost;    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TourCustomer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, cost=&quot;</span> + cost +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="예외처리"><a href="#예외처리" class="headerlink" title="예외처리"></a>예외처리</h2><h4 id="오류"><a href="#오류" class="headerlink" title="오류"></a>오류</h4><ul>
<li><p>컴파일 오류(compile)</p>
<p>프로그램 코드 작성 문법적 오류</p>
<p>최근 개발 환경에서 대부분 detection 가능</p>
</li>
<li><p>실행오류 (runtime)</p>
<p>프로그램 실행 중 bug발생으로 인한 프로그램 중지 </p>
<p>이 경우 시스템 장애 유발 가능</p>
</li>
<li><p>자바는 안정성이 중요한 언어로 대부분 프로그램에서 발생하는 오류에 대해 문법적으로 예외처리 필요</p>
<ul>
<li>Error, Exception =&gt; Throwable</li>
</ul>
</li>
<li><p>오류가 나서 비정상 종료가 되느냐, 예외처리가 되어 계속 돌아가느냐의 차이</p>
</li>
<li><p>예외를 발생시키는 코드를 사용할 때 당장 예외처리를 하고싶지 않다면 메서드 선언부에 throws선언한다.</p>
</li>
</ul>
<h4 id="try-catch문"><a href="#try-catch문" class="headerlink" title="try-catch문"></a>try-catch문</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    예외가 발생할 수 있는 코드 부분</span><br><span class="line">&#125;<span class="keyword">catch</span>(처리할 예외 타입 e) &#123;</span><br><span class="line">    <span class="keyword">try</span>블록 안에서 예외가 발생했을 때 예외를 처리하는 부분;</span><br><span class="line">    ex) 로그를 남긴다던지 등등;</span><br><span class="line">    System.out.println(e.getMessage()); <span class="comment">// 오류의 메세지 출력</span></span><br><span class="line">    System.out.println(e.toString());<span class="comment">// 오류 종류와 메세지 출력</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="try-catchfinally문"><a href="#try-catchfinally문" class="headerlink" title="try-catchfinally문"></a>try-catchfinally문</h4><ul>
<li>finally 블럭에서 파일이나 네트웍을 닫거나 리소스 해제 구현</li>
<li>try블럭이 수행되면 finally블럭은 항상 수행 된다.</li>
<li>예외 블럭이 여러개라면 finally 블럭에서 해제하도록 구현한다.</li>
</ul>
<h4 id="try-with-resources문"><a href="#try-with-resources문" class="headerlink" title="try-with-resources문"></a>try-with-resources문</h4><ul>
<li>리소스를 try() 내부에서 선언하고, close()하지 않아도 자동 해제</li>
<li>해당 리소스 클래스가 Autocloseable인터페이스를 구현해야한다.</li>
<li>자바 9부터 리소스는 try()외부에서 선언하고 변수만 try(obj)와 같이 사용 가능하다.</li>
</ul>
<h4 id="여러개-예외-발생하는-경우"><a href="#여러개-예외-발생하는-경우" class="headerlink" title="여러개 예외 발생하는 경우"></a>여러개 예외 발생하는 경우</h4><ul>
<li>try-catch 1개만 쓰고, catch ()안에 |로 분류하여 여러개 넣기</li>
<li>catch를 여러개 쓰기</li>
<li>Exception 블록은 맨 뒤에 위치</li>
</ul>
<h3 id="패스워드에-대한-예외-처리-하기"><a href="#패스워드에-대한-예외-처리-하기" class="headerlink" title="패스워드에 대한 예외 처리 하기"></a>패스워드에 대한 예외 처리 하기</h3><p>패스워드 입력 시 다음과 같은 오류처리를 해보자</p>
<ul>
<li>비밀번호는 null일 수 없다.</li>
<li>비밀번호 길이는 5 이상이다.</li>
<li>비밀번호는 문자로만 이루어져서는 안되고, 하나이상의 숫자나 특수문자를 포함하여야 한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> <span class="keyword">throws</span> PasswordException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordException(<span class="string">&quot;비밀번호는 null이 될 수 없습니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(password.length() &lt;<span class="number">5</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordException(<span class="string">&quot;비밀번호를 5글자 이상으로 설정해주세요&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(password.matches(<span class="string">&quot;[a-zA-z]+&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordException(<span class="string">&quot;비밀번호에 숫자 또는 특수문자를 포함해주세요&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            PasswordTest test01 = <span class="keyword">new</span> PasswordTest();</span><br><span class="line">            System.out.println(<span class="string">&quot;설정할 비밀번호를 입력해주세요&quot;</span>);</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            String password = scanner.next();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                test01.setPassword(password);</span><br><span class="line">                System.out.println(<span class="string">&quot;비밀번호 정상 세팅&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PasswordException e) &#123;</span><br><span class="line">                System.out.println(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-&gt; 비밀번호를 세팅한다.</p>
<p>-&gt; 예외가 발생하면 비밀번호 세팅을 반복한다.</p>
<p>-&gt; 정상 세팅이 되면 종료한다.</p>
<h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><ul>
<li>시스템 운영 기록이며, 오류 발생시 기록을 남겨 디버깅 용이</li>
<li>어느정도까지 로그? 적으면 상황파악 곤란, 많으면 파일 I/O빈도 과다 백업 곤란 등</li>
</ul>
<h4 id="java-util-logging"><a href="#java-util-logging" class="headerlink" title="java.util.logging"></a>java.util.logging</h4><ul>
<li>로그 레벨: severe, warning, info, config, fine, finer, finest</li>
<li>오픈소스로 log4j 많이 사용</li>
</ul>
<h3 id="Logger-만들기"><a href="#Logger-만들기" class="headerlink" title="Logger 만들기"></a>Logger 만들기</h3><ul>
<li><p>시나리오</p>
<p>학생 정보 시스템에 로그 기록</p>
<ul>
<li>학생의 이름에 오류가 있는 경우 예외처리를 하고 예외상황 로그 남기기</li>
<li>학생의 이름이 null이거나 중간에 space가 3개 이상인 경우 오류 발생 </li>
</ul>
</li>
<li><p>구현하기</p>
<ul>
<li>Logger 인스턴스 생성</li>
<li>FileHandler 생성</li>
<li>FileHandler의 level 지정</li>
<li>Logger에 생성된 addHandler()메서드로 FileHandler 추가</li>
</ul>
</li>
</ul>
<figure class="highlight java"><figcaption><span>: MyLogger.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.FileHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogger</span> </span>&#123;</span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">&quot;mylogger&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyLogger instance = <span class="keyword">new</span> MyLogger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String infoLog = <span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String warningLog = <span class="string">&quot;warning.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String finestLog = <span class="string">&quot;fine.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileHandler infoLogFileHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler warningFileHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler finestFileHandler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            infoLogFileHandler = <span class="keyword">new</span> FileHandler(infoLog, <span class="keyword">true</span>);</span><br><span class="line">            warningFileHandler = <span class="keyword">new</span> FileHandler(warningLog, <span class="keyword">true</span>);</span><br><span class="line">            finestFileHandler = <span class="keyword">new</span> FileHandler(finestLog, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123; <span class="comment">//보안을 이유로 메서드를 수행할 수 없을 때</span></span><br><span class="line">            e.printStackTrace();<span class="comment">//에러 메세지의 발생 근원지를 찾아 단계별로 에러를 출력한다.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">//입출력과 관련된 예외</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//로그를 기록할 포멧을 정의한다.</span></span><br><span class="line">        <span class="comment">//SimpleFormatter()는 String.format(format, date, source, logger, level, message, thrown)으로 구성된다.</span></span><br><span class="line">        infoLogFileHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        warningFileHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        finestFileHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MyLog 클래스 logger에서 캐치할 이벤트를 설정한다. info 부터 기록하므로 info부터 캐치하게 설정한다.</span></span><br><span class="line">        logger.setLevel(Level.INFO);</span><br><span class="line">        <span class="comment">//infoLogFileHandler가 캐치할이벤트 = INFO 이하</span></span><br><span class="line">        infoLogFileHandler.setLevel(Level.INFO);</span><br><span class="line">        <span class="comment">//warningFileHandler가 캐치할이벤트 = WARNING 이하</span></span><br><span class="line">        warningFileHandler.setLevel(Level.WARNING);</span><br><span class="line">        <span class="comment">//fineFileHandler가 캐치할이벤트 = FINE 이하</span></span><br><span class="line">        finestFileHandler.setLevel(Level.FINEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//logger에 각각의 핸드러를 붙인다.</span></span><br><span class="line">        logger.addHandler(infoLogFileHandler);</span><br><span class="line">        logger.addHandler(warningFileHandler);</span><br><span class="line">        logger.addHandler(finestFileHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MyLogger를 호출하는 메서드</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyLogger <span class="title">getLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        logger.finest(msg);</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">        logger.config(msg);</span><br><span class="line">        logger.info(msg);</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">        logger.severe(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fine</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: LoggerTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyLogger myLogger = MyLogger.getLogger();</span><br><span class="line"></span><br><span class="line">        myLogger.log(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoggerTest를 실행하면 상위 폴더에 fine.txt, log.txt, warning.txt 가 생성된 후</p>
<p>각 레벨에 맞는 log가 기록된다. </p>
<p>콘솔에서는 설정에 따라 출력되는 값이 다를 수 있다. </p>
<h2 id="번외"><a href="#번외" class="headerlink" title="번외"></a>번외</h2><p> 랜덤 생성된 문자 char 형을 n개 단위로 m개 출력하기</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// List 활용</span></span><br><span class="line">List&lt;String[]&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j ++ ) &#123;</span><br><span class="line">    String[] charArray = <span class="keyword">new</span> String[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">char</span> tempchar = (<span class="keyword">char</span>) (<span class="keyword">int</span>) ((Math.random()*<span class="number">58</span>)+<span class="number">65</span>);</span><br><span class="line">        charArray[i] = String.valueOf(tempchar);</span><br><span class="line">    &#125;</span><br><span class="line">    arr.add(charArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;String[]&gt; iter = arr.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    String str = Arrays.deepToString(iter.next());</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2차 배열 활용</span></span><br><span class="line">String[][] array = <span class="keyword">new</span> String[<span class="number">10</span>][<span class="number">5</span>] ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> tempchar = (<span class="keyword">char</span>)(<span class="keyword">int</span>)((Math.random()*<span class="number">58</span>)+<span class="number">65</span>);</span><br><span class="line">        array[j][i] = String.valueOf(tempchar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;String[]&gt; iter = Arrays.stream(array).iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    String str = Arrays.deepToString(iter.next());</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>둘 다 iterator를 활용한다.</p>
<p>한번 이상 들어간 배열은 출력시 주소값만 출력하게되므로 </p>
<p>**deepToString()**을 사용하면 정상적으로 출력이 가능하다.</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA Spring 입문 1</title>
    <url>/2021/09/15/20210915-KDT-WORKSHEET/</url>
    <content><![CDATA[<p>기간: </p>
<p>9.13 월 Spring Boot 8H</p>
<p>9.14 화 컴퓨터공학 5H</p>
<p>9.15 수 컴퓨터공학 8H</p>
<span id="more"></span>

<h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><h4 id="개발환경-설치"><a href="#개발환경-설치" class="headerlink" title="개발환경 설치"></a>개발환경 설치</h4><ol>
<li>새 프로젝트 생성 시 Spring Initializr 선택한다. </li>
<li>버전 등 선택하고 (Java/Gradle/Jar) 선택한다. </li>
<li>Developer Tools에서 Lombok 선택하고 Web에서 Spring Web을 선택한다.</li>
</ol>
<h4 id="객체지향-4가지-특성"><a href="#객체지향-4가지-특성" class="headerlink" title="객체지향 4가지 특성"></a>객체지향 4가지 특성</h4><ol>
<li>캡슐화</li>
<li>상속</li>
<li>다형성</li>
<li>추상화</li>
</ol>
<h4 id="객체지향-설계-5원칙-SOLID"><a href="#객체지향-설계-5원칙-SOLID" class="headerlink" title="객체지향 설계 5원칙 SOLID"></a>객체지향 설계 5원칙 SOLID</h4><ol>
<li>SRP(Single Responsibility Principle) 단일 책임 원칙</li>
<li>OCP(Open Closed Principle) 개방 폐쇄 원칙</li>
<li>LSP(Liskov Substitution Principle) 리스코프 치환 원칙</li>
<li>ISP(Interface Segregation Principle) 인터페이스 분리 원칙</li>
<li>DIP(Dependency Inversion Principle) 의존 역전 원칙</li>
</ol>
<h4 id="POJO-JAVA"><a href="#POJO-JAVA" class="headerlink" title="POJO JAVA"></a>POJO JAVA</h4><h5 id="등장배경"><a href="#등장배경" class="headerlink" title="등장배경"></a>등장배경</h5><ol>
<li>자바로 특정 환경에서 로우레벨까지 직접 구현하면 구현하기도 어렵고 관리도 힘들었다.</li>
<li>그래서 미국 Sun Microsystems에서 Enterprise JavaBeans(EJB)라는 서버 어플리케이션 개발을 용이하게 해주는 서버 컴포넌트를 만들었다. </li>
<li>그랬더니 JAVA의 특징이니 객체지향적 프로그래밍 특성이 희미해졌고 프로그램이 복잡해졌다. </li>
<li>그래서 다시 POJO라는 간단한 방식의 오브젝트를 만들었다. </li>
</ol>
<p><strong>POJO = Plain Old Java Object</strong></p>
<p><strong>오래된 방식의 간단한 자바를 말하며 간단한 방식의 오브젝트</strong></p>
<ol>
<li>특징</li>
</ol>
<ul>
<li>특정 규약과 환경에에 종속되지 않는다.</li>
<li> 순수 JAVA로만 구성해야한다.</li>
</ul>
<ol start="2">
<li>POJO Framework</li>
</ol>
<ul>
<li>Spring, Hibernate: 객체지향적 설계, POJO 지향<ul>
<li>개발자가 서비스 로직에 집중하고 쉬운 개발을 하도록 지원</li>
</ul>
</li>
</ul>
<h2 id="디자인패턴"><a href="#디자인패턴" class="headerlink" title="디자인패턴"></a>디자인패턴</h2><h4 id="Goj-디자인-패턴"><a href="#Goj-디자인-패턴" class="headerlink" title="Goj 디자인 패턴"></a>Goj 디자인 패턴</h4><p>재사용에 유용한 설계를 디자인패턴으로 정리해둔 것으로 총 23개</p>
<ol>
<li><strong>싱글톤 패턴</strong><ul>
<li>객체가 유일한 1개만 존재해야할 때 사용</li>
</ul>
</li>
<li><strong>어댑터 패턴</strong><ul>
<li>110v를 220v로 변경해주듯</li>
<li>호환성이 없는 기존 클래스의 인터페이스를 변환하여 재사용할 때 사용</li>
<li>SOLID 중 OCP </li>
</ul>
</li>
<li><strong>프록시 패턴</strong><ul>
<li>Cache 기능으로 활용한다 ( 한번 한것은 기존 결과값 사용 )</li>
<li>SOLD 중 OCP 와 DIP</li>
</ul>
</li>
<li><strong>데코레이터 패턴</strong><ul>
<li>객체의 원래 값에서 데코레이션하여 다른 값을 갖도록 해준다.</li>
<li>등급별 가격 등</li>
<li>SOLID 중 OCP와 DIP</li>
</ul>
</li>
<li><strong>옵저버 패턴</strong><ul>
<li>변화가 일어났을 때 지정한 클래스에 통보해주는 패턴(Event Listener)</li>
</ul>
</li>
<li><strong>파사드 패턴</strong><ul>
<li>예) 연결-읽기-쓰기-쓰기닫기-읽기닫기-연결닫기 순서가 바뀔 수 있는 기능에 대해</li>
<li>별도로 빼서 객체화하여 간단하게 사용한다. </li>
</ul>
</li>
<li><strong>전략 패턴</strong><ul>
<li>유사한 행위를 캡슐화하여 </li>
<li>얼음화살을 집어넣으면 얼음공격, 불화살을 집어넣으면 불공격 (전략을 변경한다.)</li>
<li>SOLID 중 OCP와 DIP </li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA SPRING</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA I/O스트림</title>
    <url>/2021/09/08/20210908-KDT-WORKSHEET/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="자바-입출력을-위한-I-O-스트림"><a href="#자바-입출력을-위한-I-O-스트림" class="headerlink" title="자바 입출력을 위한 I/O 스트림"></a>자바 입출력을 위한 I/O 스트림</h2><p>자바 프로그램에서 자료에 쓰는것 : 출력 스트림</p>
<p>자바 프로그램으로 읽어오는것 : 입력 스트림</p>
<h4 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h4><p>입력스트림 : FileInputStream, FileReader, BufferedInputStream, BufferedReader 등</p>
<p>출력스트림 : FileOutputStream, FileWriter, BufferedOutputStream, BufferedWriter 등</p>
<hr>
<p>바이트스트림 : FileInputStream, FileOutputStream, BufferedInputStream, BufferedOutputStream 등</p>
<p>문자스트림 : FileReader, FileWriter, BufferedReader, BufferedWriter 등</p>
<hr>
<p>기반스트림 : FileInputStream, FileOutputStream, FileReader, FileWriter 등</p>
<ul>
<li>대상에 직접 자료를 읽고 쓴다.</li>
</ul>
<p>보조스트림 : InputStreamReader, OutputStreamWriter, BufferedInputStream, BufferedOutputStream 등</p>
<ul>
<li>직접 읽고 쓰지는 않고 추가적인 기능을 더해준다.</li>
</ul>
<h3 id="읽기"><a href="#읽기" class="headerlink" title="읽기"></a>읽기</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest3</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input2.txt&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//for 문으로 차례대로 읽을 경우</span></span><br><span class="line"><span class="comment">//            while ( (i = fis.read(bs)) != -1 ) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                for (int j=0 ; j &lt; i ; j++ ) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print((char) bs[j]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot; : &quot; + i + &quot;바이트 읽음&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//fis를 bs에 맞게 읽는데, 1의 offset을 주고 그뒤로 9개 넣은것을 i로 하고 맨마지막까지 읽는다. </span></span><br><span class="line">            <span class="keyword">while</span> ( (i = fis.read(bs, <span class="number">1</span>, <span class="number">9</span>)) != -<span class="number">1</span> ) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span> ; j &lt; i ; j++ ) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>) bs[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot; : &quot;</span> + i + <span class="string">&quot;바이트 읽음&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="OutputStream-예제-JAVA-9-이상"><a href="#OutputStream-예제-JAVA-9-이상" class="headerlink" title="OutputStream 예제(JAVA 9 이상)"></a>OutputStream 예제(JAVA 9 이상)</h3><h4 id="byte-자료형을-쓰는-방법"><a href="#byte-자료형을-쓰는-방법" class="headerlink" title="byte 자료형을 쓰는 방법"></a>byte 자료형을 쓰는 방법</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamTest</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output2.txt&quot;</span>, <span class="keyword">true</span>) ;</span><br><span class="line">        <span class="keyword">try</span>(fos) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">byte</span> data = <span class="number">65</span>; <span class="comment">//&#x27;A&#x27;의 아스키값</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bs.length; i++) &#123;</span><br><span class="line">                bs[i] = data;</span><br><span class="line">                data ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fos.write(bs);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> output2.txt 파일에 ABCDEFGHIJKLMNOPQRSTUVWXYZ 출력</p>
</blockquote>
<h4 id="FileReader와-FileWriter"><a href="#FileReader와-FileWriter" class="headerlink" title="FileReader와 FileWriter"></a>FileReader와 FileWriter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;reader.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>( (i = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>) i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;writer.txt&quot;</span>)) &#123;</span><br><span class="line">            fw.write(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            <span class="keyword">char</span> buf[] = &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">            fw.write(buf);</span><br><span class="line">            fw.write(<span class="string">&quot;안녕하세요. 잘 써지네요. &quot;</span>); <span class="comment">//String 쓰기</span></span><br><span class="line">            fw.write(buf, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//buf 배열을 1오프셋으로부터 2개 쓰기</span></span><br><span class="line">            fw.write(<span class="string">&quot;65&quot;</span>); <span class="comment">//숫자도 String 형태로 출력</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="보조-스트림"><a href="#보조-스트림" class="headerlink" title="보조 스트림"></a>보조 스트림</h3><h4 id="InputStreamReader-OutputStreamWriter"><a href="#InputStreamReader-OutputStreamWriter" class="headerlink" title="InputStreamReader | OutputStreamWriter"></a>InputStreamReader | OutputStreamWriter</h4><ul>
<li>바이트 단위로 읽거나 쓰는 자료를 문자로 변환해주는 보조 스트림</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//new 는 FileInputStream 이고 형식은 InputStreamReader이다. </span></span><br><span class="line">        <span class="keyword">try</span>(InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;reader.txt&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span>( (i = isr.read()) != -<span class="number">1</span>)&#123;  <span class="comment">//보조 스트림으로 읽습니다.</span></span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BufferedInputStream-BufferedOutputStream"><a href="#BufferedInputStream-BufferedOutputStream" class="headerlink" title="BufferedInputStream | BufferedOutputStream"></a>BufferedInputStream | BufferedOutputStream</h4><ul>
<li><p>8k 배열 공간이 제공되어 입출력을 빠르게 하는 기능을 제공하는 보조스트림</p>
</li>
<li><p>BufferedReader와 BufferedWriter 는 문자용 입출력 보조스트림</p>
</li>
<li><p>BufferedInputStream과 BufferedOutputStream 예</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> millisecond = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">            <span class="comment">//기반스트림</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.zip&quot;</span>);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;copy.zip&quot;</span>);</span><br><span class="line">            <span class="comment">//보조스트림</span></span><br><span class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos))&#123;</span><br><span class="line"></span><br><span class="line">            millisecond = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="comment">//i 가 읽어들일 파일이 없을때까지 </span></span><br><span class="line">            <span class="keyword">while</span>( ( i = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//bos를 사용해서 copy.zip에 복사한다. </span></span><br><span class="line">                bos.write(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            millisecond = System.currentTimeMillis() - millisecond;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;파일 복사 하는 데 &quot;</span> + millisecond + <span class="string">&quot; milliseconds 소요되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DataInputStream-DataOutputStream-생략"><a href="#DataInputStream-DataOutputStream-생략" class="headerlink" title="DataInputStream | DataOutputStream (생략)"></a>DataInputStream | DataOutputStream (생략)</h4><ul>
<li>자료가 메모리에 저장된 상태 그대로 읽거나 쓴다. </li>
<li>input 메서드 자료형 read자료형()</li>
<li>output 메서드 void write자료형(자료형 변수명)</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 운영체제 입문 1</title>
    <url>/2021/09/16/20210916-KDT-WORKSHEET/</url>
    <content><![CDATA[<p>기간: </p>
<p>9.13 월 Spring Boot 8H</p>
<p>9.14 화 컴퓨터공학 5H</p>
<p>9.15 수 컴퓨터공학 8H</p>
<span id="more"></span>

<h2 id="운영체제"><a href="#운영체제" class="headerlink" title="운영체제"></a>운영체제</h2><h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><p>Window, Mac, UNIX</p>
<h3 id="역할"><a href="#역할" class="headerlink" title="역할"></a>역할</h3><ol>
<li>시스템 자원 관리</li>
</ol>
<ul>
<li>대상: 하드웨어(CPU, Memory, I/O Devices)</li>
</ul>
<ol start="2">
<li>응용프로그램 관리</li>
</ol>
<ul>
<li>실행, 권한 관리, 사용자 관리</li>
<li>언어별 라이브러리 사용할 수 있게 시스템 콜 제공</li>
</ul>
<ol start="3">
<li>사용자와 컴퓨터 간 커뮤니케이션 지원</li>
</ol>
<ul>
<li>사용자에게 쉘 프로그램 제공: 사용자 인터페이스 제공</li>
</ul>
<h3 id="구조"><a href="#구조" class="headerlink" title="구조"></a>구조</h3><p>폰 노이만 구조</p>
<p><img src="/img/image-20210917130701158.png" alt="image-20210917130701158"></p>
<h3 id="발전과정"><a href="#발전과정" class="headerlink" title="발전과정"></a>발전과정</h3><ol>
<li>50년대: 운영체제 없이 프로그램에서 시스템 자원 제어</li>
<li>60년대: 배치 처리 시스템(순서대로 프로그램 입력)</li>
<li>70년대: 시분할(멀티 태스킹 시스템) </li>
<li>80년대: CLI -&gt; GUI 도입(애플), 개인용 컴퓨터 보급 시작</li>
<li>90년대: 오픈소스 활성화, 인터넷 발달</li>
<li>00년대: 오픈소스 더 활성화, 대용량 컴퓨팅</li>
</ol>
<h3 id="관계"><a href="#관계" class="headerlink" title="관계"></a>관계</h3><p>사용자-응용프로그램-운영체제-컴퓨터 하드웨어의 관계</p>
<p><img src="/img/image-20210917130628820.png" alt="image-20210917130628820"></p>
<h3 id="스케줄링"><a href="#스케줄링" class="headerlink" title="스케줄링"></a>스케줄링</h3><ol>
<li>시분할 시스템: 다중 사용자 지원(컴퓨터 응답시간 최소화, 처리시간은 동일)</li>
<li>멀티태스킹: 단일 CPU에서 응용프로그램 다수 실행(하는것처러머 보임)</li>
<li>멀티 프로세싱: 여러 CPU에서 하나의 응용 프로그램을 병렬로 실행하여 실행속도 향상</li>
<li>멀티 프로그래밍: 일정시간내 CPU 최대한 활용</li>
</ol>
<h4 id="선점형-비선점형-스케줄러의-차이"><a href="#선점형-비선점형-스케줄러의-차이" class="headerlink" title="선점형, 비선점형 스케줄러의 차이"></a>선점형, 비선점형 스케줄러의 차이</h4><ol>
<li>선점형: 프로세스 실행 중, 중지하고 다른 프로세스로 교체</li>
<li>비선점형: 프로세스 자발적 block 후 다른프로세스로 교체</li>
</ol>
<h4 id="스케줄러-알고리즘"><a href="#스케줄러-알고리즘" class="headerlink" title="스케줄러 알고리즘"></a>스케줄러 알고리즘</h4><ul>
<li>FIFO, SJF, Priority-based / RoundRobin</li>
</ul>
<p>알고리즘 조합, 인터럽트, 프로세스, 컨텍스트, 계속</p>
]]></content>
      <categories>
        <category>COMPUTER SCIENCE</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20210917-KDT-WORKSHEET3</title>
    <url>/2021/09/17/20210917-KDT-WORKSHEET3/</url>
    <content><![CDATA[<p>   기간: 20210917 컴퓨터공학 5H</p>
<span id="more"></span>

<h2 id="가상-메모리"><a href="#가상-메모리" class="headerlink" title="가상 메모리"></a>가상 메모리</h2><h3 id="가상-메모리-개념"><a href="#가상-메모리-개념" class="headerlink" title="가상 메모리 개념"></a>가상 메모리 개념</h3><p>메모리 관리기법의 하나로 실제 이용 가능한 자원(메모리, 디스크)을 추상화하여 사용자에게 매우 큰 메모리로 보여준다. 추상화된 주소를 가상 주소, 실제 주소를 물리 주소라고 한다. </p>
<h4 id="가상-메모리가-필요한-이유"><a href="#가상-메모리가-필요한-이유" class="headerlink" title="가상 메모리가 필요한 이유"></a>가상 메모리가 필요한 이유</h4><p>여러 프로세스를 동시에 실행하는 시스템의 경우 메모리 용량이 부족하거나 프로세스 메모리간 침범 이슈가 발생할 수 있기 때문</p>
<p>=&gt; 메모리가 부족하니 비활성 데이터는 하드디스크를 활용하여 큰 메모리를 사용하는것처럼 사용한다</p>
<h3 id="페이징-시스템"><a href="#페이징-시스템" class="headerlink" title="페이징 시스템"></a>페이징 시스템</h3><h3 id="페이지-폴트"><a href="#페이지-폴트" class="headerlink" title="페이지 폴트"></a>페이지 폴트</h3><h2 id="파일-시스템"><a href="#파일-시스템" class="headerlink" title="파일 시스템"></a>파일 시스템</h2><h2 id="부팅"><a href="#부팅" class="headerlink" title="부팅"></a>부팅</h2><h2 id="가상-머신"><a href="#가상-머신" class="headerlink" title="가상 머신"></a>가상 머신</h2>]]></content>
      <categories>
        <category>COMPUTER SCIENCE</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 쓰레드</title>
    <url>/2021/09/17/20210917-KDT-WORKSHEET2/</url>
    <content><![CDATA[<p>  기간: 20210917 컴퓨터공학 5H</p>
<span id="more"></span>

<h2 id="스레드-Thread"><a href="#스레드-Thread" class="headerlink" title="스레드(Thread)"></a>스레드(Thread)</h2><h3 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h3><ul>
<li>프로세서와 프로세스는 다르다.</li>
<li>프로세스는 프로그램의 인스턴스와 같다. 하나의 응용 프로그램은 하나의 프로세스를 갖는다.</li>
<li>하나의 프로세스에 여러개의 스레드를 생성할 수 있다. </li>
<li>프로세스는 여러개의 스레드로 이루어져있다고 할 수 있다. </li>
<li>스레드는 프로세스 안에서 프로세스 데이터에 모두 접근 할 수 있다. </li>
<li>스레드는 동시에 실행이 가능하다. </li>
</ul>
<h3 id="멀티-스레드-Multi-Thread-와-멀티-프로세싱-Multi-Processing"><a href="#멀티-스레드-Multi-Thread-와-멀티-프로세싱-Multi-Processing" class="headerlink" title="멀티 스레드(Multi Thread)와 멀티 프로세싱(Multi Processing)"></a>멀티 스레드(Multi Thread)와 멀티 프로세싱(Multi Processing)</h3><p><img src="/img/image-20210917164637130.png" alt="image-20210917164637130"></p>
<ul>
<li>멀티 스레드<ul>
<li>하나의 프로세스가 여러개의 스레드로 이루어진것</li>
</ul>
</li>
<li>멀티 태스킹<ul>
<li>단일 CPU에서 여러 응용 프로그램을 동시에 실행하는 것 처럼 보이게 하는것</li>
</ul>
</li>
<li>멀티 프로세싱<ul>
<li>단일 CPU에서 하나의 응용 프로그램을 병렬로 실행하여 실행속도를 높이는 방법</li>
</ul>
</li>
</ul>
<h3 id="스레드-장점"><a href="#스레드-장점" class="headerlink" title="스레드 장점"></a>스레드 장점</h3><ol>
<li>CPU 활용도 증대(노는시간 없음)</li>
<li>처리속도 향상</li>
<li>사용자 응답성 향상</li>
<li>하드웨어 자원 공유 효율 증대</li>
</ol>
<h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ol>
<li>한 스레드에만 문제가 있어도 전체 프로세스에 영향</li>
<li>스레드가 많으면 Switching 이 많아 성능 저하</li>
</ol>
<h3 id="동기화"><a href="#동기화" class="headerlink" title="동기화"></a>동기화</h3><ul>
<li>여러 프로세스와 스레드들의 실행 시기를 맞추는것</li>
<li>여러 스레드가 동일 자원에 접근시 이슈 발생<ul>
<li>Mutual exclusion (상호 배제)</li>
<li>쓰레드는 프로세스의 모든 데이터에 접근할 수 있으므로 <ul>
<li>스레드가 변경할 공유 변수에 대해 Exclusive Access필요 = 스레드 작업중 타 스레드 접근금지</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Locking-메커니즘"><a href="#Locking-메커니즘" class="headerlink" title="Locking 메커니즘"></a>Locking 메커니즘</h3><ul>
<li>작업중인 Critical Section(임계 구역)에 대한 접근을 막기위한 메커니즘<ul>
<li>Mutex(binary semaphore)<ul>
<li>임계구역에 하나의 스레드만 들어갈 수 있음</li>
</ul>
</li>
<li>Semaphore<ul>
<li>임계구역에 여러 스레드 들어갈 수 있다.</li>
<li>counter를 두어 동시에 접근 허용 가능 스레드 수 제어</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="교착상태-Deadlock"><a href="#교착상태-Deadlock" class="headerlink" title="교착상태(Deadlock)"></a>교착상태(Deadlock)</h3><ul>
<li>교착상태: 두 개 이상의 작업이 서로 상대 작업이 끝나기만을 기다려 다음단계로 넘어가지 못함</li>
<li>프로세스, 스레드 두 경우 모두 발생가능</li>
<li>배치 시스템에서는 일어나지 않음</li>
</ul>
<h4 id="발생-조건-다음-모두-해당될-때-발생-가능"><a href="#발생-조건-다음-모두-해당될-때-발생-가능" class="headerlink" title="발생 조건: 다음 모두 해당될 때 발생 가능"></a>발생 조건: 다음 모두 해당될 때 발생 가능</h4><p>※ 네 개 중 효율이 좋은 한개만 제거해도 된다.</p>
<ol>
<li>상호배제: 자원은 필요한데 통제권을 주지않음<ul>
<li>임계 영역 제거</li>
</ul>
</li>
<li>점유대기: 다른 자원 대기<ul>
<li>한번에 모든 필요한 자원을 점유하거나 해제</li>
</ul>
</li>
<li>비(非)선점(Non preemption): 자원 점유가 끝날때까지 대기<ul>
<li>선점 가능 기법 생성</li>
</ul>
</li>
<li>순환대기: 다음 프로세스가 요구하는 자원을 보유<ul>
<li>자원 유형에 따라 순서 배정</li>
</ul>
</li>
</ol>
<h3 id="기아상태-Starvation"><a href="#기아상태-Starvation" class="headerlink" title="기아상태(Starvation)"></a>기아상태(Starvation)</h3><ul>
<li><p>프로세스의 우선순위가 낮아 원하는 자원을 계속 할당받지 못하는 상태</p>
</li>
<li><p>여러 프로세스가 동일 자원 점유를 요청하여 교착상태가 벌어질 때 특정 프로세스는 자원을 아예 받지 못한다. </p>
<p>◆ 우선순위 변경이나 스케줄 유형 변경하여 해결</p>
</li>
</ul>
]]></content>
      <categories>
        <category>COMPUTER SCIENCE</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20211001-KDT-WORKSHEET</title>
    <url>/2021/10/01/20211001-KDT-WORKSHEET/</url>
    <content><![CDATA[<h2 id="시스템-프로그래밍"><a href="#시스템-프로그래밍" class="headerlink" title="시스템 프로그래밍"></a>시스템 프로그래밍</h2><h3 id="리눅스"><a href="#리눅스" class="headerlink" title="리눅스"></a>리눅스</h3><h3 id="서버에-많이-사용"><a href="#서버에-많이-사용" class="headerlink" title="서버에 많이 사용"></a>서버에 많이 사용</h3><ul>
<li>최근 서버 환경 대다수</li>
<li>클라우드 컴퓨팅에 사용<ul>
<li>예 : 아마존 aws</li>
</ul>
</li>
<li>프로그래밍에 유용</li>
<li>유닉스 계열 운영체제</li>
</ul>
<h3 id="권한"><a href="#권한" class="headerlink" title="권한"></a>권한</h3><ul>
<li>모든 리소스를 파일로 관리(inode)</li>
<li>사용자와 그룹으로 권한 관리</li>
</ul>
<p>ANSI-C </p>
<ul>
<li>가장 많이 사용하는 C언어 표준</li>
<li>영문 알파벳만 사용할 수 있음</li>
</ul>
<h3 id="클라우드-컴퓨팅-설정"><a href="#클라우드-컴퓨팅-설정" class="headerlink" title="클라우드 컴퓨팅 설정"></a>클라우드 컴퓨팅 설정</h3><ol>
<li>EC2 서버 설정</li>
<li>Elastic IP 생성</li>
<li>자기 PC에서 EC2 접속</li>
</ol>
<h3 id="쉘-종류"><a href="#쉘-종류" class="headerlink" title="쉘 종류"></a>쉘 종류</h3><ul>
<li>Bourne -Again Shell(bash) : GNU 프로젝트 일한으로 개발된 리눅스 디폴트</li>
<li>Bourne Shell(sh)</li>
<li>C shell(csh)</li>
<li>Korn Shell (ksh) : 유닉스에서 가장 많이 사용</li>
</ul>
<h3 id="기본-명령어"><a href="#기본-명령어" class="headerlink" title="기본 명령어"></a>기본 명령어</h3><ul>
<li>whoami: 로그인한 사용자 ID를 알려준다.</li>
<li>passwd: 로그인한 사용자 ID의 암호 변경</li>
<li>useradd: 사용자 기본 설정 자동으로 안함</li>
<li>adduser: 사용자 기본 설정 자동수행</li>
<li>su: 사용자 변경<ul>
<li>su root: 현재 사용자의 환경설정 기반을 root으로 변경</li>
<li>su - root: 현병될 사용자의 환경설정 기반으로 root전환</li>
</ul>
</li>
<li>pwd: 현재 디렉토리 위치</li>
<li>cd: 디렉토리 이동</li>
<li>ls: 파일 목록 출력</li>
<li>man: 사용법 <ul>
<li>예: man rm</li>
</ul>
</li>
<li>chmod: 파일 권한 변경</li>
<li>chown: 소유자 변경<ul>
<li>chown 옵션 소유자:소유그룹 파일</li>
</ul>
</li>
<li>cat: 파일 보기</li>
<li>head/tail: 시작이나 끝 부분</li>
<li>more: 파일보기</li>
<li>rm: 파일 및 폴더 삭제</li>
<li></li>
</ul>
<h3 id="sudo-명령어"><a href="#sudo-명령어" class="headerlink" title="sudo 명령어"></a>sudo 명령어</h3><p>root 계정에 로그인하지 않은 상태에서, root 권한이 필요한 명령을 실행할 수 있도록 함</p>
<ul>
<li>예: sudo apt-get update</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userid ALL=(ALL) ALL</span><br><span class="line">%group ALL=(ALL) nopasswd: all</span><br><span class="line">userid ALL=(ALL) nopasswd: all</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>COMPUTER SCIENCE</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 운영체제 입문 2 스케줄러 / 인터럽트 / 프로세스</title>
    <url>/2021/09/17/20210917-KDT-WORKSHEET/</url>
    <content><![CDATA[<p> 기간: 20210917 컴퓨터공학 5H</p>
<span id="more"></span>

<h2 id="선점형-비선점형-스케줄러"><a href="#선점형-비선점형-스케줄러" class="headerlink" title="선점형 / 비선점형 스케줄러"></a>선점형 / 비선점형 스케줄러</h2><h3 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h3><h4 id="선점형-Preemptive"><a href="#선점형-Preemptive" class="headerlink" title="선점형(Preemptive)"></a>선점형(Preemptive)</h4><p>Preemptive는 선제적이라는 뜻이다.</p>
<p>선점형이라는 것은 다른것보다 먼저 CPU를 차지한다는 뜻</p>
<h4 id="비선점형-Non-Preaemtive"><a href="#비선점형-Non-Preaemtive" class="headerlink" title="비선점형(Non-Preaemtive)"></a>비선점형(Non-Preaemtive)</h4><p>선점하지 않기 때문에 CPU 새치기를 할 수 없다. </p>
<p>한 프로세스가 끝나거나 스스로 block 되어야 뒷 프로세서가 실행된다. </p>
<h4 id="스케줄러"><a href="#스케줄러" class="headerlink" title="스케줄러"></a>스케줄러</h4><p>프로세스 진행 순서를 결정하는 정책이다</p>
<h3 id="스케줄러-종류"><a href="#스케줄러-종류" class="headerlink" title="스케줄러 종류"></a>스케줄러 종류</h3><ol>
<li>FIFO ( First In First Out) = FCFS (First Come First Serve)<ul>
<li>먼저 들어온것 먼저 처리한다는 뜻</li>
</ul>
</li>
<li>SJF (Shortest Job First)<ul>
<li>Service Time 이 짧은 것 먼저 처리한다. 비선점형</li>
</ul>
</li>
<li>Priority-based = 우선순위 스케줄링<ul>
<li>중요한것먼저 처리</li>
<li>운선순위는 어떻게? - 중요도, 자원 유형, 비용, 선호도 등등 고려</li>
</ul>
</li>
<li>RoundRobin<ul>
<li>할당된 단위시간만큼 만 처리하고 다음 프로세스 실행</li>
<li>시분할 시스템을 위한 알고리즘이다.</li>
</ul>
</li>
</ol>
<h2 id="인터럽트"><a href="#인터럽트" class="headerlink" title="인터럽트"></a>인터럽트</h2><h3 id="인터럽트-개념"><a href="#인터럽트-개념" class="headerlink" title="인터럽트 개념"></a>인터럽트 개념</h3><ul>
<li>CPU 사용 중 예외 상황이 발생하여 처리가 필요한경우 CPU에 알려 처리해야 한다.</li>
</ul>
<h3 id="인터럽트가-필요한-이유"><a href="#인터럽트가-필요한-이유" class="headerlink" title="인터럽트가 필요한 이유"></a>인터럽트가 필요한 이유</h3><ol>
<li>선점형 스케줄러 구현(프로세스 새치기)</li>
<li>IO Device Communication (입력하거나 출력하거나)</li>
<li>프로그램에서 잘못된 명령/데이터 사용시</li>
</ol>
<h3 id="인터럽트-종류"><a href="#인터럽트-종류" class="headerlink" title="인터럽트 종류"></a>인터럽트 종류</h3><ul>
<li>내부 인터럽트<ol>
<li>0으로 나누기</li>
<li>권한 오류</li>
<li>Overflow/Underflow</li>
</ol>
</li>
<li>외부 인터럽트<ol>
<li>전원 이상</li>
<li>기계 문제</li>
<li>I/O Event</li>
<li>Timer Event</li>
</ol>
</li>
</ul>
<h3 id="인터럽트-IDT-시스템-콜"><a href="#인터럽트-IDT-시스템-콜" class="headerlink" title="인터럽트+IDT+시스템 콜"></a>인터럽트+IDT+시스템 콜</h3><p>IDT ? : Interrupt Descriptor Table </p>
<p>부팅시 운영체제가 이벤트 발생시 실행할 코드를 기록한 테이블</p>
<h4 id="시스템-콜-호출"><a href="#시스템-콜-호출" class="headerlink" title="시스템 콜(호출)"></a>시스템 콜(호출)</h4><p>-&gt; 프로그래밍 언어에서는 직접 시스템 호출을 사용할 수 없다.</p>
<p>프로그래밍 언어 레벨에서는 CPU 권한이 사용자 공간에서 작동하도록 되어있어 응용 프로그램이 여러 상황에서 커널에 의존하여 어쩌구 저쩌구</p>
<p>-&gt; 응용프로그램은 많은 경우 커널의 서비스를 이용해야 한다.</p>
<p>커널? </p>
<p>-&gt; 응용 프로그램과 하드웨어를 연결하는 운영체제의 핵심 부분</p>
<h4 id="시스템-콜의-유형"><a href="#시스템-콜의-유형" class="headerlink" title="시스템 콜의 유형"></a>시스템 콜의 유형</h4><ol>
<li>프로세스 제어</li>
<li>파일 조작</li>
<li>장치 관리</li>
<li>정보 유지 (?)</li>
<li>통신</li>
</ol>
<p>**응용 프로그램 실행 중 **</p>
<p>**이벤트가 발생할 경우 **</p>
<p>**IDT에 따라 시스템 콜을 하여 해결하고 **</p>
<p><strong>다음 순서로 넘어간다</strong></p>
<h2 id="프로세스와-IPC"><a href="#프로세스와-IPC" class="headerlink" title="프로세스와 IPC"></a>프로세스와 IPC</h2><h3 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h3><p>저장된 실행 코드(프로그램)를 실행 중인 프로그램으로, 프로그램 실행 시 메모리에 적재되어 프로세스 형태로 실행</p>
<h3 id="프로세스-구조"><a href="#프로세스-구조" class="headerlink" title="프로세스 구조"></a>프로세스 구조</h3><p><img src="/img/image-20210917145002820.png" alt="image-20210917145002820"></p>
<ul>
<li><p>text(CODE)</p>
<ul>
<li>실행할 프로그램의 코드 저장</li>
</ul>
</li>
<li><p>data</p>
<ul>
<li><strong>프로그램 시작</strong>과 함께 할당, 종료시 소멸</li>
<li>전역 변수와 Static 변수 저장</li>
</ul>
</li>
<li><p>stack</p>
<ul>
<li><p><strong>함수</strong> 호출과 함께 할당, 호출 완료시 소멸</p>
</li>
<li><p>로컬 변수 등 저장</p>
<ul>
<li><p>스택 프레임: 함수 호출 과정에서 할당되는 메모리 블록</p>
<ul>
<li><p>PC(Program Counter): 코드 한 줄을 가르키는 주소 레지스터</p>
</li>
<li><p>SP(Stack Pointer): 스택 최상단 주소 레지스터</p>
<ul>
<li>PC+SP는 PCB(Process Control Block)에 저장(운영체제 따라 다름)</li>
</ul>
</li>
<li><p>ESP(Extended Stack Pointer Register): 유동적, 현재 스택의 최상단 주소값 저장하는 레지스터</p>
</li>
<li><p>EBP(Extended Base Pointer Register): 고정적, 현재 스택 프레임의 베이스 주소를 담는 레지스터</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>heap</p>
<ul>
<li>사용자가 직접 관리할 수 있는 메모리 영역</li>
<li>코드에서 동적으로 만들어지는 데이터 저장</li>
</ul>
</li>
</ul>
<hr>
<p>함수실행 - 리턴 주소 저장(Stack) - 함수 지역변수 저장(Stack) - 함수실행 완료 후 차례로 삭제, 마지막 주소로 이동</p>
<h3 id="IPC-InterProcess-Communication-기법"><a href="#IPC-InterProcess-Communication-기법" class="headerlink" title="IPC (InterProcess Communication) 기법"></a>IPC (InterProcess Communication) 기법</h3><ul>
<li>프로세스는 다른 프로세스의 공간에 접근할 수 없다.</li>
<li>성능을 높이기 위해 여러 프로세스를 만들어 병렬 처리</li>
<li>병렬 처리를 위한 프로세스간 통신 필요</li>
</ul>
<h4 id="IPC-종류"><a href="#IPC-종류" class="headerlink" title="IPC 종류"></a>IPC 종류</h4><ol>
<li><p>file 사용</p>
<p>↓ 커널 사용</p>
</li>
<li><p>Message Queue </p>
<ul>
<li>First In First Out 정책 활용하여 데이터 전송, 양방향</li>
</ul>
</li>
<li><p>Shared Memory </p>
<ul>
<li>커널에 메모리를 만들어 그곳을 변수처럼 사용, </li>
</ul>
</li>
<li><p>Pipe </p>
<ul>
<li>fork()로 부모/자식 생성하여 활용, 단방향</li>
</ul>
</li>
<li><p>Signal</p>
<ul>
<li>다른 프로세스에 어떤 이벤트가 발생되었는지 지정 시그널 활용</li>
</ul>
</li>
<li><p>Semaphore</p>
</li>
<li><p>Socket</p>
<ul>
<li>각각 Port를 담당하는 소켓을 만들어 프로세스가 맡아 파이프처럼 데이트 송수신</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>COMPUTER SCIENCE</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20211022-KDT-Worksheet</title>
    <url>/2021/10/22/20211022-KDT-Worksheet-2/</url>
    <content><![CDATA[<h2 id="가상-메모리"><a href="#가상-메모리" class="headerlink" title="가상 메모리"></a>가상 메모리</h2><h3 id="가상-메모리-개념"><a href="#가상-메모리-개념" class="headerlink" title="가상 메모리 개념"></a>가상 메모리 개념</h3><p>메모리 관리기법의 하나로 실제 이용 가능한 자원(메모리, 디스크)을 추상화하여 사용자에게 매우 큰 메모리로 보여준다. 추상화된 주소를 가상 주소, 실제 주소를 물리 주소라고 한다. </p>
<h4 id="가상-메모리가-필요한-이유"><a href="#가상-메모리가-필요한-이유" class="headerlink" title="가상 메모리가 필요한 이유"></a>가상 메모리가 필요한 이유</h4><p>여러 프로세스를 동시에 실행하는 시스템의 경우 메모리 용량이 부족하거나 프로세스 메모리간 침범 이슈가 발생할 수 있기 때문</p>
<p>=&gt; 메모리가 부족하니 비활성 데이터는 하드디스크를 활용하여 큰 메모리를 사용하는것처럼 사용한다</p>
<h2 id="페이징-시스템"><a href="#페이징-시스템" class="headerlink" title="페이징 시스템"></a>페이징 시스템</h2><ul>
<li>프로세스의 가상 메모리와 물리 메모리의 주소를 연결시켜준다.</li>
</ul>
<h3 id="구조"><a href="#구조" class="headerlink" title="구조"></a>구조</h3><ul>
<li>고정된 크기의 block(4KB)</li>
<li>가상주소 Virtual Address 는 페이지 번호와 변위로 구성</li>
</ul>
<h3 id="페이지-폴트"><a href="#페이지-폴트" class="headerlink" title="페이지 폴트"></a>페이지 폴트</h3><h2 id="파일-시스템"><a href="#파일-시스템" class="headerlink" title="파일 시스템"></a>파일 시스템</h2><h2 id="부팅"><a href="#부팅" class="headerlink" title="부팅"></a>부팅</h2><h2 id="가상-머신"><a href="#가상-머신" class="headerlink" title="가상 머신"></a>가상 머신</h2>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20211022-KDT-Worksheet-4</title>
    <url>/2021/10/22/20211022-KDT-Worksheet-4/</url>
    <content><![CDATA[<p>JDBC = Java Database Connectivity</p>
<p>JDBC API = java.sql 패키지</p>
<p>DBMS로 SQL을 보내니 위해 자바로 DB 연결하여 데이터 연동</p>
<p>JDBC 프로그램은 인터페이스를 이용해서 작성된다. (다형성 기반 기술)</p>
<p>인터페이스는 리모콘이라는 점 </p>
<p>h2.jar파일은 누가 만들었나? - h2 데이터베이스 만든애들</p>
<p>유틸리티 클래스를 만들어 중복되는 클래스 제거 </p>
<p>순서</p>
<p>JDBC 드라이버 로드 - Connection 객체 생성 - Statement 객체 생성 - SQL 실행 - 역순 종료</p>
<p>정적 sql, 동적 sql</p>
<p>PreparedStatement : </p>
<p>정적 sql과 달리 동적 sql는 dbms메모리에 sql이 저장되어 테이블 확인 및 문법 체크를 안하고 실행되어 속도가 빠르다.</p>
<p>update board client 만들어서 제목과 내용을 수정하는 클래스 만들어보기 </p>
]]></content>
      <categories>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20211022-KDT-Worksheet-3</title>
    <url>/2021/10/22/20211022-KDT-Worksheet-3/</url>
    <content><![CDATA[<p>create table board(<br> seq number(5) primary key,<br> title varchar2(200) not null,<br> writer varchar2(50) not null, BOARD SEQ BOARD BOARD<br> content varchar2(2000),<br> regdate date default sysdate, BOARD<br> cnt number default 0<br>);</p>
<p>insert into board(seq, title, writer, content)<br>values(1, ‘임시 제목’, ‘익명’, ‘임시내용..’);</p>
<p>select * from board;</p>
<p>insert into board(seq, title, writer, content)<br>values((select nvl(max(seq), 0)+1 from board), ‘임시 제목’, ‘익명’, ‘임시내용..’);</p>
<p>delete board where seq = 12;</p>
<p>delete board;</p>
<p>update board set title = ‘몰라’, content = ‘쉬자’ where seq = 3;</p>
<p>delete board;<br>rollback;</p>
<p>delete board where seq=4;<br>commit;<br>rollback;</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/20/20211020-KDT-Worksheet/</url>
    <content><![CDATA[<p><img src="C:/Users/Jisoo/Documents/dev/blog/source/img/image-20211020202929193.png" alt="image-20211020202929193"></p>
<p>알리아스를 적용하여 컬럼 제목 변경 가능</p>
<p>쌍파이프|| 삽입시 한 칸으로 합쳐짐</p>
<p>문자열을 중간에 넣고싶다면 -&gt; 컬럼||’넣고싶은 문자열’||컬럼</p>
<p>where 으로 조건을 지정한다 (sal&gt;=3000)</p>
<p>select 사번, 이름, 급여<br>from emp<br>where 급여 &gt;=3000</p>
<p>select 사번, 이름, 급여<br>from emp<br>where 급여 = select 급여 from emp where 이름 = ward;</p>
<p>select 사번, 이름, 부서번호<br>from emp<br>where 부서번호 = select 부서번호 from emp where 이름 = ward;</p>
<p>select 사번, 이름, 부서번호<br>from emp<br>where 부서번호 = 10 or 부서번호 = 30;<br>= where 부서번호 in(10, 30);</p>
<p>직무에 er이 포함된 </p>
<p>where job like’%er%’</p>
<p>이름이 s로 시작하는</p>
<p>where name like ‘s%’</p>
<p>직무에 er포함, 이름이 s로 시작하는</p>
<p>where job like ‘%er%’ and name like ‘s%’</p>
<p>81년도에 입사한사람</p>
<p>where hiredate like ‘__81%’</p>
<p>order by 는 정렬</p>
<p>order by hiredate desc(asc)</p>
<p><img src="C:/Users/Jisoo/Documents/dev/blog/source/img/image-20211020220318653.png" alt="image-20211020220318653"></p>
<p>where 와 having 을 주의할것</p>
<p><img src="C:/Users/Jisoo/Documents/dev/blog/source/img/image-20211020220404301.png" alt="image-20211020220404301"></p>
<p><img src="C:/Users/Jisoo/Documents/dev/blog/source/img/image-20211021190152469.png" alt="image-20211021190152469"></p>
<p><img src="C:/Users/Jisoo/Documents/dev/blog/source/img/image-20211021214527024.png" alt="image-20211021214527024"></p>
]]></content>
  </entry>
  <entry>
    <title>20211022-KDT-Worksheet</title>
    <url>/2021/10/22/20211022-KDT-Worksheet/</url>
    <content><![CDATA[<p>SQL 명령어 모음</p>
<p>–</p>
<p>SELECT 사용하여 컬럼을 선택한다. </p>
<p>​    컬럼 선택 후 as를 사용하여 컬럼 표시명을 바꿔준다. (알리아스 기능)</p>
<p>​    쌍파이프 삽입시 한칸으로 합칠 수 있다. </p>
<p>FROM은 컬럼을 가져올 테이블을 말한다. </p>
<p>WHERE은 조회할 데이터의 조건을 말한다. </p>
<p>GROUP BY 사용하여 그룹을 정하고</p>
<p>HAVING 으로 조건을 다시 정해준다.</p>
<p>ORDER BY 로 오름/내림차 정렬을 한다.</p>
<p>예시 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 급여가 철수와 같거나 이상인 남자 사원들 사번, 이름, 급여</span><br><span class="line">SELECT 사번, 이름, 급여</span><br><span class="line">FROM 사원들</span><br><span class="line">WHERE 급여 &gt;= SELECT 급여 FROM 사원들 WHERE 이름 = 철수;</span><br><span class="line"></span><br><span class="line">2. WHERE 사용시 글자가 포함된 컬럼 조회시</span><br><span class="line">이름에 수가 들어갔을경우 WHERE 이름 LIKE &#x27;%수%&#x27;</span><br><span class="line">이름이 수가 들어가고 김으로 시작하는경우 WHERE 이름 LIKE &#x27;%수%&#x27; AND 이름 LIKE &#x27;김%&#x27;</span><br></pre></td></tr></table></figure>



<p>예시 2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRANSFORM Count([OrderedEvent]) AS Expr1</span><br><span class="line">SELECT [Event] &amp; &quot; &quot; &amp; [FDM Severity] AS OrderedEvent, Count(*) AS 계</span><br><span class="line">FROM 스케줄 LEFT JOIN 이벤트 ON (스케줄.[Date ] = 이벤트.[Date]) AND (스케줄.[Flight No] = 이벤트.[flightNum])</span><br><span class="line">WHERE (((스케줄.[Crew Name])=&quot;RYU&quot;) AND ((Month([Date ]))&gt;=4))</span><br><span class="line">GROUP BY [Event] &amp; &quot; &quot; &amp; [FDM Severity], 스케줄.[Crew Name]</span><br><span class="line">ORDER BY 스케줄.[Crew Name], Format([Date ],&#x27;yyyy/mm&#x27;)</span><br><span class="line">PIVOT Format([Date ],&#x27;yyyy/mm&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/img/image-20211022115056667.png" alt="image-20211022115056667"></p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20211027-KDT-Worksheet</title>
    <url>/2021/10/27/20211027-KDT-Worksheet/</url>
    <content><![CDATA[<p> IoC (Invention of Control)</p>
<p>개발자에서 프레임워크로 객체관리, 제어의 권한을 넘긴다. =&gt; 제어의 역전</p>
<p>DI (Dependency Injection)</p>
<p>장점</p>
<ul>
<li>의존성으로부터 격리, 코드 테스트에 용이</li>
<li>불가능한 상황도 안정적으로 테스트(외부와의 통신 등)</li>
<li>코드 확장 및 변경 시 영향 최소화(추상화)</li>
<li>순환참조 막을 수 있다. (내가 나를 참조하는 경우 등)</li>
</ul>
<p>예시</p>
<p>Base64 / Url 인코더 리모컨</p>
<p>Base64 / Url  클래스 모두 encode 기능이 들어간다.</p>
<p>encode 기능을 갖는 인터페이스를 만든다.</p>
<p>Base64 / Url 클래스를 컨트롤 할 수 있는 Encoder 클래스를 만든다.</p>
<p>Encoder 클래스도 encode 기능을 갖는다. </p>
<p>Encoder 클래스에선 인터페이스를 우선 갖고, 입력받는 매개변수에 따라 </p>
<p>그 먼저 가진 인터페이스가 Base64가 될수 도 있고 Url 인코더가 될 수 도 있다. </p>
<p>new Base64Encoder / new UrlEncoder</p>
<p>인터페이스명.encode(메세지) 하면 각각 인코더에 맞는 encode메서드가 실행된다. </p>
]]></content>
      <categories>
        <category>SPRING</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>20211029-KDT-Worksheet</title>
    <url>/2021/10/29/20211029-KDT-Worksheet/</url>
    <content><![CDATA[<p>web-inf 폴더 내는 브라우저가 접근하는것을 서버가 허용하지 않는다.</p>
<p>web.xml 파일이 안에 있다면</p>
<p>다이나믹 웹 모듈 버전 2.5이 아니면 web.xml이 안만들어져서 직접 만들어야한다.</p>
<p>html 템플릿 만들때 4.01transitional 로 하는 이유는 속성 지원을 안하기때문css 파일에서 지원</p>
<p>get 방식은 사용자 정보가 uri 에 딸려가고 post는 딸려가지 않아 안전하다.</p>
<p>요청프로토콜 - 브라우저가 만들고 응답프로토콜 - 서버가 만든다.</p>
<p>서블릿은 클래스이다. : 플랫폼이 독릭접, 동일한 실행결과. OS에 종속되지않는다.</p>
<p>서버 독립성: 한 서버에서 실행된건 다른데서도 실행된다. = 이식성이 뛰어나다</p>
<p>다양한 벤더에서 제공하는 클래스를 쓸수있다. : 확장성</p>
<p>서블릿은 멀티 쓰레드로 동작하여 효율적이다. </p>
<p>톰캣의 구조</p>
<p>정적인부분 담당의 웹 부분과</p>
<p>동적인부분 담당의 엔진</p>
<p> 멀티쓰레드 - 서블렛 효율적, 메모리 재사용, 객체 하나로 수백의 객체를 재사용</p>
<p>서블릿 엔진 : 톰캣으로 서버 구현시 생성</p>
<p>컬렉션 안에 쓰레드 3개 생성 가정시 </p>
<p>디폴트 생성자: 멤버 변수를 디폴트값 밖으로밖에 초기화할 수 없으니</p>
<p>인잇을 만들어 멤버 변수를 초기화</p>
<p>쓰레드의 런 메서드가 구동되어 서비스 호출</p>
<p>쓰레드 풀은 몬가?</p>
<p>외장 jar은 webapp-webinf-lib에 넣어두면자동으로 설정</p>
<p>서블릿 클래스를 만들때 4가지 규칙</p>
<ol>
<li>퍼블릭으로 할것</li>
<li>httpservlet을 상속해야한다.</li>
<li>디폴트생성자가 반드시 필요하다</li>
<li>메서드 오버라이드 할것(겟, 포스트, 디스트로이, 인잇 등) = 콜백 메서드<ul>
<li>서버 엔진이 알아서 호출해준다. </li>
</ul>
</li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>20211104-KDT-Worksheet</title>
    <url>/2021/11/04/20211104-KDT-Worksheet/</url>
    <content><![CDATA[<h2 id="병합정렬"><a href="#병합정렬" class="headerlink" title="병합정렬"></a>병합정렬</h2><p>가. Split 단계</p>
<ul>
<li><p>나눌 수 없을 때까지 나눈다</p>
</li>
<li><p>```java<br>ppublic ArrayList<Integer> mergeSplitFunc(ArrayList<Integer> dataList) {</p>
<pre><code>    if (dataList.size() &lt;= 1) &#123;
        return dataList;
    &#125;
    int medium = dataList.size() / 2;  

    ArrayList&lt;Integer&gt; leftArr = new ArrayList&lt;Integer&gt;();
    ArrayList&lt;Integer&gt; rightArr = new ArrayList&lt;Integer&gt;();

    //이부분에서 재귀 하여 나누게 된다. 
    leftArr = this.mergeSplitFunc(new ArrayList&lt;Integer&gt;(dataList.subList(0, medium))); 
    rightArr = this.mergeSplitFunc(new ArrayList&lt;Integer&gt;(dataList.subList(medium, dataList.size()))); 

    return this.mergeFunc(leftArr, rightArr);
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">나. Merge 단계</span><br><span class="line"></span><br><span class="line">- 두개 합칠 때 작은것을 앞에, 큰것을 뒤에 </span><br><span class="line"></span><br><span class="line">- 2+2 에선 1:3-1:4-2:4 순으로 비교해서 순서 정렬</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public ArrayList&lt;Integer&gt; mergeFunc(ArrayList&lt;Integer&gt; leftList, ArrayList&lt;Integer&gt; rightList) &#123;</span><br><span class="line">          ArrayList&lt;Integer&gt; mergedList = new ArrayList&lt;Integer&gt;();</span><br><span class="line">          int leftPoint = 0;</span><br><span class="line">          int rightPoint = 0;</span><br><span class="line">  </span><br><span class="line">           // CASE1: left/right 둘 다 있을 때</span><br><span class="line">          while (leftList.size() &gt; leftPoint &amp;&amp; rightList.size() &gt; rightPoint) &#123;</span><br><span class="line">              if (leftList.get(leftPoint) &gt; rightList.get(rightPoint)) &#123;</span><br><span class="line">                  mergedList.add(rightList.get(rightPoint));</span><br><span class="line">                  rightPoint += 1;</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  mergedList.add(leftList.get(leftPoint));</span><br><span class="line">                  leftPoint += 1;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // CASE2: right 데이터가 없을 때</span><br><span class="line">          while (leftList.size() &gt; leftPoint) &#123;</span><br><span class="line">              mergedList.add(leftList.get(leftPoint));</span><br><span class="line">              leftPoint += 1;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // CASE3: left 데이터가 없을 때</span><br><span class="line">          while (rightList.size() &gt; rightPoint) &#123;</span><br><span class="line">              mergedList.add(rightList.get(rightPoint));</span><br><span class="line">              rightPoint += 1;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          return mergedList;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="퀵정렬"><a href="#퀵정렬" class="headerlink" title="퀵정렬"></a>퀵정렬</h2><p>가. 기준점 선택(0번 데이터)</p>
<p>나. 분류(작은데이터, 기준, 큰 데이터)</p>
<p>다. 기준점 재선택 및 분류 (데이터 단위가 1개가 될때까지, 재귀)</p>
<ul>
<li><p>```java<br>public ArrayList<Integer> sort(ArrayList<Integer> dataList) {</p>
<pre><code>    if (dataList.size() &lt;= 1) &#123;
        return dataList;
    &#125;
    //가. 기준점 선택
    int pivot = dataList.get(0);
    
    ArrayList&lt;Integer&gt; leftArr = new ArrayList&lt;Integer&gt;();
    ArrayList&lt;Integer&gt; rightArr = new ArrayList&lt;Integer&gt;();        
    
    //데이터 나누는 부분
    for (int index = 1; index &lt; dataList.size(); index++) &#123;
        if (dataList.get(index) &gt; pivot) &#123;
            rightArr.add(dataList.get(index));
        &#125; else &#123;
            leftArr.add(dataList.get(index));
        &#125;
    &#125;
    ArrayList&lt;Integer&gt; mergedArr = new ArrayList&lt;Integer&gt;();

    //이부분에서 재귀적으로 정렬해서 추가 및 전부 합치기
    mergedArr.addAll(this.sort(leftArr));
    mergedArr.addAll(Arrays.asList(pivot));
    mergedArr.addAll(this.sort(rightArr));

    return mergedArr;        
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">라. 전부 합치기</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">기준점(0번)의 최종 배열순서에 따라 속도가 빠를수도있고 느릴수도있다. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 순차탐색</span><br><span class="line"></span><br><span class="line">가. 배열 사이즈의 절반지점 데이터 와 탐색 목표를 비교</span><br><span class="line"></span><br><span class="line">나. 찾으려는값이 중간 기준보다 크면 절반의 큰 배열로, 아니면 반대로 넘긴다</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public boolean searchFunc(ArrayList&lt;Integer&gt; dataList, Integer searchItem) &#123;</span><br><span class="line">          if (dataList.size() == 1 &amp;&amp; searchItem == dataList.get(0)) &#123;</span><br><span class="line">              return true;</span><br><span class="line">          &#125; </span><br><span class="line">          if (dataList.size() == 1 &amp;&amp; searchItem != dataList.get(0)) &#123;</span><br><span class="line">              return false;</span><br><span class="line">          &#125;</span><br><span class="line">          if (dataList.size() == 0) &#123;</span><br><span class="line">              return false;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          int medium = dataList.size() / 2; </span><br><span class="line">          </span><br><span class="line">          if (searchItem == dataList.get(medium)) &#123;</span><br><span class="line">              return true;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              //이부분에서 재귀적으로 값을 다시 찾는다. </span><br><span class="line">              if (searchItem &lt; dataList.get(medium)) &#123;</span><br><span class="line">                  return this.searchFunc(new ArrayList&lt;Integer&gt;(dataList.subList(0, medium)), searchItem);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                   return this.searchFunc(new ArrayList&lt;Integer&gt;(dataList.subList(medium, dataList.size())), searchItem);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;public boolean searchFunc(ArrayList&lt;Integer&gt; dataList, Integer searchItem) &#123;</span><br><span class="line">          if (dataList.size() == 1 &amp;&amp; searchItem == dataList.get(0)) &#123;</span><br><span class="line">              return true;</span><br><span class="line">          &#125; </span><br><span class="line">          if (dataList.size() == 1 &amp;&amp; searchItem != dataList.get(0)) &#123;</span><br><span class="line">              return false;</span><br><span class="line">          &#125;</span><br><span class="line">          if (dataList.size() == 0) &#123;</span><br><span class="line">              return false;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          int medium = dataList.size() / 2; </span><br><span class="line">          </span><br><span class="line">          if (searchItem == dataList.get(medium)) &#123;</span><br><span class="line">              return true;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              //이부분에서 재귀적으로 값을 다시 찾는다. </span><br><span class="line">              if (searchItem &lt; dataList.get(medium)) &#123;</span><br><span class="line">                  return this.searchFunc(new ArrayList&lt;Integer&gt;(dataList.subList(0, medium)), searchItem);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                   return this.searchFunc(new ArrayList&lt;Integer&gt;(dataList.subList(medium, dataList.size())), searchItem);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>ALGORITHM</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>블로그 글쓰기 순서</p>
<p>md 작성</p>
<p>blog/source/_posts 저장</p>
<p>$ hexo generate</p>
<p>$ hexo server</p>
<p>$ hexo deploy</p>
<p>끝..</p>
]]></content>
  </entry>
  <entry>
    <title>blog</title>
    <url>/2021/10/22/blog/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>my first post</title>
    <url>/2021/07/27/my-first-post/</url>
    <content><![CDATA[<p>hello!</p>
<p>This is my new dev blog!</p>
<p>excited!</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>블로그 세팅</title>
    <url>/2021/08/20/test/</url>
    <content><![CDATA[<p> 블로그를 개선하였습니다. </p>
<h1> 블로그 테마를 좀 보기좋은것으로 재선택 했습니다.</h1>



<h2>Table of Contents를 볼 수 있게 되었습니다.</h2>



<h3> 게시물 카테고리와 태그를 생성하였습니다. </h3>



<h4>댓글기능을 추가하였습니다. </h4>



<h5>home도 만들었습니다.</h5>

]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA ArrayList / 클래스 / 인터페이스</title>
    <url>/2021/08/23/20210823-KDT-Worksheet/</url>
    <content><![CDATA[<p>기간: 21.08.23~21.08.26</p>
<p>범위: java 객체지향 프로그래밍 - 객체지향 핵심 01~</p>
<span id="more"></span>

<h2 id="Java-2차원-배열"><a href="#Java-2차원-배열" class="headerlink" title="Java 2차원 배열"></a>Java 2차원 배열</h2><p>다차원 배열: 이차원 이상으로 구현 된 배열</p>
<p>평면(이차열 배열)이나 공간(삼차원 배열)을 활용한 프로그램 구현</p>
<h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">                         ↓열 개수</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">↑자료형  ↑이름         ↑행 개수</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: TwoDimensionTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> MultiDimensionArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TowDimensionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">				</span><br><span class="line">		<span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line">		<span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">		System.out.println(Arrays.deepToString(arr));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;arr[i].length; j++) &#123;</span><br><span class="line">				System.out.println(arr[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.printf(<span class="string">&quot;이중배열 arr의 %d번째 길이는 \t&quot;</span> + arr[i].length, i+<span class="number">1</span>);</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: 출력결과</span></figcaption><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">이중배열 arr의 <span class="number">1</span>번째 길이는 	<span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">이중배열 arr의 <span class="number">2</span>번째 길이는 	<span class="number">4</span></span><br></pre></td></tr></table></figure>



<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>기존 배열의 선언방식은 배열의 길이를 정하고있어 요소 개수가 늘어날 결우 배열을 재할당하고 복사해서 사용해야 하나, java util 패키지에서 제공하는 ArrayList를 사용하면 객체 배열을 효율적으로 관리할 수 있다. </p>
<h3 id="선언"><a href="#선언" class="headerlink" title="선언"></a>선언</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;자료형&gt; 배열명 ;</span><br><span class="line">배열명 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">    </span><br><span class="line">ArrayList&lt;자료형&gt; 배열명 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>



<h3 id="ArrayList의-주요-메서드"><a href="#ArrayList의-주요-메서드" class="headerlink" title="ArrayList의 주요 메서드"></a>ArrayList의 주요 메서드</h3><table>
<thead>
<tr>
<th>메서드</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e)</td>
<td>요소 하나를 배열에 추가합니다. E는 요소의 자료형</td>
</tr>
<tr>
<td>int size()</td>
<td>배열에 추가된 요소 전체 개수를 반환</td>
</tr>
<tr>
<td>E get(int index)</td>
<td>배열의 index 위치에 있는 요소값 반환</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>배열의 index 위치에 있는 요소값을 제거하고 그 값을 반환</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>배열이 비어있는지 확인</td>
</tr>
</tbody></table>
<h3 id="ArrayList-활용-문제"><a href="#ArrayList-활용-문제" class="headerlink" title="ArrayList 활용 문제"></a>ArrayList 활용 문제</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1001학번 Lee와 1002학번 Kim 두 학생이 있습니다. </span><br><span class="line">Lee 학생은 국어와 수학 2과목을 수강하고, Kim학생은 국어, 수학, 영어 3과목을 수강하였습니다.</span><br><span class="line">Lee 학생은 국어 100점, 수학 50점입니다.</span><br><span class="line">Kim 학생은 국어 70점, 수학 85점, 영어 100점입니다.</span><br><span class="line">Student와 Subject 클래스를 만들고 ArrayList를 활요하여 두 학생의 과목 성적과 총점을 출력하세요. </span><br></pre></td></tr></table></figure>

<h3 id="ArrayList-활용-풀이"><a href="#ArrayList-활용-풀이" class="headerlink" title="ArrayList 활용 풀이"></a>ArrayList 활용 풀이</h3><p>학생이 갖고있는 요소는 학번, 이름, 과목{과목명, 성적} 이다.</p>
<p>ArrayList를 이용한다면, 과목 클래스를 별도 생성하여 과목명과 성적을 입출력 하도록 만들고</p>
<p>만들어진 과목을 학생 클래스의 ArrayList에 넣는것으로 구성한다. </p>
<figure class="highlight java"><figcaption><span>: StudentTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayPractice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Student studentLee = <span class="keyword">new</span> Student(<span class="number">1001</span>, <span class="string">&quot;Lee&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		studentLee.addSubject(<span class="string">&quot;국어&quot;</span>, <span class="number">100</span>);</span><br><span class="line">		studentLee.addSubject(<span class="string">&quot;수학&quot;</span>, <span class="number">50</span>);</span><br><span class="line">		</span><br><span class="line">		Student studentKim = <span class="keyword">new</span> Student(<span class="number">1002</span>, <span class="string">&quot;Kim&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		studentKim.addSubject(<span class="string">&quot;국어&quot;</span>, <span class="number">70</span>);</span><br><span class="line">		studentKim.addSubject(<span class="string">&quot;수학&quot;</span>, <span class="number">85</span>);</span><br><span class="line">		studentKim.addSubject(<span class="string">&quot;영어&quot;</span>, <span class="number">100</span>);</span><br><span class="line">		</span><br><span class="line">		studentLee.showInfo();</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		studentKim.showInfo();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Student</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayPractice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//Subject클래스 기반의 Array List인 subjectList를 Student 클래스 생성시 요소로 놓는다.</span></span><br><span class="line">	ArrayList&lt;Subject&gt; subjectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">int</span> studentID ;</span><br><span class="line">	String name ;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//Student 클래스의 생성자</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> studentID, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.studentID = studentID;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//addSubject 메서드 사용시 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSubject</span><span class="params">(String subjectName, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Subject 클래스의 subject 객체를 만들고</span></span><br><span class="line">		Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">		<span class="comment">//과목이름과 점수를 set으로 입력하고</span></span><br><span class="line">		subject.setSubjectName(subjectName);</span><br><span class="line">		subject.setSubjectScore(score);	</span><br><span class="line">		<span class="comment">//만들어진 subject 객체를 ArrayList인 subjecList에 넣는다. </span></span><br><span class="line">		subjectList.add(subject);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (Subject forsubject: subjectList) &#123;</span><br><span class="line">			total += forsubject.getSubjectScore();</span><br><span class="line">			System.out.println(name+<span class="string">&quot;학생의&quot;</span>+forsubject.getSubjectName()+<span class="string">&quot;과목 성적은&quot;</span>+forsubject.getSubjectScore()+<span class="string">&quot;점 입니다.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.printf(<span class="string">&quot;학생 %s의 성적은 총 %d점 입니다. \n&quot;</span>, name, total);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Subject.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//Subject 클래스에 subjectName과 subjectScore 요소를넣고 setter 와 getter를 설정해준다 .</span></span><br><span class="line"><span class="keyword">package</span> ArrayPractice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String subjectName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> subjectScore;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSubjectName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> subjectName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectName</span><span class="params">(String subjectName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.subjectName = subjectName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSubjectScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> subjectScore;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectScore</span><span class="params">(<span class="keyword">int</span> subjectScore)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.subjectScore = subjectScore;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><h3 id="클래스-상속"><a href="#클래스-상속" class="headerlink" title="클래스 상속"></a>클래스 상속</h3><p>새로운 클래스를 정의할 때 구현된 클래스에서 기능, 속성을 확장하여 클래스 구현</p>
<p>이미 구현된 클래스보다 더 쿠체적인 기능을 가진 클래스를 구현해야할 때 기존 클래스를 상속한다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">상속하는 클래스 A(포유류): 상위 클래스, parent class, base class, super class</span><br><span class="line">  - 일반적인 개념과 기능</span><br><span class="line">상속받는 클래스 B(사람): 하위 클래스, child class, derived class, subclass</span><br><span class="line">  - 구체적인 개념과 기능</span><br><span class="line">=&gt; class B extends A &#123;&#125;</span><br><span class="line">//extends 키워드 뒤에는 단 하나의 클래스만 올 수 있음(JAVA)</span><br></pre></td></tr></table></figure>



<h3 id="상속을-이용한-클래스-구현-예"><a href="#상속을-이용한-클래스-구현-예" class="headerlink" title="상속을 이용한 클래스 구현 예"></a>상속을 이용한 클래스 구현 예</h3><h4 id="멤버십-시나리오"><a href="#멤버십-시나리오" class="headerlink" title="멤버십 시나리오"></a>멤버십 시나리오</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">일반고객과 우수고객에 따른 서비스 제공을 한다. 물품 구매시 적용 할인율과 적립 보너스 포인트의 비율이 다르며, 멤버십에 따른 서비스가 제공이 된다. </span><br><span class="line"></span><br><span class="line">고객 속성: 고객 아이디, 이름, 등급, 포인트, 적립비율</span><br><span class="line">  - 일반고객: 1% 포인트 적립</span><br><span class="line">  - 우수고객: 구매시 10% 할인, 5% 포인트 적립, 담당 전문 상담원</span><br></pre></td></tr></table></figure>

<h4 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">일반고객</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><figcaption><span>: CustomerTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extendClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//고객 lee 는 이름이 lee고, 3000원짜리를 구매한다.</span></span><br><span class="line">		Customer lee = <span class="keyword">new</span> Customer(<span class="string">&quot;lee&quot;</span>);</span><br><span class="line">		System.out.println(lee.calPrice(<span class="number">3000</span>));</span><br><span class="line">		System.out.println(lee.showCustomerInfo());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//고객 kim은 이름이 kim이고, Diana라는 상담원이 서비스하며, 3000원짜리를 구매한다. </span></span><br><span class="line">		VipCustomer kim = <span class="keyword">new</span> VipCustomer(<span class="string">&quot;kim&quot;</span>, <span class="string">&quot;Diana&quot;</span>);</span><br><span class="line">		System.out.println(kim.VipCalPrice(<span class="number">3000</span>));</span><br><span class="line">		System.out.println(kim.showCustomerInfo());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Customer.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extendClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">	String customerID;</span><br><span class="line">	String name;</span><br><span class="line">	String grade;</span><br><span class="line">	<span class="keyword">int</span> point;</span><br><span class="line">	<span class="keyword">double</span> bonusPercent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//기본생성자가 없는경우 컴파일러가 알아서 생성자를 만들어 상속하지만</span></span><br><span class="line"><span class="comment">//기본생성자가 다음과 같이 있는경우 하위클래스에서 super();를 사용해서 상위클래스 생성자를 먼저 호출</span></span><br><span class="line"><span class="comment">//예시1) 매개변수가 있는 클래스를 상속</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		grade = <span class="string">&quot;Silver&quot;</span>;</span><br><span class="line">		bonusPercent = <span class="number">0.01</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//예시2) 매개변수가 없는 클래스를 상속</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		grade = <span class="string">&quot;Silver&quot;</span>;</span><br><span class="line">		bonusPercent = <span class="number">0.01</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">		point += price*bonusPercent ;</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">showCustomerInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name +<span class="string">&#x27;,&#x27;</span>+ grade+<span class="string">&#x27;,&#x27;</span> + point;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: VipCustomer.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extendClass;</span><br><span class="line"><span class="comment">//Customer로 부터 상속받은 VipCustomer클래스이다. 클래스의 기본 속성을 받는다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipCustomer</span> <span class="keyword">extends</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="comment">//VipCustomer에게는 추가적인 속성이 부여된다. </span></span><br><span class="line">	String agentID;</span><br><span class="line">	<span class="keyword">double</span> salePercent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//예시1) 매개변수가 있는 클래스를 상속</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">VipCustomer</span><span class="params">(String name, String agent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//상위클래스를 같은 매개변수를 넣어 먼저 호출한다. </span></span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		salePercent = <span class="number">0.1</span>;</span><br><span class="line">		bonusPercent = <span class="number">0.05</span>;</span><br><span class="line">		<span class="keyword">this</span>.agentID = agent;</span><br><span class="line">		grade = <span class="string">&quot;Gold&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//예시2) 매개변수가 없는 클래스를 상속</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VipCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//상위클래스를 먼저 호출한다. </span></span><br><span class="line">		salePercent = <span class="number">0.1</span>;</span><br><span class="line">		bonusPercent = <span class="number">0.05</span>;</span><br><span class="line">		grade = <span class="string">&quot;Gold&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//VipCustomer는 모두 아래 메서드로 계산해야하는데, 메서드 이름이 같으니 자료형에 따라 선택이 된다. </span></span><br><span class="line"><span class="comment">//이름이 같아도 자료형이 int로 입력되어도 아래 메서드로 할수있는 방법을 찾아야한다. </span></span><br><span class="line"><span class="comment">//아래 메서드의 이름을 다른것으로 바꾸는것은 제외한다. </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">VipCalPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">		point += price*bonusPercent;</span><br><span class="line">		price = price*(<span class="number">1</span>-salePercent);</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">showCustomerInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name+<span class="string">&#x27;,&#x27;</span> + grade+<span class="string">&#x27;,&#x27;</span> + point+<span class="string">&#x27;,&#x27;</span> + agentID;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">출력: </span><br><span class="line">3000</span><br><span class="line">lee,Silver,30</span><br><span class="line">2700.0</span><br><span class="line">kim,Gold,150,Diana</span><br></pre></td></tr></table></figure>



<h3 id="형변환"><a href="#형변환" class="headerlink" title="형변환"></a>형변환</h3><p>상위클래스로 변수를 선언하고 하위클래스 생성자로 인스턴스 생성</p>
<p>ex) VIP는 일반 고객이 될수있고 일반 고객은 VIP가 될 수 없다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Customer lee = <span class="keyword">new</span> VipCustomer();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VipCustomer kim = <span class="keyword">new</span> VipCustomer(<span class="string">&quot;kim&quot;</span>, <span class="string">&quot;Diana&quot;</span>);</span><br><span class="line">System.out.println(kim.CalPrice(<span class="number">3000</span>));</span><br><span class="line">System.out.println(kim.showCustomerInfo());</span><br><span class="line"></span><br><span class="line">Customer choi = <span class="keyword">new</span> VipCustomer(<span class="string">&quot;choi&quot;</span>, <span class="string">&quot;danny&quot;</span>);</span><br><span class="line">System.out.println(choi.calPrice(<span class="number">3000</span>));</span><br><span class="line">System.out.println(choi.showCustomerInfo());</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Customer() Call</span><br><span class="line">VipCustomer() Call</span><br><span class="line">2700.0</span><br><span class="line">kim,Gold,150,Diana</span><br><span class="line"></span><br><span class="line">Customer() Call</span><br><span class="line">VipCustomer() Call =&gt; 둘 다 상위 클래스까지 호출되는것을 볼 수 있다. </span><br><span class="line">3000 =&gt; choi는 VipCustomer 메서드 CalPrice를 사용할 수 없다. </span><br><span class="line">choi,Gold,150,danny =&gt; 기본속성으로 갖는 값은 같다. </span><br></pre></td></tr></table></figure>

<p>??? 하위에서 상위로 형변환 한 객체는 하위클래스의 메서드 사용 불가? =&gt; 그렇다 사용불가</p>
<p>요소가 있긴 있는데? =&gt; 생성은 된다 그러나 접근은 불가</p>
<p> <code>상위클래스로 형변환된 객체는 상위 클래스의 변수와 메서드에만 접근 가능하다. </code></p>
<p>상위 클래스 타입의 변수에 하위 클래스 변수 대입</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VipCustomer kim = <span class="keyword">new</span> VipCustomer();</span><br><span class="line">addCustomer(kim);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="오버라이드"><a href="#오버라이드" class="headerlink" title="오버라이드"></a>오버라이드</h3><figure class="highlight java"><figcaption><span>: VipCustomer.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">//애너테이션, 골뱅이 컴파일러에게 오버라이드라고 알림.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">	point += price*bonusPercent;</span><br><span class="line">	price -= price*salePercent;</span><br><span class="line">	<span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Customer choi = <span class="keyword">new</span> VipCustomer(<span class="string">&quot;choi&quot;</span>, <span class="string">&quot;danny&quot;</span>);</span><br><span class="line">System.out.println(choi.calPrice(<span class="number">3000</span>));</span><br><span class="line">System.out.println(choi.showCustomerInfo());</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">결과: </span><br><span class="line">Customer() Call</span><br><span class="line">VipCustomer() Call</span><br><span class="line">2700</span><br><span class="line">choi,Gold,150,danny</span><br></pre></td></tr></table></figure>

<p>형변환 시 변환된 클래스의 변수와 메서드에 접근한다고 했는데, 메서드 오버라이드를 하고나니 그냥 customer인데 일반고객이 Vip가격을 낸다고 나온다 .</p>
<p>인스턴스의 메서드를 호출하는것이라고 하는데!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Customer choi = new VipCustomer();</span><br><span class="line">이 경우 choi의 타입은 Customer이나 인스턴스 타입은 VipCustomer이다. </span><br><span class="line">choi가 calPrice메서드를 호출하는경우 오버라이드된 calPrice가 호출된다. </span><br><span class="line">??? 자료형은 Customer인데 왜 VipCustomer의 calPrice가 호출되는가?</span><br></pre></td></tr></table></figure>

<p><strong>=&gt; 메서드는 인스턴스에 따라 결정된다 =&gt; 가상메서드</strong></p>
<h3 id="가상메서드"><a href="#가상메서드" class="headerlink" title="가상메서드"></a>가상메서드</h3><p><img src="/img/image-20210824165640020.png" alt="image-20210824165640020"></p>
<p>형변환된 객체가 메서드를 호출하는경우 인스턴스에 따라 메서드가 호출된다. </p>
<h2 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h2><p>하나의 코드가 여러 자료형으로 구현되어 실행</p>
<p>같은 코드에서 다른 실행결과</p>
<h3 id="다형성을-사용하는-이유"><a href="#다형성을-사용하는-이유" class="headerlink" title="다형성을 사용하는 이유"></a>다형성을 사용하는 이유</h3><p>하나의 클래스 안에 조건if 문이 계속 추가된다면 코드의 유지보수가 어려워짐</p>
<p>상위클래스에서 공통적인 부분을 제공하고 하위클래스에서 각 클래스에 맞는 기능 구현</p>
<p>여러 클래스를 하나의 타입(상위클래스)로 핸들링 할 수 있음</p>
<h2 id="상속은-언제-사용하나"><a href="#상속은-언제-사용하나" class="headerlink" title="상속은 언제 사용하나?"></a>상속은 언제 사용하나?</h2><h4 id="IS-A-is-as-relationship-inheritance-관계"><a href="#IS-A-is-as-relationship-inheritance-관계" class="headerlink" title="IS-A(is as relationship: inheritance)관계"></a>IS-A(is as relationship: inheritance)관계</h4><p>일반적인 개념과 구체적인 개념과의 관계</p>
<p>상위클래스: 포괄적 개념(예: 직원)</p>
<p>하위클래스: 구체적 개념(예: 부장, 과장, 대리, 사원)</p>
<p>상속은 클래스간의 결합도가 높다. </p>
<p>계층구조가 복잡하면 좋지 않다.</p>
<h4 id="HAS-A관계-composition"><a href="#HAS-A관계-composition" class="headerlink" title="HAS-A관계(composition)"></a>HAS-A관계(composition)</h4><p>클래스가 다른 클래스를 포함하는 관계</p>
<p>코드 재사용의 가장 일반적인 방법</p>
<p>Library를 구현할 때 ArrayList를 생성하여 사용</p>
<h2 id="다운캐스팅과-instanceof"><a href="#다운캐스팅과-instanceof" class="headerlink" title="다운캐스팅과 instanceof"></a>다운캐스팅과 instanceof</h2><p>업캐스팅 된 클래스를 원래의 타입으로 형 변환</p>
<p>Customer -&gt; VipCustomer -&gt; Customer</p>
<h3 id="명시적-vs-묵시적"><a href="#명시적-vs-묵시적" class="headerlink" title="명시적 vs 묵시적"></a>명시적 vs 묵시적</h3><p>상위 클래스에서 하위 클래스로의 형변환은 <strong>명시적</strong>으로 해야 한다.</p>
<p>업캐스팅이나 다운캐스팅한다고 해서 객체의 근본이 변하지 않는다. 객체의 근본은 인스턴스를 따라간다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Customer lee = <span class="keyword">new</span> VipCustomer();   <span class="comment">//묵시적 업캐스팅</span></span><br><span class="line">VipCustomer lee = (VipCustomer)lee; <span class="comment">//명시적 다운캐스팅</span></span><br></pre></td></tr></table></figure>

<h3 id="이-클래스가-그-클래스가-맞느냐-확인-형-체크"><a href="#이-클래스가-그-클래스가-맞느냐-확인-형-체크" class="headerlink" title="이 클래스가 그 클래스가 맞느냐? 확인 / 형 체크"></a>이 클래스가 그 클래스가 맞느냐? 확인 / 형 체크</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (lee <span class="keyword">instanceof</span> GoldCustomer) &#123; &#125;</span><br></pre></td></tr></table></figure>



<h2 id="추상클래스"><a href="#추상클래스" class="headerlink" title="추상클래스"></a>추상클래스</h2><p>구현 코드 없이 메서드의 선언만 있는 추상메서드를 포함한 클래스</p>
<p>abstract 예약어 사용</p>
<p>new 불가</p>
<p>추상 메서드는 하위 클래스가 상속하여 구현한다.</p>
<p>추상 클래스는 상속해주기 위한 클래스이다. </p>
<p>추상클래스에 메서드가 다 구현되어있다면, 상속만을 위한 클래스이다. </p>
<figure class="highlight java"><figcaption><span>: computer</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">typing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;전원을 켭니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;전원을 끕니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Desktop.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Desktop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Desktop Display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">typing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Keyboard Typing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Desktop 전원을 끕니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="추상-클래스-응용"><a href="#추상-클래스-응용" class="headerlink" title="추상 클래스 응용"></a>추상 클래스 응용</h3><h4 id="프레임워크의-도입"><a href="#프레임워크의-도입" class="headerlink" title="프레임워크의 도입"></a>프레임워크의 도입</h4><p>정해진 흐름을 응용한다.</p>
<p>템플릿 메서드 패턴: 이미 시나리오는 다 정해져있다. </p>
<p>템플릿: 틀을 가지고 있다는 뜻</p>
<p>정해진 흐름은 변하면 안되니 final 선언</p>
<p>클래스에 final 이 들어가면 상속할 수 없다. </p>
<p>빈 구멍은 하위클래스로 상속시켜 구현하도록 하기위해 abstrac으로 만든다. </p>
<h4 id="final-예약어"><a href="#final-예약어" class="headerlink" title="final 예약어"></a>final 예약어</h4><p>final 변수: 변경할 수 없다.</p>
<p>final 메서드:  하위 클래스에서 재정의 할 수 없다. </p>
<p>final 클래스:  상속할 수 없다 .</p>
<h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><p>연결점과도 같으며, 기능의 명시적 선언을 한다. </p>
<p>클라이언트 코드와의 약속이다. </p>
<p>public abstract 자동 추가, </p>
<p>모든 변수와  메서드가 추상 메서드로 선언됨</p>
<p>모든 변수는 상수로 변환됨</p>
<p>구현상속과 타입상속?</p>
<p>클래스상속: 여러개의 클래스를 다중상속 할 수 없음(모호성 발생)</p>
<p>인터페이스타입: 구현코드가 없어서 여러개 타입 내포 가능(모호성 발생 x)</p>
<p>어떤 객체가 하나의 인터페이스 타입이라는것은 인터페이스가 제공하는 모든 메서드를 구현했다는 의미</p>
<h4 id="인터페이스와-추상클래스-차이점"><a href="#인터페이스와-추상클래스-차이점" class="headerlink" title="인터페이스와 추상클래스 차이점"></a>인터페이스와 추상클래스 차이점</h4><p>인터페이스는 포함한 메서드가 모두 추상메서드이다.</p>
<p>=&gt; 전체적인 규칙이나 틀을 정하는 설계도</p>
<p>추상클래스는 추상메서드와 일반메서드가 혼재되어있다. </p>
<p>=&gt; 상속을 받아서 기능을 확장하는 목적</p>
<h4 id="인터페이스-구현과-형변환"><a href="#인터페이스-구현과-형변환" class="headerlink" title="인터페이스 구현과 형변환"></a>인터페이스 구현과 형변환</h4><p>다음은 Calc 인터페이스에서 제공하는 추상 메서드를 따라 Calculator 클래스와 그것을 상속받은 CompCalculator를 나타낸다. </p>
<p>CompCalculator는 결과적으로 Calc에 포함된 모든 추상 메서드가 구현되어있고, </p>
<p>Calculator는 add와 substract밖에 사용하지 못한다. </p>
<figure class="highlight java"><figcaption><span>: Calc.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//인터페이스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calc</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">int</span> ERROR = -<span class="number">999999999</span>;</span><br><span class="line"><span class="comment">//추상메서드</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">( <span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">substract</span><span class="params">( <span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">times</span><span class="params">( <span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">( <span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Calculator.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//추상클래스(아직 times, divide가 추상임)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Calc</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">substract</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: CompCalculator.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//그냥 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">times</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num2 == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1/num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;모두 구현했습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Caltest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//cal1 은 CompCalculator 클래스라 전부 사용가능하다.</span></span><br><span class="line">        CompCalculator cal1 = <span class="keyword">new</span> CompCalculator();</span><br><span class="line">        System.out.println(cal1.times(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//cal2는 Calc 타입이라 인터페이스에 추상메소드밖에없어 사용할 메소드가 없다.</span></span><br><span class="line">        Calc cal2 = <span class="keyword">new</span> CompCalculator();</span><br><span class="line"><span class="comment">//cal2를 downcal2로 CompCalculator 다운캐스팅하면 다시 모든 메소드를 사용할 수 있다.</span></span><br><span class="line">        CompCalculator downcal2 = (CompCalculator) cal2;</span><br><span class="line">        <span class="keyword">int</span> result = downcal2.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="형변환↑"><a href="#형변환↑" class="headerlink" title="형변환↑"></a>형변환↑</h4><p>Calc cal2 = new CompCalculator();</p>
<p>상속에서의 형변환과 동일한 의미</p>
<p>클래스 상속과 달리 구현 코드가 없으므로 여러 인터페이스를 구현할 수 있음</p>
<p> -&gt; 클래스는 extends를 사용하는데, 인터페이스는 implements를 사용한다. 여러개가 와도 가능하다.</p>
<p><strong>형변환되는 경우 인터페이스에 선언된 메서드만 사용가능함</strong></p>
<p><img src="/img/image-20210825200350213.png" alt="image-20210825200350213"></p>
<h3 id="추상-메서드의-디폴드-메서드"><a href="#추상-메서드의-디폴드-메서드" class="headerlink" title="추상 메서드의 디폴드 메서드"></a>추상 메서드의 디폴드 메서드</h3><p>인터페이스를 implements 하는 클래스에서 한 메서드를 중복해서 구현해야하는 경우가 발생하여</p>
<p>자바8 이후부터는 디폴트 메서드라는 것을 제공한다.(구현코드)</p>
<h4 id="디폴트메서드"><a href="#디폴트메서드" class="headerlink" title="디폴트메서드"></a>디폴트메서드</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//defalut 키워드 사용</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;디폴트메서드&quot;</span>);</span><br><span class="line">	myMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>디폴트 메서드는 연결된 클래스에서 재정의 할 수 있다. (인스턴스 생성 후)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;재정의한 default 메서드&quot;</span>);</span><br><span class="line">    <span class="comment">//super.description();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="정적-메서드-Static"><a href="#정적-메서드-Static" class="headerlink" title="정적 메서드 (Static)"></a>정적 메서드 (Static)</h4><p>인스턴스 생성과 상관 없이 인터페이스 타입으로 사용할 수 있는 메서드</p>
<ul>
<li>디폴트메서드와의 차이 : 인스턴스 생성과 상관없이 사용</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">total</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i: arr) &#123;</span><br><span class="line">        total += i;</span><br><span class="line">    &#125;</span><br><span class="line">    mystaticMethod();</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="private-메서드-자바-9-이후"><a href="#private-메서드-자바-9-이후" class="headerlink" title="private 메서드(자바 9 이후)"></a>private 메서드(자바 9 이후)</h4><p>클래스에서 사용, 재정의 할 수 없고, 인터페이스 내부에서만 사용하기위한 메서드</p>
<p>디폴트 메서드나 스태틱 메서드에서 사용</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;프라이빗 메서드&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mystaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;프라이빗 스태틱 메서드&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="여러-인터페이스-구현"><a href="#여러-인터페이스-구현" class="headerlink" title="여러 인터페이스 구현"></a>여러 인터페이스 구현</h3><p>인터페이스는 구현코드가 없으므로 하나의 클래스가 여러 인터페이스를 구현할 수 있다.</p>
<p>디폴트 메서드가 중복되는경우 구현하는 클래스에서 재정의한다. (모호하니까)</p>
<p>여러 인터페이스를 구현한 클래스는 인터페이스 타입으로 형변환 하는경우 인터페이스에 선언된 메서드만 사용</p>
<p> =&gt; A 인터페이스와 B 인터페이스를 구현하였을경우, A로 형변환하면 A의 메서드만 사용한다.</p>
<h4 id="Diamond-Problem-자바-클래스-다중상속이-안되는-이유"><a href="#Diamond-Problem-자바-클래스-다중상속이-안되는-이유" class="headerlink" title="Diamond Problem (자바 클래스 다중상속이 안되는 이유)"></a>Diamond Problem (자바 클래스 다중상속이 안되는 이유)</h4><p><img src="https://cdn.journaldev.com/wp-content/uploads/2013/07/diamond-problem-multiple-inheritance.png" alt="Multiple Inheritance in Java - JournalDev"></p>
<p>SuperClass 의 변수 a 가 클래스 A와 B에서 각각 재정의 되면 C가 상속을 어떤것을 받아야할지 정할수 없는 문제</p>
<p>모호성을 없애버렸다.</p>
<h3 id="인터페이스-상속"><a href="#인터페이스-상속" class="headerlink" title="인터페이스 상속"></a>인터페이스 상속</h3><p>인터페이스 A 와 B를 상속받은 인터페이스 C라면</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>인터페이스 C를 implements한 클래스 M이라면</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>A와 B와 C의 메서드를 모두 구현하여야 한다. </p>
<h3 id="클래스-상속과-인터페이스-구현-함께-쓰기"><a href="#클래스-상속과-인터페이스-구현-함께-쓰기" class="headerlink" title="클래스 상속과 인터페이스 구현 함께 쓰기"></a>클래스 상속과 인터페이스 구현 함께 쓰기</h3><p><img src="/img/image-20210826174407877.png" alt="image-20210826174407877"></p>
<p> 책장 Shelf는 Array를 제공하고 책이 몇권 있는지를 알려줄 수 있도록 한다. </p>
<p>Queue기능은 책을 맨 뒤로 넣고, 맨 앞에서 뺄 수 있도록 한다. </p>
<p>Shelf모양과 Queue기능을 갖춘 BookShelf 인 num1shelf에 책을 넣고 어떤책이 몇권있는지 구현한다.</p>
<figure class="highlight java"><figcaption><span>: Shelf.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shelf</span> </span>&#123;</span><br><span class="line"><span class="comment">//같은 패키지는 사용가능, 다른패키지면 상속해야 사용가능하도록 protected 배열</span></span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;String&gt; shelf;</span><br><span class="line"><span class="comment">//생성자가 호출될 때 멤머변수 shelf를 초기화 하는것이 좋다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelf ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelf.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: Queue.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line"><span class="comment">//인터페이스니까 아래 메서드 구현 안한다.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enQueue</span> <span class="params">(String title)</span> </span>;</span><br><span class="line">    <span class="function">String <span class="title">deQueue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: BookShelf.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">extends</span> <span class="title">Shelf</span> <span class="keyword">implements</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        shelf.add(title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelf.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: BookShelfTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch15_Interface_Casting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf num1shelf = <span class="keyword">new</span> BookShelf();</span><br><span class="line"></span><br><span class="line">        num1shelf.enQueue(<span class="string">&quot;재밌는책&quot;</span>);</span><br><span class="line">        num1shelf.enQueue(<span class="string">&quot;삼국지&quot;</span>);</span><br><span class="line">        num1shelf.enQueue(<span class="string">&quot;탐험일지&quot;</span>);</span><br><span class="line">        num1shelf.enQueue(<span class="string">&quot;초한지&quot;</span>);</span><br><span class="line">        num1shelf.enQueue(<span class="string">&quot;만화책&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(num1shelf.getShelf());</span><br><span class="line">        System.out.println(num1shelf.getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT_WORKSHEET</tag>
      </tags>
  </entry>
</search>
