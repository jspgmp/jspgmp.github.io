<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>첫 HTML 조우</title>
    <url>/2021/07/27/2021-07-23-htmlfirst/</url>
    <content><![CDATA[<h1 id="HTML-CSS-처음-접하기"><a href="#HTML-CSS-처음-접하기" class="headerlink" title="HTML CSS 처음 접하기"></a>HTML CSS 처음 접하기</h1><p>현재 블로그 꼴이 조금 흉측하지만 다듬어나갈 예정입니다~</p>
<p>글 목록도 좀 만들고요~</p>
<span id="more"></span>

<p>HTML과 CSS에 대한 첫 내용은 샘플을 통해 정리를 해봤습니다~</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GitHub:Where the world builds software<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./main.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-left&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://heropcode.github.io/GitHub-Responsive/img/logo.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;GitHub Logo&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span>                </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span>&gt;</span>Why GitHub?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/team&quot;</span>&gt;</span>Team<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/enterprise&quot;</span>&gt;</span>Enterprise<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span>&gt;</span>Explore<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/marketplce&quot;</span>&gt;</span>Marketplace<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-left&quot;</span>&gt;</span>Pricing<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;input-menu&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search GitHub&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- lavel 로 고치면 sign in sign up 버튼이 줄바꿈됌! --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-signin&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;container-menu-signup&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/signin&quot;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#040d21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1248px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">56px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-menu-left</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-decoration-line</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-menu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-menu-signin</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">68px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration-line</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-menu-signup</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration-line</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>(JavaScript) 배열에 쓰이는 함수</title>
    <url>/2021/07/30/2021-07-30_Javascript_function/</url>
    <content><![CDATA[<p>강의 2주차가 거의 끝이 났습니다. </p>
<p>지금 진도로는 HTML, CSS, JS 기초 단계를 공부했으며, C언어도 살짝 공부하였습니다. </p>
<p>먼저 자바스크립트 함수부터 정리를 해볼까 합니다. </p>
<span id="more"></span>

<p>21.07.26 내용</p>
<ol>
<li><strong>forEach 과 화살표 함수</strong></li>
</ol>
<p>forEach는 배열에 포함된 각각의 인자에 대해서 가해줄 먼가를 정의하는 것입니다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="params">number</span>=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(number);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>array 배열의 인자에 대해서 각각 number 함수를 대입하라는데</p>
<p>=&gt; 는 함수를 뜻하며 이렇게 표현합니다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">number =&gt; &#123;<span class="built_in">console</span>.log(number)&#125;; </span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;<span class="built_in">console</span>.log(number);&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>map 함수</strong></li>
</ol>
<p> forEach와 map 의 차이는 리턴하냐 마냐입니다. </p>
<p>가. forEach를 사용한 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squared =[];</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  spquare.push(n*n); </span><br><span class="line"></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(squared);</span><br></pre></td></tr></table></figure>



<p>나. map을 사용한 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squared = array.map(<span class="function"><span class="params">n</span>=&gt;</span>n*n); <span class="comment">//n을 받아와서 n x n을 반환한다!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(squared);</span><br></pre></td></tr></table></figure>

<p>map 대신에 그냥 forEach를 써도 될것같지만, forEach를 사용하면 undefined 로 나옵니다. </p>
<p>map은 리턴값을 저장하지만 forEach는 저장하지 않아요. </p>
<p>forEach 와 map 둘 다 배열[]에서만 사용 가능합니다. </p>
<ol start="3">
<li><strong>기타</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [ &#123;<span class="attr">id</span> : <span class="number">1</span>, <span class="attr">text</span> : <span class="string">&#x27;빨래&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,  </span><br><span class="line">                &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;숙제&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,  </span><br><span class="line">                &#123;<span class="attr">id</span> : <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;개밥주기&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;];</span><br><span class="line">array라는 배열에서 : 전후로 있는것을 속성, :앞에것을 key, :뒤에것을 Value라고 합니다. </span><br></pre></td></tr></table></figure>
<p>가. indexOf</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> find = array.indexOf(<span class="number">1</span>); <span class="comment">//1의 위치(인덱스)를 찾기</span></span><br></pre></td></tr></table></figure>
<p>나. findIndex</p>
<p> 특정 key 값을 갖고있는 배열의 <strong>위치</strong>를 찾자마자 반환하고 종료됩니다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> find = array.indexOf(<span class="function"><span class="params">a</span>=&gt;</span>a.key === <span class="number">1</span>)   </span><br></pre></td></tr></table></figure>

<p>다. filter </p>
<p>특정 key 값을 갖고있는 <strong>배열</strong>을 전부 새로 담아서 반환합니다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> find = array.filter(<span class="function"><span class="params">a</span>=&gt;</span>a.key === <span class="number">1</span>)   </span><br><span class="line">[ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;빨래&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;개밥주기&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125; ]</span><br></pre></td></tr></table></figure>

<p>라. splice, shift, pop, unshift(n) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push: 값을 배열에 집어넣습니다.</span><br><span class="line">splice: 찾은값으로부터 뒤로 n개 삭제 후 기존 배열을 수정합니다. </span><br><span class="line">slice: 찾은값을 삭제하고 기존 배열 수정하지 않습니다. </span><br><span class="line">shift: 맨앞에있는원소를 하나씩 밖으로 꺼냄, 기존 배열을 수정합니다. </span><br><span class="line">pop: 맨뒤에있는 원소를 하나씩 밖으로 뺌, 기존 배열을 수정합니다. </span><br><span class="line">unshift(n) : 맨앞에 n원소를 추가합니다.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 사용하기</title>
    <url>/2021/07/27/2021-07-23-github-manual/</url>
    <content><![CDATA[<p>이번 내용은 깃허브 사용과 블로그 준비에 관한 내용입니다. </p>
<p>저는 이번에 깃허브라는것을 처음 사용해봤는데요, git-bash를 이용해서 하는게 일반 블로그보다 까다롭게 느껴지지만 익숙해지기 위해서 계속 사용하려고 해요~</p>
<span id="more"></span>

<h1 id="사용-준비하기"><a href="#사용-준비하기" class="headerlink" title="사용 준비하기"></a>사용 준비하기</h1><ol>
<li>가입 및 설치하기<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Github.com 에 가입</span><br><span class="line">git-scm.com 에서 다운로드 및 설치</span><br><span class="line">git help -a 와 git config로 각종 명령어 확인</span><br></pre></td></tr></table></figure></li>
<li>git bash 초기 세팅<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;닉네임&quot;</span><br><span class="line">git config --global user.email &quot;abc@abc.com&quot;</span><br><span class="line">git config --global core.editor &quot;vim&quot;</span><br><span class="line">git config --global core.pager &quot;cat&quot;</span><br><span class="line">git config --global init.defaultbranch &quot;main&quot;</span><br></pre></td></tr></table></figure></li>
<li>cmd 기본 명령어(git bash에서 사용)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help 로 각종 명령어 확인 가능</span><br><span class="line">touch 파일명.확장자 = 파일 생성</span><br><span class="line">ls = 현재 폴더에 있는 파일 확인</span><br><span class="line">mv 파일명.확장자 폴더명 = 파일 옮기기</span><br><span class="line">cd 디렉토리 변경</span><br><span class="line">- cd ../ = 상위 폴더로 변경</span><br><span class="line">- cd = 최상위 폴더로 변경</span><br><span class="line">- cd 주소 = 주소 폴더로 변경</span><br><span class="line">rm 파일명.확장자 = 파일 지우기</span><br><span class="line">* = asterisk</span><br><span class="line">예) rm **.md = md 파일 다 지우기</span><br></pre></td></tr></table></figure></li>
<li>vim 기본 명령어<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi 파일명.확장자 사용하여 진입</span><br><span class="line">Normal mode: 텍스트 편집 시 또는 ESC를 눌렀을 때</span><br><span class="line">Input mode: Normal mode에서 a, i, o등을 눌렀을 때, 텍스트 입력 가능</span><br><span class="line">Command mode: 저장 또는 나가기 등을 선택, 쉬프트+:으로 진입</span><br><span class="line"> - :w 저장, :wq 저장 후 종료</span><br><span class="line"> - :q! 저장하지 않고 강제종료</span><br></pre></td></tr></table></figure></li>
<li>git 연결하기 (Local과 remote 연결)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github에서 원하는 repo 생성 후 code 란에서 url을 복사한다.</span><br><span class="line">git-bash를 이용해 원하는 디렉토리에 위치 후 </span><br><span class="line">git clone url 을 입력하여 연결시킨다.</span><br></pre></td></tr></table></figure>



<h1 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h1><p>편하자고 아무데나 수정한 파일을 갖다붙이면 버전관리가 참으로 힘들겠습니다. </p>
<p>버전관리 공간은 크게 </p>
<p>Local - Remote 두곳으로 나뉘어집니다. </p>
<p>Local 에서 Branch를 갈라 수정하고 git에 올리고 그에대한 설명인 commit을 완료하고나면</p>
<p>온라인 Github로 Push 하는 것입니다. </p>
<ol>
<li>Branch  생성 및 전환</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">다른사람에게 코드 리뷰를 요청할 계획이라면 이 단계를 거쳐야 합니다.</span><br><span class="line">git-bash에서 </span><br><span class="line">git branch 로 현재 branch를 확인해주신 뒤에</span><br><span class="line">git branch &lt;새로운 branch이름&gt; 으로 하나더 만들어주시고</span><br><span class="line">git checkout &lt;새로운 branch이름&gt; 해주시면</span><br><span class="line">branch 가 바뀌게 됩니다.</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>수정 내용 적용하기</li>
</ol>
<p>변경한 사항은 <strong>BLOB</strong></p>
<p>변경사항에 대한 정보는 <strong>TREE</strong></p>
<p>스냅샷을 찍는순간 생성되는것 <strong>COMMIT</strong></p>
<p>이라고 하는데 제가 이해하기로는 <strong>COMMIT</strong>은 수정사항에 대한 설명같아요!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">올리기</span><br><span class="line">1. Working directory: 작성한 코드를 저장</span><br><span class="line">&lt;파일 열기 및 수정은 vi 파일명.확장자 통해서 가능!!&gt;</span><br><span class="line"> ↓+git add 파일명.확장자 (또는 새로운 버전으로 교체)</span><br><span class="line"> </span><br><span class="line">2. Staging area: 작성 또는 변경상태가 저장</span><br><span class="line"> ↓+git commit (수정에 대한 설명)</span><br><span class="line"> </span><br><span class="line">3. Local repo: 변경한 건에 대한 commit을 달아 저장된 상태</span><br><span class="line"> ↓+git push </span><br><span class="line"> </span><br><span class="line">4. Remote repo: github로 업로드된 상태</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>repo 가져오기</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin main + git merge FETCH_HEAD</span><br><span class="line">또는 git pull origin main</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Branch 에서 변경한 내용 코드리뷰 요청하기</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo 에서 상대방 초대</span><br><span class="line">pull request 하기</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>Branch 내용 main 에 합치기<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout main = main으로 변경</span><br><span class="line">git merge secondary = secondary 브랜치를 main으로 합병</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>(자바스크립트) 가격 한도 최대 비싼 아이템 추천!</title>
    <url>/2021/08/06/2021-08-06-Javascript_getItem/</url>
    <content><![CDATA[<p>드디어 포스트다운 포스트를 써볼까 합니다.</p>
<p>가격을 입력하면 상품 리스트에서 살수있는 가장 비싼 상품의 종류와 이름을 알려주는 스크립트입니다.</p>
<span id="more"></span>

<h1>상품 데이터</h1>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;밀크초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;다크초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;카라멜초콜렛&#x27;</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;아이스크림&#x27;</span>, <span class="attr">price</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;컵라면&#x27;</span>, <span class="attr">price</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;볼펜&#x27;</span>, <span class="attr">price</span>: <span class="number">2500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;연필&#x27;</span>, <span class="attr">price</span>: <span class="number">2500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;아메리카노&#x27;</span>, <span class="attr">price</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;과자&#x27;</span>, <span class="attr">price</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;탄산수&#x27;</span>, <span class="attr">price</span>: <span class="number">1200</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;떡볶이&#x27;</span>, <span class="attr">price</span>: <span class="number">3500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;노트&#x27;</span>, <span class="attr">price</span>: <span class="number">1500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;껌&#x27;</span>, <span class="attr">price</span>: <span class="number">500</span> &#125;</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure>



<h2>값 구하기</h2>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> line = prompt(<span class="string">&#x27;최대 금액을 입력해주세요.&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> amount = <span class="built_in">parseInt</span>(line);</span><br><span class="line"><span class="keyword">const</span> item = getItemByAmount(data, amount);</span><br><span class="line"><span class="keyword">const</span> msg = item ? <span class="string">`<span class="subst">$&#123;amount&#125;</span>원으로 살 수 있는 가장 비싼 상품은 [<span class="subst">$&#123;item.name&#125;</span>]이고, 가격은 <span class="subst">$&#123;item.price&#125;</span>원입니다.`</span> : <span class="string">&#x27;살 수 있는 상품이 없습니다.&#x27;</span>;</span><br><span class="line">alert(msg);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getItemByAmount</span>(<span class="params">data, amount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(amount) == <span class="literal">false</span>) &#123; <span class="comment">//isNsN으로 입력값이 숫자인지 판별</span></span><br><span class="line">        <span class="keyword">const</span> buyable = data.filter(<span class="function"><span class="params">a</span>=&gt;</span> a.price &lt;= amount); <span class="comment">//가격이 입력값 이하인것만 추리기</span></span><br><span class="line">        <span class="keyword">const</span> sorted = buyable.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123; <span class="comment">//추린 리스트를 가격 오름차순으로 정리하기</span></span><br><span class="line">        <span class="keyword">return</span>  a.price - b.price ;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> samePrice = sorted.filter(<span class="function"><span class="params">a</span>=&gt;</span>a.price == sorted[sorted.length-<span class="number">1</span>].price); </span><br><span class="line">        <span class="keyword">if</span> (samePrice.length &gt; <span class="number">1</span>) &#123; <span class="comment">//같은가격의 상품이 두개이상 있을때 전부 여기 집어넣는다.</span></span><br><span class="line">        <span class="keyword">const</span> tempNames = []; <span class="comment">//임시로 사용할 변수를 놓고</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> samePrice) &#123;/samePrice리스트에서 모든 name만 뽑아 tempNames로 집어넣는다.</span><br><span class="line">            tempNames.push(samePrice[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> finalList =&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">price</span>:<span class="string">&#x27;&#x27;</span>&#125;;<span class="comment">//이름을 전부 합친 것과 가격을 담을 배열 준비</span></span><br><span class="line">        finalList.name = tempNames; <span class="comment">//final List 에 name에 준비한 이름을 전부 넣는다.</span></span><br><span class="line">        finalList.price = sorted[sorted.length-<span class="number">1</span>].price; <span class="comment">//finalList에 가격을 하나만 넣는다.</span></span><br><span class="line">        <span class="keyword">return</span> finalList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sorted[sorted.length-<span class="number">1</span>];</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;    </span><br><span class="line">        alert(<span class="string">&#x27;숫자만 입력하세요&#x27;</span>);</span><br><span class="line">        <span class="built_in">window</span>.alert = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">window</span>.location.reload();<span class="comment">//여기를 지나고 최소금액 이하를 입력하면 다시 창이 열리지 않음</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>가독성이 매우 떨어지네요!</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>(자바스크립트) 10보다 큰 숫자 구하기</title>
    <url>/2021/08/06/2021-08-06-count-more-than-ten/</url>
    <content><![CDATA[<p>10보다 큰 숫자 갯수 구하기</p>
<span id="more"></span>

<h1> 조건</h1>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = countBiggerThanTen([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBiggerThanTen</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counts = <span class="number">0</span> ;</span><br><span class="line">    numbers.forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            counts += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>삼항연산자를 쓴다면!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBiggerThenTen</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span></span><br><span class="line">    numbers.forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">		cnt += n&gt;<span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//삼항연산자, 조건문이 참이면 1 더하고 아니면 0 더함</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>reduce 사용한다면?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBiggerThenTen</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = numbers.reduce(<span class="function">(<span class="params">accumulator, value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accumulator += value &gt; <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>(파이썬) 파이썬 기초 Openpyxl이용해서 엑셀파일 입출력하기</title>
    <url>/2021/08/06/2021-08-06-python_excel_io/</url>
    <content><![CDATA[<p>   파이썬을 이용해 크롤링한 자료를 엑셀로 저장하는 코드입니다.</p>
<span id="more"></span>

<ol>
<li><p>파이썬의 자료형</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">숫자형 = <span class="number">6</span></span><br><span class="line">문자형 = <span class="string">&quot;&quot;</span></span><br><span class="line">리스트 = [], 리스트 수정 가능~</span><br><span class="line">튜플 = (), 튜플은 수정 불가~</span><br><span class="line">딕셔너리 = &#123;&#125;</span><br><span class="line">참거짓 = <span class="literal">True</span>, <span class="literal">False</span></span><br></pre></td></tr></table></figure></li>
<li><p>엑셀파일 읽어오기</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook <span class="comment">#엑셀 저장 함수 불러오기</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#엑셀 데이터를 불러오기</span></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;total.xlsx&#x27;</span>) <span class="comment">#, read_only=True) 읽기모드로, 파일이 커도 읽기 가능</span></span><br><span class="line">data = wb.active \<span class="comment">#활성화된 탭을 사용한다!</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment">#A1셀 하나만 출력하기</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;A1&#x27;</span>].value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#2행 데이터 출력하기</span></span><br><span class="line">row = data[<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> row :</span><br><span class="line">  <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#1~2행 데이터 출력하기</span></span><br><span class="line">rows = data[<span class="string">&#x27;1:2&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">  <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#A열 데이터 출력하기</span></span><br><span class="line">col = data[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> col :</span><br><span class="line">  <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#A~B행 데이터 출력하기</span></span><br><span class="line">cols = data[<span class="string">&#x27;A:B&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">  <span class="keyword">for</span> cell <span class="keyword">in</span> col:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br><span class="line"> </span><br><span class="line">\<span class="comment">#A1 부터 E31까지의 영역 출력하기</span></span><br><span class="line">area = data[<span class="string">&#x27;A1:E31&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> area:</span><br><span class="line">  <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br></pre></td></tr></table></figure></li>
<li><p>엑셀파일에 쓰기</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()<span class="comment">#괄호를 여닫아 클래스 변수 생성</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ws = wb.active #처음에 생성된 시트 활용</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ws = wb.create_sheet(&#x27;sheet_test2&#x27;)#시트 생성 후 시트 반환</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">ws.append([<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Score&#x27;</span>, <span class="string">&#x27;feel&#x27;</span>])<span class="comment"># 1열은 number, 2열은 name으로 넣는다.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  ws.append([i, <span class="built_in">str</span>(i) + <span class="string">&#x27; data&#x27;</span>, <span class="built_in">str</span>(i*<span class="number">10</span>) + <span class="string">&#x27; 점&#x27;</span>, <span class="string">&#x27;ㅎ&#x27;</span>])</span><br><span class="line">  <span class="comment">#1열에는 i를, 2열에는 i+ data, 3열에는 i*10점, 4열에는 ㅎ을 넣는다.</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">\<span class="comment">#특정 셀에 데이터 추가하려면</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ws[&#x27;A1&#x27;] = &#x27;문자입력&#x27;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ws[&#x27;B1&#x27;] = &#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;save_test.xlsx&#x27;</span>) <span class="comment">#save 내장함수 사용</span></span><br></pre></td></tr></table></figure></li>
<li><p>엑셀파일 큰 파일<br>```python<br>#load_workbook으로 엑셀 내용을 가져오게되면, 느리고 큰 파일은 가져오지 못할 수 있다.<br>from openpyxl import load_workbook</p>
</li>
</ol>
<p>wb = load_workbook(‘total.xlsx’, read_only=True)#읽기 전용으로 읽어온다.<br>data = wb.active#활성화탭을 받아서 data삼는다.</p>
<p>for row in data.iter_rows() : #전체 행을 받아 가로 순으로 데이터를 불러오려면 ()빼먹지않기<br>    #iter_rows() 는 read only 옵션으로 불러올때 같이 쓰는게 좋다.<br>    #iter_rows()의 인자값으로는 최소 최대 열과 행, values only : bool = … 이 있다.<br>    for cell in row :<br>        print(cell.value)</p>
<p>#행단위로 읽는것은 읽기전용으로 잘 되나<br>#열단위로 읽는것은 읽기전용으로 안된다.<br>#정리하자면 큰 파일을 읽을때는 읽기전용으로 읽어 가로순으로 불러들어야한다.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>C언어 기초</title>
    <url>/2021/08/06/2021-08-06-C-basic/</url>
    <content><![CDATA[<p>C언어는 배우고있긴 한데 이해하는데 상당히 기력을 소하더라구요. </p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C언어 다룰때 출력타입 지정 필수</span><br><span class="line">%d: <span class="number">10</span>진수(정수형)</span><br><span class="line">%f: 실수형</span><br><span class="line">%e: 지수형</span><br><span class="line">%o: <span class="number">8</span>진수</span><br><span class="line">%x: <span class="number">16</span>진수</span><br><span class="line">%u: 부호없는 <span class="number">10</span>진수</span><br><span class="line">%g: 실수형 자동출력</span><br><span class="line">%p: 포인터의 주소</span><br><span class="line">%c: 하나의 문자로 출력</span><br><span class="line">%s: 문자열</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span>* pi; <span class="comment">//Pointer Integer</span></span><br><span class="line">	pi = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">// int 사이즈를 메모리에 할당한 다음에 </span></span><br><span class="line">	<span class="comment">//int*으로 (int*)으로 형변환을 하여 반환(위치), pi변수가 해당 위치를 기억할 수 있도록 한다.</span></span><br><span class="line">	<span class="keyword">if</span> (pi == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;동적 메모리 할당에 실패하였습니다.&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//본 프로그램 종료의 의미</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//할당받은 메모리 사용</span></span><br><span class="line">	*pi = <span class="number">100</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *pi); </span><br><span class="line">	<span class="comment">//동적메모리 사용이 끝나면 메모리를 시스템에 반환하여 안정성 효율성 제고</span></span><br><span class="line">	<span class="built_in">free</span>(pi);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span>* pc = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	pc = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">//char 100개만큼의 공간 할당(100개문자)</span></span><br><span class="line">	<span class="comment">//100개만큼의 공간은 배열과도 비슷하다.</span></span><br><span class="line">	<span class="keyword">if</span> (pc == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;동적 메모리 할당에 실패했습니다.\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		*(pc + i) = <span class="string">&#x27;a&#x27;</span> + i; <span class="comment">//a는 ascii코드에서 97번째에 해당 a+1 은 ascii코드로 98이어서 b가됌</span></span><br><span class="line">	&#125; <span class="comment">//이 안에서 마지막 i는 26이 된다.</span></span><br><span class="line">	*(pc + i) = <span class="number">0</span>; <span class="comment">//null은 아스키코드에서 0을 의미</span></span><br><span class="line">	<span class="comment">//문자열 배열에서 마지막 메모리 영역에 null값 넣어 종료를 인식</span></span><br><span class="line">	<span class="comment">//여기까지 하나의 문자열 생성</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pc);<span class="comment">//문자열의 자료형식은 %s이다.</span></span><br><span class="line">	<span class="built_in">free</span>(pc);<span class="comment">//할당 해제</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="comment">//typpedef 쓸 경우의 예제 Student라고 호출이 가능</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, sum = <span class="number">0</span>;	</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//fp에서 지정한 파일로부터 하나의 정수형 변수를 읽어들임</span></span><br><span class="line">	Student* students = (Student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student) * n);</span><br><span class="line">	<span class="comment">//students라는 포인터는 n개의 Student 형식을 가진 동적메모리 공간을 할당</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s %d&quot;</span>, &amp;((students + i)-&gt;name), &amp;((students + i)-&gt;score));</span><br><span class="line">		<span class="comment">//fp를 이용해서 students 배열의 i번째 인덱스에 접근해서 하나의 문자열과 하나의 정수형을</span></span><br><span class="line">		<span class="comment">//입력받는다, name값과 score 값에 값을 할당받는다.</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;이름: %s, 성적: %d&quot;</span>,  (students + i)-&gt;name, (students + i)-&gt;score ) ;</span><br><span class="line">		<span class="comment">//입력받은값을 문자형과 정수형대로 출력해준다.</span></span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">전처리기 <span class="meta">#<span class="meta-keyword">include</span>, 만든파일은 #<span class="meta-keyword">include</span> “파일명”</span></span><br><span class="line">상수 <span class="meta">#<span class="meta-keyword">define</span> PI 3.14 매크로 #<span class="meta-keyword">define</span> (x) (x*x), 입력타입 #<span class="meta-keyword">define</span> ll longlong / ld long double</span></span><br><span class="line">같은 헤더파일을 여러 개 불러왔다면 <span class="meta">#<span class="meta-keyword">ifndef</span> 아래에 같은이름으로 <span class="meta-keyword">define</span> #<span class="meta-keyword">endif</span></span></span><br><span class="line">파일을 여러개로 분할해서 깔끔하게 작성할것</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NOWARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//연결리스트 구조체 다음 노드를 가르킨다</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node* head;<span class="comment">//node는 항상 포인트변수로 동적할당을 이용해서 필요한만큼만 메모리를 쓴다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//Node 구조체 사이즈만큼의 메모리 할당을 head에게</span></span><br><span class="line">	Node* node1 = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//node1에 Node사이즈의 메모리 할당</span></span><br><span class="line">	node1-&gt;data = <span class="number">1</span>;</span><br><span class="line">	Node* node2 = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	node2-&gt;data = <span class="number">2</span>;</span><br><span class="line">	head-&gt;next = node1; <span class="comment">// head에서 node1으로 연결</span></span><br><span class="line">	node1-&gt;next = node2;</span><br><span class="line">	node2-&gt;next = <span class="literal">NULL</span>;<span class="comment">//항상 끝Node는 next값으로 NULL을 가지고 더이상 연결된게 없다고 알림</span></span><br><span class="line">	Node* cur = head-&gt;next;<span class="comment">//head에게 next를 가르키도록 만듦</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cur-&gt;data);</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">위는 다음과 동일</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFront</span><span class="params">(Node* root, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">	Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">// 새 node를 생성해서 메모리 할당하고</span></span><br><span class="line">	node-&gt;data = data; <span class="comment">//새 node의 data로는 입력받은 data를 지정하고</span></span><br><span class="line">	node-&gt;next = root-&gt;next; <span class="comment">//새 node의 다음값으로는 원래 root의 다음값을 연결하고</span></span><br><span class="line">	root-&gt;next = node; <span class="comment">//원래 root의 다음값을 새 node로 연결한다.</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeFront</span><span class="params">(Node* root)</span></span>; &#123;</span><br><span class="line">	Node* front = root-&gt;next;<span class="comment">//현재 front와 root와의 관계 설정. root의 다음값은 front</span></span><br><span class="line">	root-&gt;next = front-&gt;next;<span class="comment">//root의 다음값을 front가 아닌 front의 next로 설정(건너뜀)</span></span><br><span class="line">	<span class="built_in">free</span>(front);<span class="comment">//front 메모리 해제</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeAll</span><span class="params">(Node* root)</span> </span>&#123; <span class="comment">//모든 연결리스트를 메모리 해제하는방법</span></span><br><span class="line">	Node* cur = head-&gt;next; <span class="comment">//현재 포인트(cur)를 맨앞 head의 next에 놓고</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">//현재 포인트값이 NULL이 아닐동안</span></span><br><span class="line">		Node* next = cur-&gt;next; <span class="comment">//Node 포인트를 cur의 next값으로 조준하고</span></span><br><span class="line">		<span class="built_in">free</span>(cur); <span class="comment">//현재 cur를 메모리 해제한다음에</span></span><br><span class="line">		cur = next; <span class="comment">//지정해놨던 next값을 cur현재포인터로 다시잡는다.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAll</span><span class="params">(Node* root)</span> </span>&#123; <span class="comment">//root노드부터 전부 표시하기</span></span><br><span class="line">	Node* cur = head-&gt;next; <span class="comment">//현재 포인터를 head 다음 노드로 설정하고</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">//마지막까지</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cur-&gt;data); <span class="comment">//현재 노드의 데이터를 출력하고 </span></span><br><span class="line">		cur = cur-&gt;next; <span class="comment">//포인터를 다음으로 옮긴다.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>자료구조 와 알고리즘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.	스택 – 한쪽으로 들어가서 한쪽으로 나오는 자료구조</span><br><span class="line">메모리공간이 비효율적일 수 있음</span><br><span class="line">연결리스트를 이용해서 스택 이용가능</span><br><span class="line">2.	중위표기법 : 여러 수식을 표기하는 표기방법(7*5+3)</span><br><span class="line">3.	후위표기법 : 컴퓨터가 표기하는 방법 (7 5 * 3 +)</span><br><span class="line">4.	큐: 뒤쪽으로 들어가서 앞쪽으로 나오는 자료구조</span><br><span class="line">스케줄링, 탐색 알고리즘에서 사용, </span><br><span class="line">배열, 연결리스트 둘다 사용 가능, 난이도 낮음, </span><br><span class="line">5.	선택정렬과 삽입정렬</span><br><span class="line">선택정렬: 가장 작은것을 앞으로 보내는 정렬기법이며, 작은것 선택에 N번, 앞으로 보내는데에 N번의 연산으로 O(N^2)시간복잡도를 갖는다.</span><br><span class="line">(선택해서 앞으로보내기)</span><br><span class="line">삽입정렬: 각 숫자를 적절한 위치에 삽입하며, 들어갈 위치 선택에N번 선택하는 횟수로 N번으로 O(N^2)의 시간복잡도를 갖는다. </span><br><span class="line">(인덱스 펼쳐놓고 삽입하기)</span><br><span class="line">6.	퀵정렬 : 피벗을 기준으로 큰 값과 작은값을 서로 교체, 교체하는데 N번 엇갈린경우 교체 이후에 원소가 반으로 나뉘므로 전체 원소를 나누는데 평균 logn번이 소요되어 NlogN의 시간복잡도, 완전 이진트리와 흡사. 컴퓨터 공학에서 선호하는 형태</span><br><span class="line">편향 분할이 발생하면 복잡도가 N^2으로 높아질 수 있으므로 C언어로 구현하지 않고 C++의 알고리즘 라이브러리를 이용한다.(NlogN)보장</span><br><span class="line">(기준점놓고 계속해서 좌우로 정리하기)</span><br><span class="line">7.	계수정렬(Counting sort): 크기를 기준으로 데이터를 센다. N의 시간복잡도. </span><br><span class="line">배열을 만들어 대상과 같은 인덱스를 놓고 하나씩 추가하는데, 배열의 인덱스가 넘어가는 크기는 정렬하지 못한다. 많은 메모리를 요구하지만 빠르게 동작한다. </span><br><span class="line">8.	기수정렬 : 자릿수를 기준으로 차례대로 데이터를 정렬, 가장 큰 자릿수를 D라고 했을때 O(DN)시간복잡도를 갖는다. 0~9인덱스를 갖고 10의단위마다 인덱스에 갯수를 추가해서 1의단위 먼저 정렬하고, 10 100자리 순으로 정렬한다. 계수정렬보다 느리나 숫자가 매우 큰것도 가능</span><br><span class="line">9.	이진트리: 루트노드에서 가지를 뻗어 리프노드로 이어진다.</span><br><span class="line">길이: 거쳐야하는 가지수, 깊이: 단</span><br><span class="line">전위 순회 순서(위에서부터 아래로 갔다가 오른쪽으로)</span><br><span class="line">중위 순회 순서(맨 왼쪽에서부터 오른쪽으로)</span><br><span class="line">후위 순회 순서(밑에서부터 중간까지, 맨위는 마지막)</span><br><span class="line">10.	우선순위 큐: 우선순위를 가진 데이터를 저장하는 큐, 우선순위가 높은게 먼저나온다. 작업 스케줄링, 정렬, 네트워크 관리 등 사용.  최대 힙을 이용해 구현하며, 완전이진트리를 이용. 최대 힙: 부모노드가 자식노드보다 값이 큰 완전 이진트리 의미. = 루트가 가장 큰 값, 우선순위 삽입/삭제는logN복잡도, 정렬은 NlogN복잡</span><br><span class="line">11.	순차sequential탐색: 특정원소를 찾기위해 순차적으로 하나씩 찾기. 찾을 문자열을 찾으면 그 인덱스값을 반환한다. N복잡도. </span><br><span class="line">이진탐색: 정리되어있는 배열 내부의 값을 특정 지점부터 찾아나가며 좁혀가는 방식. O(logN)복잡도를 갖는다. </span><br><span class="line">12.	그래프의 개념과 구현</span><br><span class="line">인접행렬방식: 2차원 배열 사용</span><br><span class="line">root에서 child 1로가는건 3, child 2로가는건 7일때</span><br><span class="line">0   3   7 </span><br><span class="line">3   0  무한</span><br><span class="line">7  무한 0</span><br><span class="line"> Child 1 에서 child 2로 가는건 없으니 무한 자기자신은 0</span><br><span class="line">V^2의 공간 요구, 공간효율성 낮음, O(1)의 시간 필요</span><br><span class="line">인접리스트 방식 : 리스트 사용</span><br><span class="line">간선의 정보만 저장하여 O(E) 공간 요구, 공간효율성 높음, 연결 확인에 0(V)시간 요구</span><br><span class="line">13.	깊이 우선 탐색: 깊은것을 우선 탐색, 전체 노드를 맹목적으로 탐색하고자 할떄 사용, 스택 자료구조에 기초. 빠르게 모든 경우의 수를 탐색하고자 할때 쉽게 사용 O(N)시간 소요</span><br><span class="line">14.	너비 우선 탐색: 깊이우선과 마찬가지로 전체 노드 탐색, 큐자료구조 기초. </span><br><span class="line">고급 그래프 탐색 알고리즘에 활용. O(N)소요, 전수탐색알고리즘</span><br><span class="line">15.	이진 탐색 트리: 검색할때마다 대상이 반절씩 줄어들어 O(logN)시간복잡도</span><br><span class="line">설계시 완전 이진트리가 될수있도록 설계</span><br><span class="line">16.	AVL트리: 균형이 갖춰진 이진트리, O(logN)시간복잡도, 간단한 구현과정으로 완전 이진트리 유지. 왼쪽자식보다 오른쪽 자식높이(균형인자)와 2이상 차이날때 문제. 높이값을 변수로 가짐. 균형잡기는 노드가 삽일될 때마다 수행되며, 삽입시간복잡도는 O(logN)이다. 각트리의 균형잡기는 O(1)의 시간 복잡도를 만족해야한다.</span><br><span class="line">17.	해시 : 데이터를 최대한 빠른 속도로 관리하도록 도와주며, 메모리를 많이 소모하지만 빠르다. </span><br><span class="line">여러 데이터가 한곳에 저장되면 충돌할 수 있는데 충돌 해결:</span><br><span class="line">선형 조사법(데이터가 차있으면 다음 인덱스에 저장)</span><br><span class="line">, 이차 조사법</span><br><span class="line">충돌 발생시, 멀찍이 떨어뜨려 저장, 데이터 편중 방지</span><br><span class="line">해시 테이블 버켓에 여러 항목을 저장하는 체이닝</span><br><span class="line">해시 삽입 삭제는 O(1)의 시간 복잡도</span><br><span class="line">18.	프림알고리즘은 최소 스패닝 트리를 구하는 과정에서 O(ElogV)시간복잡도</span><br><span class="line">19.	다익스트라의 최단경로:</span><br><span class="line">자기자신의 거리는 0, 갈수있는 노드에 대해서는 거리를 기록, 갈수없는건 거리 무한 이라고 할 때 가장 이동거리가 짧은 노드를 트리에 포함한다. 그렇게 최대한 갈 수 있는 노드를 전부 포함시킨다. O(ElogV)복잡도</span><br><span class="line">20.	세그먼트 트리</span><br><span class="line">선형적으로 구간 합을 구한다면 O(N)데이터 모두 확인하여야하나.</span><br><span class="line">트리 구조로 구간 합을 구하면 O(logN)으로 구할 수 있다.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>블로그 글쓰기 순서</p>
<p>md 작성</p>
<p>blog/source/_posts 저장</p>
<p>$ hexo generate</p>
<p>$ hexo server</p>
<p>$ hexo deploy</p>
<p>끝..</p>
]]></content>
  </entry>
  <entry>
    <title>(파이썬) 파이썬으로 메일보내기!</title>
    <url>/2021/08/06/2021-08-06-python_send_mail/</url>
    <content><![CDATA[<p> 파이썬을 이용해서 메일을 보내는 코드입니다.</p>
<span id="more"></span>

<ol>
<li>메일보내기<br>```Python<h1 id="Multipurpose-Internet-Mail-Extension-모듈-가져오기"><a href="#Multipurpose-Internet-Mail-Extension-모듈-가져오기" class="headerlink" title="Multipurpose Internet Mail Extension 모듈 가져오기"></a>Multipurpose Internet Mail Extension 모듈 가져오기</h1>from email.mime.text import MIMEText<br>from email.mime.multipart import MIMEMultipart</li>
</ol>
<p>#Simple Mail Transfer Protocel 라이브러리 가져오기<br>import smtplib</p>
<p>#정규표현식(regular expression) 모듈 가져오기<br>import re</p>
<p>#로그인에 사용될 변수 미리 지정<br>SMTP_SERVER = ‘smtp.gmail.com’<br>SMTP_PORT = 465<br>SMTP_USER = ‘<a href="mailto:&#109;&#109;&#114;&#105;&#x61;&#110;&#x6e;&#53;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#109;&#109;&#114;&#105;&#x61;&#110;&#x6e;&#53;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a>‘<br>SMTP_PASSWORD = ‘비밀번호’</p>
<p>def send_mail(name, addr, subject, contents, attachment=None):<br>    #정규표현식을 사용해서 변수addr이 지정한 표현식 인지 확인<br>if not re.match(‘(^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$)’, addr):<br>                  # ^부분뒤로의 규칙이 맨 앞에 왔는지 판단, +는 여러 문자, @은 @,<br>                    .은 .으로 $으로 문자열이 종료됨을 나타내게 작성<br>        print(‘Wrong email’)<br>        return #여기서 리턴하면 아래 함수가 실행되지 않음</p>
<h1 id="이메일에-탑재할-msg리스트를-MIMEMultipart-‘alternative’-로-지정"><a href="#이메일에-탑재할-msg리스트를-MIMEMultipart-‘alternative’-로-지정" class="headerlink" title="이메일에 탑재할 msg리스트를 MIMEMultipart(‘alternative’)로 지정"></a>이메일에 탑재할 msg리스트를 MIMEMultipart(‘alternative’)로 지정</h1><p>msg = MIMEMultipart(‘alternative’)</p>
<h1 id="첨부파일이-있을경우-alternative-에서-mixed로-변경"><a href="#첨부파일이-있을경우-alternative-에서-mixed로-변경" class="headerlink" title="첨부파일이 있을경우 alternative 에서 mixed로 변경"></a>첨부파일이 있을경우 alternative 에서 mixed로 변경</h1><pre><code>if attachment:
    msg = MIMEMultipart(&#39;mixed&#39;)

msg[&#39;From&#39;] = SMTP_USER
msg[&#39;To&#39;] = addr
msg[&#39;Subject&#39;] = name + &#39;님, \n&#39; + subject + &#39;에 대해 알아보세요&#39;
text = MIMEText(contents, _charset = &#39;utf-8&#39;)#한글로 첨부파일 쓰면 깨진다.
msg.attach(text)
if attachment :
    from email.mime.base import MIMEBase #MIMEBase 는 파일 전송에 필요한 형태
    from email import encoders #SMTP에서 요구하는 파일 전송형태로 변환
    
    #MIMEBase 를 사용했을때 들어갈 수 있는 파일의 타입 
    application 과 octect-stream 은 일반 파일을 뜻함
    file_data = MIMEBase(&#39;application&#39;, &#39;octect-stream&#39;)

    #attachment를 rb(read binary)형태로 open하여 read하고 file_data안에set_payload한다. 
    file_data.set_payload(open(attachment, &#39;rb&#39;).read())
    encoders.encode_base64(file_data) #file_data를 base64 형태로 인코드
    import os
    filename = os.path.basename(attachment)
    
    #file_data 언급 전에header를 추가하는 함수를 사용해서 file_data에 대한 정보(메타데이터) 삽입
    file_data.add_header(&#39;Content-Disposition&#39;, &#39;attachment; filename=&quot;&#39; + filename + &#39;&quot;&#39;)
    
    msg.attach(file_data)

#어디에 접속해야할지 정보를 담은 클래스 변수
smtp = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
#로그인 변수
smtp.login(SMTP_USER, SMTP_PASSWORD)
#보내는이, 받는이, 메세지.as_string()함수 적용필요
smtp.sendmail(SMTP_USER, addr, msg.as_string())
#로그아웃
smtp.close()


send_mail(이름, 수신이메일, subject, contents, attachment)
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>my first post</title>
    <url>/2021/07/27/my-first-post/</url>
    <content><![CDATA[<p>hello!</p>
<p>This is my new dev blog!</p>
<p>excited!</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/08/20/test/</url>
    <content><![CDATA[<p> 블로그를 개선하였습니다. </p>
<h1> 블로그 테마를 좀 보기좋은것으로 재선택 했습니다.</h1>



<h2>Table of Contents를 볼 수 있게 되었습니다.</h2>



<h3> 게시물 카테고리와 태그를 생성하였습니다. </h3>



<h4>댓글기능을 추가하였습니다. </h4>



<h5>home도 만들었습니다.</h5>

]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>(JAVA)Static 변수와 메소드</title>
    <url>/2021/08/20/2021-08-20-JAVA-Static%EB%B3%80%EC%88%98%EC%99%80%20Singleton%ED%8C%A8%ED%84%B4/</url>
    <content><![CDATA[<p> 아직 기본 개념이 모호한데 진도를 계속 나가봅니다. </p>
<p>Static 이라는 것은 정적이라는 뜻을 갖고있는데, 고정되어있다 이런 느낌입니다.</p>
<p>다른 변수들이 생기고 사라지고 할 때, Static은 자리를 지키면서 프로그램이 종료될때까지 유지됩니다.</p>
<span id="more"></span>



<h2> Java 메모리</h2>

<p><img src="C:\Users\Jisoo\Documents\dev\blog\source\img\image-20210820223543146.png" alt="image-20210820223543146"></p>
<p>아래서부터 </p>
<p>Code(Text) 에 작성한 코드가 들어간다. </p>
<p>Static에 전역변수가 들어간다. 어디서든지 접근할 수 있다. 프로그램 종료까지 없어지지 않는다. </p>
<p>Stack이라는것은 한쪽에서만 들락거릴수있는 메모리로, 컴파일 단계에서 이미 사이즈가 정해진다. 프로그램 운용 중 늘어날 수 없다. 함수가 들락거리면서 써졌다 지워졌다 한다. 맨 밑에는 main 함수가 있다고 한다. </p>
<p>Heap은 프로그램 운용시 사이즈가 변한다. 컴파일 단계에서 알기 힘든 것들 예를들면 사이즈가 큰 배열 등이 할당된다.</p>
<h2>Static 변수와 메서드의 활용</h2>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> class <span class="title">Company</span> <span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">-&gt; 다른 클래스에서 생성자 호출 못하게 선점한다</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Company instance = <span class="keyword">new</span> Company();</span><br><span class="line">-&gt;정적변수로 instance를 설정한다.</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Company <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( intance == <span class="keyword">null</span> ) &#123;</span><br><span class="line">instance == <span class="keyword">new</span> Company&#125;; <span class="keyword">return</span> instance</span><br><span class="line">-&gt;다른클래스에서 생성자를 getInstance로 호출할 수 있도록 설정한다. </span><br></pre></td></tr></table></figure>

<p>위와같이 세팅 후 Company 생성자를이용하여 다른 이름으로 인스턴스를 만들어도 똑같은 인스턴스 주소를 가리킨다. </p>
<h2> 예제: Singleton 패턴을 활용한 자동차공장</h2>

<p>1개만 존재하는 CarFactory 에서 createCar 메서드를 이용해 Car객체를 만드는데 Car객체가 만들어질때마다 그 변수의 carNum값이 10001부터 1씩 증가하도록 하라 </p>
<figure class="highlight java"><figcaption><span>: CarFactoryTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	CarFactory factory = CarFactory.getInstance();</span><br><span class="line">    	Car sonata1 = factory.createCar();</span><br><span class="line">    	Car sonata2 = factory.createCar();</span><br><span class="line">    	System.out.println(sonata1.getCarNum());</span><br><span class="line">	System.out.println(sonata2.getCarNum());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">풀이: 단 한개만 존재해야하는 객체가 필요한 경우 싱글톤 패턴을 사용한다. 이 문제의 경우 CarFactory가 하나만 존재하고 CarCar는 여러 개 존재할 수 있어야 한다. CarFactory는 모든 객체가 변수명만 다르게 공유할 수 있는 클래스 변수가 되고 Car 변수는 인스턴스 변수가 된다. </span><br><span class="line"></span><br><span class="line">CarFactoryTest.java 파일로부터 알 수 있는 정보는 </span><br><span class="line"></span><br><span class="line">1.  1개만 존재해야하는 CarFactory와, CarFactory를 getInstance함수로 불러온다는 것</span><br><span class="line"></span><br><span class="line">2.  createCar함수로 Car 객체를 생성한다</span><br><span class="line"></span><br><span class="line">3.  createCar함수는 CarFactory안에 있어야 한다. </span><br><span class="line"></span><br><span class="line">4.  객체.getCarNum 함수는 Car 객체의 번호를 리턴한다.</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><figcaption><span>: CarFactory.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CarFactory를 클래스 변수로 사용하기 위한 부분</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//instance라는 객체를 static에 생성하고 생성자를 private으로 막아서 다른곳에서 함수 호출을 못하게 막아놓는다. new를 쓰지 못하고 .getInstance를 사용해서 접근할 수밖에 없게 만든다. </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CarFactory instance = <span class="keyword">new</span> CarFactory();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">CarFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//getInstance()를 사용하면, CarFactory타입의 instance객체가 반환된다. </span></span><br><span class="line"><span class="comment">//즉, CarFactoryTest.java에서 factory는 instance의 다른 이름이다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance == <span class="keyword">new</span> CarFactory();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//함수 createCar를 정의하는 부분</span></span><br><span class="line"><span class="comment">//노출되지 않는 serialNum 을 별도 생성하여 새로운 Car 변수에 대입하도록 한다. </span></span><br><span class="line"><span class="comment">//serialNum 은 createCar변수만 참조할수 있어야하므로 private하여 createCar외에 요소가 serialNum을 바꿀 수 없도록 만든다. </span></span><br><span class="line"><span class="comment">//CarFactory프로그램 운용중 항시 있으며 번호를 줘야하므로 static</span></span><br><span class="line"><span class="comment">//그러나 본 코드에서 Static 이 붙지 않아도 실행이 가능하므로 주의한다. </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> serialNum = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">//Car클래스를 리턴하는 createCar 메소드 이므로 Car가 붙는다.</span></span><br><span class="line"><span class="comment">//이게 메소드인지 생성자인지 헷갈린다. 생성자는 클래스명이랑 같다고 했는데</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 새 Car클래스 생성자(serialNum 에 1을 먼저 더하고 대입한다.)를 이용해 Car 클래스 targetCar 를 생성한다. </span></span><br><span class="line">    	Car targetCar = <span class="keyword">new</span> Car(++ serialNum);</span><br><span class="line">    <span class="keyword">return</span> targetCar;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>: car.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//다음이 없다면 Car a = new Car(3030);를 입력할 수 있어 carNum을 임의로 입력할 수 있게 된다. 하지만 있어도 생성이 되는 것이 문제, 그렇다면 이걸 왜 입력해야하는지?</span></span><br><span class="line"><span class="comment">// =&gt; 두 개의 생성자가 다른 매개변수를 갖고 선언되면 생성자 오버로딩</span></span><br><span class="line"><span class="comment">// =&gt; 초기화되지 않은 필드는 오류를 일으키는 원인</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//carNum 도 다른곳에서 볼필요없으므로 private</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> carNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Car생성자에 대한 정의이다. 생성자는 메소드와 비슷한 모양이나, 리턴 타입이 없고, 생성자 이름은 클래스 이름과 동일해야한다. 매개변수는 생략되어도 되고 생성자는 오버로딩이 가능하여 여러 개를 만들 수도 있다. </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> serialNum)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.carNum = serialNum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCarNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.carNum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
  <entry>
    <title>(JAVA)기초</title>
    <url>/2021/08/20/2021-08-20-JAVA-%EA%B8%B0%EC%B4%88/</url>
    <content><![CDATA[<p> Java를 공부한 내용을 앞으로 블로그에 가능한 매일 업로드할 예정입니다. </p>
<p>워크시트라는것을 워드로 작성했었는데, 차라리 md로 작성하는것이 훨씬 나을것 같다고 생각이 됩니다.</p>
<span id="more"></span>

<h2> Java의 메서드</h2>

<p>메서드는 클래스 내부에 구현되는 함수, 멤버함수라고도 한다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; -&gt;Student의 속성들</span><br><span class="line"><span class="keyword">int</span> studentNumber; -&gt; 멤버변수</span><br><span class="line">String studentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>함수정의: 이름, 매개변수, 반환값, 함수몸체</p>
<p>매개변수는 자료형과 함께 써야한다. </p>
<p>반환값에 따라 함수의 자료형 결정, 반환값이 없으면 void가 들어간다. </p>
<p>스택: 함수가 호출되면 지역 변수들이 사용하는 메모리</p>
<p>​          (함수에서 사용하는 메모리 공간이며, 지역 변수들이 자리를 잡는다.)</p>
<p>인스턴스(instance): new 키워드를 이용해 객체(인스턴스) 생성, 동적 메모리(heap)에 할당된다. 사용이 끝난 동적 메모리는 자바에서 자동으로 수거한다. 이때 스택에 있는 객체 이름을 참조변수라고 하며 메모리의 주소를 참조값(레퍼런스 벨류)라고 한다.</p>
<h2>생성자</h2>

<p>생성자는 무엇인가?</p>
<p> =&gt; 클래스와 동일한 명칭으로 인스턴스를 생성하기 위한 것(Constructor)</p>
<p>생성자의 특징은 무엇인가?</p>
<p> =&gt; 모든 클래스는 생성자를 가지고 있다. </p>
<p> =&gt; 메소드와 비슷한 모양이나 메소드가 아니다.</p>
<p> =&gt; 클래스에 생성자를 만들지 않으면, 자동으로 만들어줘서 new 키워드로 호출할 수 있다. </p>
<p> =&gt; 오버로딩: 이름은 똑같고 매개변수만 다르게 정의할 수 있다.</p>
<p>생성자를 써야하는 이유는 무엇인가?</p>
<p> =&gt; 인스턴스를 생성하여 초기값을 부여해준다. </p>
 <h2>접근제어지시자</h2>

<p>종류: public, private, protected, none</p>
<p>private: 동 클래스 내부에서만 접근 가능, 외부, 상속클래스 접근불가</p>
<p>default: 같은 패키지 내부에서 (상속이라도 패키지 다르면 접근불가)</p>
<p>protected: 같은 패키지나 상속관계에서 접근 가능</p>
<p>public: 클래스 어디서나 접근 가능</p>
<h2>캡슐화</h2>

<p> 필요한 정보와 기능만 외부에 노출한다.</p>
<p> 대부분 멤버 변수와 메서드를 감추고 외부엔 통합 인터페이스만 제공하여 오류를 최소화 한다. </p>
<h2>배열</h2>

<h3>
    배열의 특징
</h3>

<p>배열은 동일한 자료형만 담을 수 있다. </p>
<p>물리적 위치와 논리적 위치가 동일하다.</p>
<p>ArrayList를 활용한다.</p>
<p>배열 크기는 바꿀 수 없다.</p>
<p>배열의 길이와 요소는 동일하지 않다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//주의: 배열 요소간의 곱을 구하는경우 빈 0 때문에 0이 나올수 있기 때문에</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1.1</span> ; count++</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2.1</span> ; count++</span><br><span class="line"><span class="comment">//이렇게 count변수를 활용하는 것이 좋다. </span></span><br></pre></td></tr></table></figure>



 <h3>배열 초기화(initializing)</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//배열에 1부터 10까지 집어넣는다면:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, num = <span class="number">1</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">	arr[i] = num ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//배열에 담긴 1부터 10까지를 모두 합한다면:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: arr) &#123;</span><br><span class="line">	total += num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위는 배열 내 모든 요소에 적용할 방법!</p>
<h3>
    얕은복사와 깊은복사
</h3>

<p>얕은복사는 데이터의 주소만 복사하고</p>
<p>깊은복사는 데이터를 전체 복사해온다. </p>
<h4>
    얕은복사
</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(library, <span class="number">0</span>, copyLibrary, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//library 로부터 copyLibrary로 5자리의 배열을 복사한다. </span></span><br></pre></td></tr></table></figure>

<h4>
    깊은복사
</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//배열을 일일히 초기화 해준다음에</span></span><br><span class="line">copyLibrary[<span class="number">0</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">1</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">2</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">3</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line">copyLibrary[<span class="number">4</span>] = <span class="keyword">new</span> Book_Array();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i&lt;library.length; i++) &#123;</span><br><span class="line">	copyLibrary[i].setAuthor(library[i].getAuthor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//library로부터 for문으로 하나씩 대입하여 copyLibrary에 복사해넣는다. </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>KDT</tag>
      </tags>
  </entry>
</search>
